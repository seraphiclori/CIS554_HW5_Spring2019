//HW5 Due: April 7 (Sunday) at 11:59PM
// Diana Zheng
// dyzheng
// dyzheng@syr.edu

/*
// Yang Hu and I discussed the constructor/destructor functions
// She gave me a tip to do a full east circle first for construct
// and using reset on the last east/south node for destructor
 */
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
    shared_ptr<node> east;
    shared_ptr<node> south;
    int value;
    node() {}
    node(int i) { value = i; }
};

class ring {
public:
    //Implement all functions described below
    //funciton operator[] can be invoked by other functions
    
    
    shared_ptr<node> head;
    int num_rows;
    int num_cols;
    ring(){}
    ring(int i, int j);//constructor
    //i rows and j cols
    //values from 0 to i*j-1
    //See the photo for ring structures.
//
    ~ring(){
        shared_ptr<node> n = head;
        int i = 1;
        while (i != num_cols * num_rows){
            n = n->east;
            i++;
        }
        n->east.reset();
        n->south.reset();
        num_rows, num_cols = 0;
    };//destructor; do as little work as possible
    ring(const ring &r); //copy constructor
    ring(ring &&r); //move constructor
//    void operator=(ring &&r);//R-value operator=
//    void operator=(const ring &r); //L-value operator=
    ring(const initializer_list<int> &V);//see the explanation in main function
    int & operator[](int a);
    int & operator[](pair<int, int> p); //first is row number and second is col number

    void DelCol(int i);//delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
};

//
//void ring::operator=(ring &&r){ //R-value
//    shared_ptr<node> n = head;
//    int i = 1;
//    while (i != num_cols * num_rows){
//        n = n->east;
//        i++;
//    }
//    if (n) {
//    n->east.reset();
//    n->south.reset();
//    num_rows, num_cols = 0;
//    }
//
//    num_rows = r.num_rows;
//    num_cols = r.num_cols;
//    i = num_rows;
//    int j = num_cols;
//
//    shared_ptr<node> p = r.head;
//    n = make_shared<node>(p -> value);
//    head = n;
//    p = p->east;
//
//    for (int x = 0; x < (num_rows * num_cols) - 1; x++){
//        n->east = make_shared<node>(p->value);
//        n = n->east;
//        p = p->east;
//    }
//    n->east = head;
//    n->south = head;
//
//    n = head;
//    shared_ptr<node> target = n;
//    for (int rows = 0; rows < i; rows++){
//        for (int k = 0; k < j; k++){
//            target = n -> east; //To get to the second row
//        }
//        for (int k = 0; k < j; k++){
//            n->south = target;
//            n = n->east;
//            target = target->east;
//        }
//    }
//
//    shared_ptr<node> f_row = head->east;
//    for (int rows = 1; rows < i; rows++){
//        for (int k = 0; k < j; k++){
//            target = n->east;
//        }}
//    for(int k = 1; k < j; k++){
//        target->south = f_row;
//        target = target -> east;
//        f_row = f_row->east;
//    }
//    n = r.head;
//    int x = 1;
//    while (x < r.num_cols * r.num_rows){
//        n = n->east;
//        x++;
//    }
//    n->east.reset();
//    n->south.reset();
//    r.num_rows, r.num_cols = 0;
//
//}

//
//void ring::operator=(const ring &r){ //L-Value
//    shared_ptr<node> n = head;
//    int i = 1;
//    while (i != num_cols * num_rows){
//        n = n->east;
//        i++;
//    }
//    n->east.reset();
//    n->south.reset();
//    num_rows, num_cols = 0;
//
//    num_rows = r.num_rows;
//    num_cols = r.num_cols;
//    i = num_rows;
//    int j = num_cols;
//
//    shared_ptr<node> p = r.head;
//    n = make_shared<node>(p -> value);
//    head = n;
//    p = p->east;
//    //Start by making a giant circle of Easties
//    for (int x = 0; x < (num_rows * num_cols) - 1; x++){
//        n->east = make_shared<node>(p->value);
//        n = n->east;
//        p = p->east;
//    }
//    n->east = head;
//    n->south = head;
//
//    n = head;
//    shared_ptr<node> target = n;
//    for (int rows = 0; rows < i; rows++){
//        for (int k = 0; k < j; k++){
//            target = n -> east; //To get to the second row
//        }
//        for (int k = 0; k < j; k++){
//            n->south = target;
//            n = n->east;
//            target = target->east;
//        }
//    }
//
//    shared_ptr<node> f_row = head->east;
//    for (int rows = 1; rows < i; rows++){
//        for (int k = 0; k < j; k++){
//            target = n->east;
//        }}
//    for(int k = 1; k < j; k++){
//        target->south = f_row;
//        target = target -> east;
//        f_row = f_row->east;
//    }
//
//}
//


//move constructor
ring::ring(ring &&r){
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    int i = num_rows;
    int j = num_cols;

    shared_ptr<node> p = r.head;
    shared_ptr<node> n = make_shared<node>(p -> value);
    head = n;
    p = p->east;
    //Start by making a giant circle of Easties
    for (int x = 0; x < (num_rows * num_cols) - 1; x++){
        n->east = make_shared<node>(p->value);
        n = n->east;
        p = p->east;
    }
    n->east = head;
    n->south = head;

    n = head;
    shared_ptr<node> target = n;
    for (int rows = 0; rows < i; rows++){
        for (int k = 0; k < j; k++){
            target = n -> east; //To get to the second row
        }
        for (int k = 0; k < j; k++){
            n->south = target;
            n = n->east;
            target = target->east;
        }
    }

    shared_ptr<node> f_row = head->east;
    for (int rows = 1; rows < i; rows++){
        for (int k = 0; k < j; k++){
            target = n->east;
        }}
    for(int k = 1; k < j; k++){
        target->south = f_row;
        target = target -> east;
        f_row = f_row->east;
    }

    n = r.head;
    int x = 1;
    while (x != r.num_cols * r.num_rows){
        n = n->east;
        x++;
    }
    n->east.reset();
    n->south.reset();
    r.num_rows, r.num_cols = 0;

}

//copy constructor
ring::ring(const ring &r) {
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    int i = num_rows;
    int j = num_cols;
    
    shared_ptr<node> p = r.head;
    shared_ptr<node> n = make_shared<node>(p -> value);
    head = n;
    p = p->east;
    //Start by making a giant circle of Easties
    for (int x = 0; x < (num_rows * num_cols) - 1; x++){
        n->east = make_shared<node>(p->value);
        n = n->east;
        p = p->east;
    }
    n->east = head;
    n->south = head;
    
    n = head;
    shared_ptr<node> target = n;
    for (int rows = 0; rows < i; rows++){
        for (int k = 0; k < j; k++){
            target = n -> east; //To get to the second row
        }
        for (int k = 0; k < j; k++){
            n->south = target;
            n = n->east;
            target = target->east;
        }
    }
    
    shared_ptr<node> f_row = head->east;
    for (int rows = 1; rows < i; rows++){
        for (int k = 0; k < j; k++){
            target = n->east;
        }}
    for(int k = 1; k < j; k++){
        target->south = f_row;
        target = target -> east;
        f_row = f_row->east;
    }
}


//initializer list
ring::ring(const initializer_list<int> &V){
    auto it = V.begin();
    num_rows = *it;
    it++;
    num_cols = *it;
    it++;
    int i = num_rows;
    int j = num_cols;
    if (i <= 0 || j <= 0) return;
    
    if(i * j == 1){
        shared_ptr<node> n = make_shared<node>(*it);
        head = n;
        n->east = n;
        n->south = n;
    } else {
        shared_ptr<node> n = make_shared<node>(*it);
        head = n;
        it++;
        //Start by making a giant circle of Easties
        for (int x = 0; x < (num_rows * num_cols) - 1; x++){
            n->east = make_shared<node>(*it);
            n = n->east;
            it++;
        }
        n->east = head;
        n->south = head;
        //East is finished
        
        n = head;
        shared_ptr<node> target = n;
        for (int rows = 0; rows < i; rows++){
            for (int k = 0; k < j; k++){
                target = n -> east; //To get to the second row
            }
            for (int k = 0; k < j; k++){
                n->south = target;
                n = n->east;
                target = target->east;
            }
        }
        
        shared_ptr<node> f_row = head->east;
        for (int rows = 1; rows < i; rows++){
            for (int k = 0; k < j; k++){
                target = n->east;
            }}
        for(int k = 1; k < j; k++){
            target->south = f_row;
            target = target -> east;
            f_row = f_row->east;
        }
    }
    
}

//constructor
ring::ring(int i, int j){
    num_rows = i;
    num_cols = j;
    if (i <= 0 || j <= 0) return;
    
    if(i * j == 1){
        shared_ptr<node> n = make_shared<node>(0);
        head = n;
        n->east = n;
        n->south = n;
    } else {
        shared_ptr<node> n = make_shared<node>(0);
        head = n;
        
        //Start by making a giant circle of Easties
        for (int x = 0; x < (num_rows * num_cols) - 1; x++){
            n->east = make_shared<node>(x+1);
            n = n->east;}
        n->east = head;
        n->south = head;
        //East is finished
        
        n = head;
        shared_ptr<node> target = n;
        for (int rows = 0; rows < i; rows++){
            for (int k = 0; k < j; k++){
                target = n -> east; //To get to the second row
            }
            for (int k = 0; k < j; k++){
                n->south = target;
                n = n->east;
                target = target->east;
            }
        }
        
        shared_ptr<node> f_row = head->east;
        for (int rows = 1; rows < i; rows++){
            for (int k = 0; k < j; k++){
                target = n->east;
            }}
        for(int k = 1; k < j; k++){
            target->south = f_row;
            target = target -> east;
            f_row = f_row->east;
        }
    }
}


int & ring::operator[](int a){
    shared_ptr<node> n = head;
    while (a != 1){
        n = n->east;
        a--;
    }
    return (n->value);
}

int & ring::operator[](pair<int, int> p){
    shared_ptr<node> n = head;
    for (int i = p.first; i > 1; i--){
        for (int j = num_cols; j > 1; j--){
            n = n->east;
        }
    }
    for (int j = p.second; j > 0; j--){
        n = n->east;
    }
    return (n -> value);
}



void ring::DelCol(int i){//delete col i of *this
    shared_ptr<node> n = head;
    int temp;
    if (i==0){
        shared_ptr<node> p = head->east;
        while (n -> east != head){
            n = n -> east;
        }
        head = head->east;
        n->east = head;
        n->south = head;
        
        //Initial node is handled above
        n = p;
        temp = i-1;
        while (temp > 2){
            n = n -> east;
            temp--;
        }
        for(int i = num_rows; i > 1; i--){
            temp = num_cols;
            while (temp > 2){
                n = n -> east;
                temp--;
            }
            n->east = n->east->east;
        }
        n->south = p;
        
    } else {
        
        temp = i - 1;
        while (temp > 1){
            n = n -> east;
            temp--;
        }
        shared_ptr<node> hold = n->east->east;
        n->east = n->east->east;
        
        for(int i = num_rows; i > 1; i--){
            temp = num_cols;
            while (temp > 1){
                n = n -> east;
                temp--;
            }
            n->east = n->east->east;
        }
        n->south = hold;
    }
    num_cols--;
}

ring ring::Threetimes() {
    ring t = *this;
    shared_ptr<node> n = t.head;
    n->value = n->value*3;
    n = n->east;
    for (int i = 1; i < t.num_cols * t.num_rows; i++){
        n->value = n->value * 3;
        cout << n->value << endl;
        n = n->east;
    }
    return t;
}

//overload operator<<
ostream & operator<<(ostream &str, ring &R){
    shared_ptr<node> n = R.head;
    for (int i = 0; i < R.num_rows; i++){
        for (int j = 0; j < R.num_cols; j++){
            str << n->value << " ";
            n = n->east;
        } str << endl;
    }
    return str;
}


int main() {
    
    ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
    cout << R1 << endl;
    R1[14] = 1000;
    R1[{2, 4}] = 2000;
    cout << R1[14] << " " << R1[{2, 4}] << endl;
    R1.DelCol(3);
    cout << R1 << endl;
    R1.DelCol(4);
    cout << R1 << endl;
    R1.DelCol(0);
    cout << R1 << endl;
    shared_ptr<ring> p1 = make_shared<ring>(3, 5);
    cout << *p1 << endl;
    p1.reset();
    ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
    //first two numbers are num_rows and num_cols; followed by values of nodes of ring
    cout << R2 << endl;
    ring R3(R2);
    cout << R3 << endl;
//    ring R4;
//    R4 = R3;
//    cout << R4 << endl;
//    ring R5;
//    R5 = R4.Threetimes();
//    cout << R5 << endl;
    
    getchar();
    getchar();
    return 0;
}
