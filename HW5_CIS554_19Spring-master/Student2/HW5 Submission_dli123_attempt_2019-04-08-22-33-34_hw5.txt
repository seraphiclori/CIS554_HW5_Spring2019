//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>
#include <vector>
#include <cassert>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }

};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);
	
						//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p1); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::~ring() {
	// In order for a shared pointer to be deleted, it must have no references
	// so get rid of the references
	shared_ptr<node> p = head;
	while (p != nullptr) {
		auto temp = p->east;
		p->south = nullptr;
		p->east = nullptr;
		p = temp;
	}
	head = nullptr;
}

//overload operator<<
//ostream & operator<<(ostream &str, const ring &R) {
//	shared_ptr<node> p = R.head;
//	if (!R.head) { return str; }
//	str << p->value << " ";
//	p = p->south;
//	while (p != R.head) {
//		str << p->value << " ";
//		p = p->south;
//	}
//	return str;
//}

ostream& operator<<(ostream& stream, const ring& r) {
	stream << "East ring" << endl;
	shared_ptr<node> p = r.head;
	int maxAmount = r.num_cols * r.num_rows;
	if (!r.head) { return stream; }
	stream << p->value << " ";
	p = p->east;
	int i = 1;
	while (p != nullptr && p !=r.head && i < maxAmount) {
		stream << p->value << " ";
		p = p->east;
		if (p == nullptr) {
			cout << "ERROR P1 is nullptr" << endl;
		}
		if (i == r.num_cols - 1) {
			cout << endl;
			i = 0;
		}
		else {
			i++;
		}
	}
	stream << endl;
	stream << "South ring" << endl;
	p = r.head;
	maxAmount = r.num_cols * r.num_rows;
	if (!r.head) { return stream; }
	stream << p->value << " ";
	p = p->south;
	i = 1;
	while (p!=nullptr && p != r.head && i < maxAmount) {
		stream << p->value << " ";
		p = p->south;
		if (p == nullptr) {
			cout << "ERROR P1 is nullptr" << endl;
		}
		if (i == r.num_rows - 1) {
			cout << endl;
			i = 0;
		}
		else {
			i++;
		}
	}
	stream << endl;
	return stream;
}

ring::ring(int i, int j){
	num_rows = i;
	num_cols = j;
	int tot = i * j;
	assert(tot > 0);
	if (i != 1 || i != 0) {
		int count = 0;
		shared_ptr<node> temp = make_shared<node>(count); //head
		shared_ptr<node> p = make_shared<node>();
		head = temp;
		temp->east = make_shared<node>();
		temp->south = make_shared<node>();
		count = 1;
		for (int l = 0; l < i*j - 1; l++)
		{
			shared_ptr<node> p = make_shared<node>(count);
			count++;
			p->east = make_shared<node>();
			//p->south = make_shared<node>();
			temp->east = p;
			temp = temp->east;
		}

		temp->east = head; //
		//SOUTH
		p = head;
		temp = p;
		shared_ptr<node> pSouth = temp;
		//shared_ptr<node> pTemp = temp;
		bool once = true;
		for (int s = 0; s < i - 1; s++) {
			if (once) {
				for (int t = 0; t < j; t++) {
					temp = temp->east;
				}
				once = false;
			}
			for (int u = 0; u < j; u++) {
				p->south = temp;
				p = p->east;
				temp = temp->east;
			}
		}
		//cout << p->value << endl;
		pSouth = pSouth->east; //offset one head over;
		//cout << pSouth->value << endl;
		for (int v = 0; v < j - 1; v++) {
			p->south = pSouth;
			p = p->east;
			pSouth = pSouth->east;		}
		p->south = head;
	}
}

ring::ring(const ring &r) {
	cout << "copy constructor" << endl;
	vector<int> valuesToAdd;
	auto p = r.head;
	if (!r.head) { return; }
	p = p->east;
	while (p != nullptr) {
		valuesToAdd.push_back(p->value);
		p = p->east;
	}
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	vector<shared_ptr<node>> rows;
	int totalvalues = num_rows * num_cols;
	assert(totalvalues > 0);
	for (auto it2 = valuesToAdd.begin(); it2 != valuesToAdd.end(); it2++) {
		shared_ptr<node> p1 = make_shared<node>(*it2);
		rows.push_back(p1);
	}

	for (int i = 0; i < rows.size() - 1; i++) {
		shared_ptr<node> p = rows[i];
		shared_ptr <node> p1 = rows[i + 1];
		p->east = p1;
	}
	head = rows[0];
	for (int i = 0; i < rows.size(); i++) {
		int southernIndex = i + num_cols;
		if (southernIndex >= rows.size()) {
			southernIndex = (i % num_cols) + 1;	
		}
		rows[i]->south = rows[southernIndex];
	}
	rows[rows.size() - 1]->south = head;
}

void ring::operator=(const ring &r) {
	cout << "copy =" << endl;
	vector<int> valuesToAdd;
	auto p = r.head;
	if (!r.head) { return; }
	p = p->east;
	while (p != nullptr) {
		valuesToAdd.push_back(p->value);
		p = p->east;
	}
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	vector<shared_ptr<node>> rows;
	int totalvalues = num_rows * num_cols;
	assert(totalvalues > 0);
	for (auto it2 = valuesToAdd.begin(); it2 != valuesToAdd.end(); it2++) {
		shared_ptr<node> p1 = make_shared<node>(*it2);
		rows.push_back(p1);
	}

	for (int i = 0; i < rows.size() - 1; i++) {
		shared_ptr<node> p = rows[i];
		shared_ptr <node> p1 = rows[i + 1];
		p->east = p1;
	}
	head = rows[0];
	for (int i = 0; i < rows.size(); i++) {
		int southernIndex = i + num_cols;
		if (southernIndex >= rows.size()) {
			southernIndex = (i % num_cols) + 1;
		}
		rows[i]->south = rows[southernIndex];
	}
	rows[rows.size() - 1]->south = head;
}

void ring::operator=(ring&& r) {
	cout << "r-value operator" << endl;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	auto p = head;
	auto p1 = r.head;
	p->east = p1->east;
	p->south = p1->south;
	p = p->east;
	p1 = p1->south;
	while (p!= nullptr&& p != head && p1 != r.head) {
		p->east = p1->east;
		p->south = p1->south;
		p = p->east;
		p1 = p1->south;
	}
	cout << "ORIGINAL" << endl;
	cout << r << endl;
	cout << "NEW" << endl;
	cout << *this << endl;
}

ring::ring(ring&& r) {
	cout << "r-value operator" << endl;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	auto p = head;
	auto p1 = r.head;
	p->east = p1->east;
	p->south = p1->south;
	p = p->east;
	p1 = p1->south;
	while (p!=nullptr && p != head && p1 != r.head) {
		p->east = p1->east;
		p->south = p1->south;
		p = p->east;
		p1 = p1->south;
	}
	cout << "ORIGINAL" << endl;
	cout << r << endl;
	cout << "NEW" << endl;
	cout << *this << endl;
}

int& ring::operator[](int a) {
	int x = 0;
	shared_ptr<node> p = head;
	if (x < a) { 
		p = p->east; 
		x++; 
	}
	while (p!=nullptr && x < a  && p != head) {
		p = p->east;
		x++;
	}
	if (p == nullptr) {
		// Not in the list, return -1
		// Have to do it this way because c++ is weird
		int y = -1;
		return y;
	}
	else {
		return p->value;
	}
}

int& ring::operator[](pair<int, int> p1) {
	int maxCol = p1.first;
	int maxRow = p1.second;
	shared_ptr<node> p = head;
	int x = 0;
	if (x < maxRow) {
		p = p->east;
		x++;
	}
	while (x < maxRow && p != head) {
		p = p->east;
		x++;
	}
	x = 0;
	if (x < maxCol) {
		p = p->south;
		x++;
	}
	while (p!=nullptr && x < maxCol && p != head) {
		p = p->south;
		x++;
	}
	if (p == nullptr) {
		int y = -1;
		return y;
	}
	return p->value;
}

ring::ring(const initializer_list<int>&V) {
	assert(V.size() > 3);
	auto it1 = V.begin();
	int count = 0;
	vector<int> valuesToAdd;
	while (it1 != V.end()) {
		if (count == 0) {
			num_rows = *it1;
		}
		else if (count == 1) {
			num_cols = *it1;
		}
		else {
			valuesToAdd.push_back(*it1);
		}
		count++;
		it1++;
	}
	vector<shared_ptr<node>> rows;
	int totalValues = num_rows * num_cols;
	assert(totalValues > 0);
	for (auto it2 = valuesToAdd.begin(); it2 != valuesToAdd.end(); it2++) {
		shared_ptr<node> p = make_shared<node>(*it2);
		rows.push_back(p);
	}
	for (int i = 0; i < rows.size() - 1; i++) {
		shared_ptr<node> p = rows[i];
		shared_ptr<node> p1 = rows[i + 1];
		p->east = p1;
	}
	head = rows[0];
	for (int i = 0; i < rows.size(); i++) {
		int southernIndex = i + num_cols;
		if (southernIndex >= rows.size()) {
			southernIndex = (i % num_cols) + 1;
		}
		rows[i]->south = rows[southernIndex];
	}
	rows[rows.size() - 1]->south = head;
}

void ring::DelCol(int i) {
	shared_ptr<node> p1 = head;
	shared_ptr<node> target = head;
	shared_ptr<node> after;
	shared_ptr<node> last;
	int row_count = 0;
	int count = 0;
	while (row_count < i-1) {
		p1 = p1->east;
		row_count++;
	}
	last = p1->east->east;
	while (count < num_rows-1) {
		target = p1->east;
		after = target->east;
		p1->east = after;
		//target->south.reset;
		//target->east.reset;
		target.reset();
		p1 = p1->south;
	}
	target = p1->east;
	after = last;
	p1->east = after;
	//target->south.reset;
	//target->east.reset;
	target.reset();
}

ring ring::Threetimes() {

	// Make a copy
	ring temp(*this);

	for (int i = 0; i < (temp.num_rows * temp.num_cols); i++) {
		temp[i] *= 3;
	}

	cout << temp << endl;
	return temp;

}

	int main() {

		ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
		cout << R1 << endl;
		R1[14] = 1000;
		R1[{2, 4}] = 2000;
		cout << R1[14] << " " << R1[{2, 4}] << endl;
		//R1.DelCol(3);
		cout << R1 << endl;
		//R1.DelCol(4);
		cout << R1 << endl;
		//R1.DelCol(0);
		cout << R1 << endl;
		shared_ptr<ring> p1 = make_shared<ring>(3, 5);
		cout << *p1 << endl;
		p1.reset();
		ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
		 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
		cout << R2 << endl;
		ring R3(R2);
		cout << R3 << endl;
		ring R4;
		R4 = R3;
		cout << R4 << endl;
		ring R5;
		R5 = R4.Threetimes();
		cout << R5 << endl;

		getchar();
		getchar();
		return 0;
	}