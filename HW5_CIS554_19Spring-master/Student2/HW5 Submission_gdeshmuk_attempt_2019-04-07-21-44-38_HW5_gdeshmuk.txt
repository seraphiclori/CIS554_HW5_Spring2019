//HW5 Due: April 7 (Sunday) at 11:59PM
//Name: Ghansham Deshmukh
//Email: gdeshmuk@syr.edu	
//SUID: 964391573
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
	
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
//ring constructor
ring::ring(int i, int j) {
	num_rows = i;
	num_cols = j;
	shared_ptr<node> prev_head, prev_node, temp_head, prev_col_head, current_node;
	int node_value = 0;
	for (int row_index = 0; row_index < num_rows; row_index++) {
		for (int col_index = 0; col_index < num_cols; col_index++) {
			current_node = make_shared<node>(node_value);
			current_node->south = current_node;
			node_value++;

			if (prev_node) {
				prev_node->east = current_node;
			}
			prev_node = current_node;
			if (!head) {
				head = current_node;
			}

			if (col_index == 0) {
				temp_head = current_node;
			}

			if (prev_head) {
				prev_head->south = current_node;
				prev_head = prev_head->east;
			}
			if (row_index == num_rows - 1) {
				prev_col_head = head;
				int col_to_fetch = col_index + 1;
				while (col_to_fetch != 0) {
					prev_col_head = prev_col_head->east;
					col_to_fetch--;

				}
				current_node->south = prev_col_head;
			}


		}
		prev_col_head.reset();
		prev_head = temp_head;
		temp_head.reset();
	}
	current_node->south = head;
	current_node->east = head;
	prev_head.reset();
	prev_node.reset();
	current_node.reset();

}

//ring destructor
ring::~ring() {
	cout<<"Ring Destructor"<<endl;
	if (this->head) {

		int num_rows = this->num_rows;
		int num_cols = this->num_cols;
		shared_ptr<node> curr_node = this->head;
		while (num_rows != 1 && curr_node != nullptr) {
			curr_node = curr_node->south;
			num_rows--;
		}
		while (num_cols != 1 && curr_node != nullptr) {
			curr_node->south.reset();
			curr_node = curr_node->east;
			num_cols--;
		}
		if (curr_node != nullptr) {
			curr_node->south.reset();
			curr_node->east.reset();
			curr_node.reset();
		}

		if (this->head) {
			this->head->south.reset();
			this->head->east.reset();
			this->head.reset();
		}
	}


}


// Initializer list
ring::ring(const initializer_list<int> &V) {
	auto it = V.begin();
	num_rows = *it;
	it++;
	num_cols = *it;
	shared_ptr<node> prev_head, prev_node, temp_head, prev_col_head, current_node;
	int node_value = 0;
	for (int row_index = 0; row_index < num_rows; row_index++) {
		for (int col_index = 0; col_index < num_cols; col_index++) {
			current_node = make_shared<node>(*it);
			current_node->south = current_node;
			it++;

			if (prev_node) {
				prev_node->east = current_node;
			}
			prev_node = current_node;
			if (!head) {
				head = current_node;
			}

			if (col_index == 0) {
				temp_head = current_node;
			}

			if (prev_head) {
				prev_head->south = current_node;
				prev_head = prev_head->east;
			}
			if (row_index == num_rows - 1) {
				prev_col_head = head;
				int col_to_fetch = col_index + 1;
				while (col_to_fetch != 0) {
					prev_col_head = prev_col_head->east;
					col_to_fetch--;

				}
				current_node->south = prev_col_head;
			}
		}
		prev_col_head.reset();
		prev_head = temp_head;
		temp_head.reset();
	}
	current_node->south = head;
	current_node->east = head;

	prev_head.reset();
	prev_node.reset();
	current_node.reset();


}

ostream & operator<<(ostream &str, const ring &R) {
	if (R.head) {

		int num_rows = R.num_rows;
		int num_cols = R.num_cols;

		shared_ptr<node> copy_node = R.head;

		for (int row_index = 0; row_index < num_rows; row_index++) {
			for (int col_index = 0; col_index < num_cols; col_index++) {
				str << copy_node->value << " ";
				copy_node = copy_node->east;
			}
			str << endl;
		}

	}

	return str;
}

int& ring::operator[](int a) {

	shared_ptr<node> p = this->head;

	if (a == 0) {
		return p->value;
	}
	p = p->east;
	a--;
	while (p != nullptr) {
		if (a == 0) {
			return p->value;
		}
		a--;
		p = p->east;
	}
}

int& ring::operator[](pair<int, int> p) {
	if (this->head) {

		int num_rows = this->num_rows;
		int num_cols = this->num_cols;
		
		shared_ptr<node> copy_node = this->head;
		for (int row_index = 0; row_index < num_rows; row_index++) {
			for (int col_index = 0; col_index < num_cols; col_index++) {
				if (copy_node) {
					if (p.first == row_index and p.second == col_index) {
						return copy_node->value;
					}
					else {
						copy_node = copy_node->east;
					}

				}
				

			}
		}
	}
}
//
//copy constructor
ring::ring(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> prev_head, prev_node, temp_head, prev_col_head, current_node;
	int node_value = 0;

	shared_ptr<node> copy_node = r.head;

	for (int row_index = 0; row_index < num_rows; row_index++) {
		for (int col_index = 0; col_index < num_cols; col_index++) {
			current_node = make_shared<node>(copy_node->value);
			current_node->south = current_node;
			copy_node = copy_node->east;
			node_value++;

			if (prev_node) {
				prev_node->east = current_node;
			}
			prev_node = current_node;
			if (!head) {
				head = current_node;
			}

			if (col_index == 0) {
				temp_head = current_node;
			}

			if (prev_head) {
				prev_head->south = current_node;
				prev_head = prev_head->east;
			}
			if (row_index == num_rows - 1) {
				prev_col_head = head;
				int col_to_fetch = col_index + 1;
				while (col_to_fetch != 0) {
					prev_col_head = prev_col_head->east;
					col_to_fetch--;

				}
				current_node->south = prev_col_head;
			}


		}
		
		prev_head = temp_head;

	}
	current_node->south = head;
	current_node->east = head;
	prev_head.reset();
	prev_node.reset();
	prev_col_head.reset();
	temp_head.reset();
	current_node.reset();



}

//move constructor
ring::ring(ring &&r) {
	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	r.head = nullptr;
	r.num_rows = 0;
	r.num_cols = 0;
}


//r value operator
void ring::operator=(ring &&r) {
	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	r.head = nullptr;
	r.num_rows = 0;
	r.num_cols = 0;

}
//L-value operator=
void ring::operator=(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	//cout << "l_val " << num_rows << num_cols << endl;
	shared_ptr<node> prev_head, prev_node, temp_head, prev_col_head, current_node;
	int node_value = 0;

	shared_ptr<node> copy_node = r.head;

	for (int row_index = 0; row_index < num_rows; row_index++) {
		for (int col_index = 0; col_index < num_cols; col_index++) {
			current_node = make_shared<node>(copy_node->value);
			current_node->south = current_node;
			copy_node = copy_node->east;
			node_value++;

			if (prev_node) {
				prev_node->east = current_node;
			}
			prev_node = current_node;
			if (!head) {
				head = current_node;
			}

			if (col_index == 0) {
				temp_head = current_node;
			}

			if (prev_head) {
				prev_head->south = current_node;
				prev_head = prev_head->east;
			}
			if (row_index == num_rows - 1) {
				prev_col_head = head;
				int col_to_fetch = col_index + 1;
				while (col_to_fetch != 0) {
					prev_col_head = prev_col_head->east;
					col_to_fetch--;

				}
				current_node->south = prev_col_head;
			}
		}
		prev_head = temp_head;
	}
	current_node->south = head;
	current_node->east = head;
	prev_head.reset();
	prev_node.reset();
	prev_col_head.reset();
	temp_head.reset();
	current_node.reset();


}

ring ring::Threetimes() {
	ring *r_new = new ring();

	r_new->num_rows = this->num_rows;
	r_new->num_cols = this->num_cols;

	shared_ptr<node> p = this->head;

	shared_ptr<node> prev_head, prev_node, temp_head, current_node, prev_col_head;
	for (int row_index = 0; row_index < r_new->num_rows; row_index++) {
		for (int col_index = 0; col_index < r_new->num_cols; col_index++) {
			current_node = make_shared<node>(p->value * 3);
			current_node->south = current_node;
			p = p->east;

			if (prev_node) {
				prev_node->east = current_node;
			}
			prev_node = current_node;
			if (!(r_new->head)) {
				r_new->head = current_node;
			}

			if (col_index == 0) {
				temp_head = current_node;
			}

			if (prev_head) {
				prev_head->south = current_node;
				prev_head = prev_head->east;
			}
			if (row_index == num_rows - 1) {
				prev_col_head = head;
				int col_to_fetch = col_index + 1;
				while (col_to_fetch != 0) {
					prev_col_head = prev_col_head->east;
					col_to_fetch--;

				}
				current_node->south = prev_col_head;
			}
		}
		prev_head = temp_head;
	}
	current_node->south = head;
	current_node->east = head;
	prev_head.reset();
	prev_node.reset();
	prev_col_head.reset();
	temp_head.reset();
	current_node.reset();

	return *r_new;

}

void ring::DelCol(int i) {
	num_rows = this->num_rows;
	num_cols = this->num_cols;
	shared_ptr<node> prev_node, curr_node, temp_node;
	curr_node = this->head;
	bool delete_flag = true;
	if (num_cols > i) {
		for (int row_index = 0; row_index < num_rows; row_index++) {
			for (int col_index = 0; col_index < num_cols; col_index++) {
				if (col_index == i) {
					temp_node = curr_node;
					if (curr_node == this->head) {
						if (!curr_node->east) {
							delete_flag = false;
							curr_node->east.reset();
							curr_node->south.reset();
							curr_node.reset();
							this->head = nullptr;
						}
						else {
							this->head = curr_node->east;
						}

					}
					if (prev_node) {
						if (prev_node->east) {
							prev_node->east = prev_node->east->east;
						}
						curr_node = prev_node->east;
					}
					else {
						curr_node = curr_node->east;
					}
					if (delete_flag) {
						temp_node->east.reset();
						temp_node->south.reset();
						temp_node.reset();
					}


				}
				else {
					if (row_index == num_rows - 1 and col_index == i - 1) {
						if (curr_node->south) {
							curr_node->south = curr_node->south->east;
						}
						
					}
					prev_node = curr_node;
					curr_node = curr_node->east;
				}



			}
		}
		if (prev_node) {
			prev_node->east = this->head;
		}
		prev_node.reset();

		this->num_cols = this->num_cols - 1;


	}

}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}