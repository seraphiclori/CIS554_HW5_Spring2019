//HW5 Due: April 7 (Sunday) at 11:59PM

//HW 5
//Benjamin Jiang
//bjiang02@syr.edu
//543523676

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(int i, int j) {
	int k = 0;
	num_rows = i;
	num_cols = j;

	head = make_shared<node>(k);
	shared_ptr<node> p1 = head;
	shared_ptr<node> p2;

	for (k = 1; k < i * j; k++) {
		p2 = make_shared<node>(k);
		p1->east = p2;
		p1 = p1->east;
	}

	//At last node, loop pointer back to head for east
	p1->east = head;

	p1 = head;
	p2 = head;

	for (k = 0; k < i * j; k++) {
		for (int x = 0; x < j; x++) {
			p2 = p2->east;
		}
		if (k >= i * j - j && k != i * j - 1)
			p2 = p2->east;

		p1->south = p2;
		p1 = p1->east;
		p2 = p1;
	}
}

ring::~ring() {
	head.reset();
}

ring::ring(const ring &r) {
	shared_ptr<node> p1 = r.head;
	shared_ptr<node> p2;
	shared_ptr<node> p3;

	head = make_shared<node>(r.head->value);
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	p2 = head;
	p1 = p1->east;
	for (int i = 1; i < num_rows * num_cols; i++) {
		p3 = make_shared<node>(p1->value);
		p2->east = p3;
		p2 = p2->east;
		p3 = p3->east;
	}

	p2->east = head;

	p2 = head;
	p3 = head;

	for (int i = 0; i < num_rows * num_cols; i++) {
		for (int j = 0; j < num_cols; j++) {
			p3 = p3->east;
		}
		if (i >= num_rows * num_cols - num_cols && i != num_rows * num_cols - 1)
			p3 = p3->east;

		p2->south = p3;
		p2 = p2->east;
		p3 = p2;
	}
}

ring::ring(ring &&r) {
	num_rows = r.num_rows;
	r.num_rows = 0;
	num_cols = r.num_cols;
	r.num_cols = 0;
	head = r.head;
	r.head.reset();
}

void ring::operator=(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}

void ring::operator=(ring &&r) {
	num_rows = r.num_rows;
	r.num_rows = 0;
	num_cols = r.num_cols;
	r.num_cols = 0;
	head = r.head;
	r.head.reset();
}

ring::ring(const initializer_list<int> &V) {
	auto it1 = V.begin();
	num_rows = *it1;
	it1++;
	num_cols = *it1;
	it1++;

	head = make_shared<node>(*it1);
	shared_ptr<node> p1 = head;
	shared_ptr<node> p2;

	for (int i = 1; i < num_rows * num_cols; i++) {
		it1++;
		p2 = make_shared<node>(*it1);
		p1->east = p2;
		p1 = p1->east;
	}

	p1->east = head;

	p1 = head;
	p2 = head;

	for (int x = 0; x < num_rows * num_cols; x++) {
		for (int y = 0; y < num_cols; y++) {
			p2 = p2->east;
		}
		if (x >= num_rows * num_cols - num_cols && x != num_rows * num_cols - 1)
			p2 = p2->east;

		p1->south = p2;
		p1 = p1->east;
		p2 = p1;
	}
}

int & ring::operator[](int a) {
	shared_ptr<node> cur = head;

	for (int i = 0; i < a; i++)
		cur = cur->east;

	return cur->value;
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> p1 = head;

	for (int i = 0; i < p.first; i++) {
		p1 = p1->south;
	}
	
	for (int i = 0; i < p.second; i++) {
		p1 = p1->east;
	}

	return p1->value;
}

void ring::DelCol(int i) {
	shared_ptr<node> p1 = head;
	shared_ptr<node> p2;

	if (i == 0) {
		shared_ptr<node> p3 = head;
		for (int x = 0; x < num_cols-1; x++)
			p3 = p3->east;

		for (int x = 0; x < num_rows; x++) {
			p2 = p3->east;
			p3->east = p3->east->east;
			p2.reset();

			if (x != num_rows - 1)
				p3 = p3->south;
		}

		p3->south = p1->east;
		head = p1->east;

		for (int x = 0; x < num_rows; x++) {
			p2 = p1->south;
			p1.reset();
			p1 = p2;
		}
	}
	else {
		for (int y = 0; y < i - 1; y++) {
			p1 = p1->east;
		}

		p2 = p1->east;

		for (int x = 0; x < num_rows; x++) {
			p1->east = p1->east->east;
			p2.reset();
			if (x != num_rows - 1)
				p1 = p1->south;
		}

		p1->south = p1->south->east;
	}
	num_cols--;
}

ring ring::Threetimes() {
	shared_ptr<node> p1 = head;
	p1->value = p1->value * 3;
	p1 = p1->east;

	while (p1 != head) {
		p1->value = p1->value * 3;
		p1 = p1->east;
	}

	return *this;
}
//overload operator<<
ostream & operator<<(ostream &str, const ring &r) {
	shared_ptr<node> p1 = r.head;
	for (int i = 0; i < r.num_rows; i++) {
		for (int j = 0; j < r.num_cols; j++) {
			str << p1->value << " ";
			p1 = p1->east;
		}

		str << endl;
	}

/*	for (int j = 0; j < r.num_cols; j++) { south test
		for (int i = 0; i < r.num_rows; i++) {
			str << p1->value << " ";
			p1 = p1->south;
		}
		str << endl;
	}
*/
	return str;
}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}