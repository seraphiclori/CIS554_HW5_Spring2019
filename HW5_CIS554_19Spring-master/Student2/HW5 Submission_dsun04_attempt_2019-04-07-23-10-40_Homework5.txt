//HW5 Due: April 7 (Sunday) at 11:59PM

//HW5
//Dongfang Sun
//dsun04@syr.edu
//513997504

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {};

	void create(int i, int j)
	{
		num_rows = i;
		num_cols = j;
		int count = i * j;
		head = make_shared<node>(0);
		shared_ptr<node> temp = head;
		for (int n = 1; n < count; n++)
		{
			temp->east = make_shared<node>(n);
			temp = temp->east;
		}
		temp->east = head;
		temp = head;
		for (int n = 0; n < count - 1; n++)
		{
			shared_ptr<node> south = temp;
			for (int k = 0; k < j; k++)
				south = south->east;
			if (n >= count - num_cols)
				south = south->east;
			temp->south = south;
			temp = temp->east;
		}
		temp->south = head;
	}

	ring(int i, int j)//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.
	{

		create(i, j);
	}

	~ring()
	{
		if (head == nullptr) return;
		shared_ptr<node> current = head;
		for (int i = 0; i < num_cols*num_rows - 2; i++)
		{
			shared_ptr<node> temp = current;
			current = current->south;
			temp->south = nullptr;
		}
		current->south = nullptr;
		current->east = nullptr;
	};//destructor; do as little work as possible

	ring(const ring &r)
	{
		create(r.num_rows, r.num_cols);
		shared_ptr<node> temp1 = head;
		shared_ptr<node> temp2 = r.head;
		while (temp1->east != head)
		{
			temp1->value = temp2->value;
			temp1 = temp1->east;
			temp2 = temp2->east;
		}
		temp1->value = temp2->value;
	}; //copy constructor

	ring(ring &&r)
	{
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		this->head = r.head;
		r.head = nullptr;
	} //move constructor

	void operator=(ring &&r)
	{
		if (this != &r)
		{
			num_rows = r.num_rows;
			num_cols = r.num_cols;
			this->head = r.head;
			r.head = nullptr;
		}
	};//R-value operator=

	void operator=(const ring &r)
	{
		if (this != &r)
		{
			create(r.num_rows, r.num_cols);
			shared_ptr<node> temp1 = head;
			shared_ptr<node> temp2 = r.head;
			while (temp1->east != head)
			{
				temp1->value = temp2->value;
				temp1 = temp1->east;
				temp2 = temp2->east;
			}
			temp1->value = temp2->value;
		}
	}; //L-value operator=

	ring(const initializer_list<int> &V)
	{
		auto p = V.begin();
		num_rows = *p;
		num_cols = *(p + 1);
		int count = num_rows * num_cols;
		head = make_shared<node>(*(p + 2));
		shared_ptr<node> temp = head;
		for (int n = 3; n < count + 2; n++)
		{
			temp->east = make_shared<node>(*(p + n));
			temp = temp->east;
		}
		temp->east = head;
		temp = head;
		for (int n = 0; n < count - 1; n++)
		{
			shared_ptr<node> south = temp;
			for (int k = 0; k < num_cols; k++)
				south = south->east;
			if (n >= count - num_cols)
				south = south->east;
			temp->south = south;
			temp = temp->east;
		}
		temp->south = head;
	};//see the explanation in main function

	int & operator[](int a)
	{
		shared_ptr<node> temp = head;
		for (int i = 0; i < a; i++)
		{
			temp = temp->east;
		}
		return temp->value;
	}

	int & operator[](pair<int, int> p)
	{
		return this->operator[](p.first*num_rows + p.second);
	} //first is row number and second is col number

	void DelCol(int i)
	{
		if (i >= num_rows) return;
		int k = (i + num_rows - 1) % num_rows;
		shared_ptr<node> temp = head;
		for (int i = 0; i < k; i++)
		{
			temp = temp->south;
		}
		for (int i = 0; i < num_cols - 1; i++)
		{
			temp->south = temp->south->south;
			temp = temp->east;
		}
		if (i == 0)
			temp->east = temp->east->south;
		else
			temp->east = temp->south->east;
		temp->south = temp->south->south;
		if (i == 0)
			head = temp->east;
		num_rows--;
	};//delete col i of *this

	ring Threetimes()
	{
		shared_ptr<ring> temp = make_shared<ring>(num_rows, num_cols);
		shared_ptr<node> p1 = temp->head;
		shared_ptr<node> p2 = head;
		while (p1->east != temp->head)
		{
			p1->value = p2->value * 3;
			p1 = p1->east;
			p2 = p2->east;
		}
		p1->value = p2->value * 3;
		return *temp;
	};

	// return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
};

//overload operator<<
ostream & operator << (ostream & os, const ring &r)
{
	shared_ptr<node> temp = r.head;
	int count = r.num_cols*r.num_rows;
	for (int i = 0; i < count; i++)
	{
		os << temp->value << " ";
		if ((i + 1) % r.num_cols == 0)
			os << endl;
		temp = temp->east;
	}
	return os;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1 << endl;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}