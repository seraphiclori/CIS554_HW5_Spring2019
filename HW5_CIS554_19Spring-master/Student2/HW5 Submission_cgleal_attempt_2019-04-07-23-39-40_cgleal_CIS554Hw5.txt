/HW5 Due: April 7 (Sunday) at 11:59PM
//Carlos Leal
//655914936
//cgleal@syr.edu

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//constructor
ring::ring(int i, int j) 
{
	num_rows = i, num_cols = j;
	int nodeVal = (i*j) - 1;
	
	for (int z = 0; z <= (i*j)-1; z++)
	{
		shared_ptr<node> p = make_shared<node>(nodeVal);
		nodeVal--;

		if (!head)
		{
			head = p;
			p->east = p;
		}
		else
		{
			p->east = head;
			head = p;
		}
	}

	shared_ptr<node> p1 = head;
	for (int z = 0; z <= (i*j)-1; z++)
	{
		if (z + num_cols < (i*j))
		{
			shared_ptr<node> p2 = p1;
			for (int d = z; d < z + num_cols; d++)
			{
				p2 = p2->east;
			}
			p1->south = p2;
		}
		p1 = p1->east;
	}

	p1->east = head;
	p1->south = head;
}

//destructor
ring::~ring()
{
	shared_ptr<node> temp;
	while(!head)
	{
		temp = head->east;
		head.reset();
		head = temp;
	}
}

//copy constructor
ring::ring(const ring &r)
{
	shared_ptr<node> p1;
	num_rows = r.num_rows, num_cols = r.num_cols;
	int num_nodes = num_rows * num_cols;

	for (int i = 0; i < num_nodes; i++)
	{
		p1 = make_shared<node>();
		p1->east = head;
		head = p1;
	}

	p1 = head; 
	for (int i = 0; i < num_nodes; i++)
	{
		if (i + num_cols < num_nodes)
		{
			shared_ptr<node> p2 = p1;
			for (int d = i; d < i + num_cols; d++)
			{
				p2 = p2->east;
			}
			p1->south = p2;
		}
		p1 = p1->east;
	}
	p1->east = head;
	p1->south = head;

	p1 = head;
	shared_ptr<node> p2 = r.head;
	for (int i = 0; i < num_nodes; i++)
	{
		p1->value = p2->value;
		p1 = p1->east;
		p2 = p2->east;
	}
}

//move constructor
ring::ring(ring &&r)
{
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	r.num_rows = 0;
	r.num_cols = 0;
	head = r.head;
	r.head.reset();
}

//R-value operator=
void ring::operator=(ring &&r)
{
	shared_ptr<node> temp;
	while (!head)
	{
		temp = head->east;
		head.reset();
		head = temp;
	}
	
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
	r.num_rows = 0;
	r.num_cols = 0;
}

//L-value operator=
void ring::operator=(const ring &r)
{
	shared_ptr<node> p1;
	while (!head)
	{
		p1 = head->east;
		head.reset();
		head = p1;
	}
	
	int num_nodes = r.num_rows * r.num_cols;

	for (int i = 0; i < num_nodes; i++)
	{
		p1 = make_shared<node>();
		p1->east = head;
		head = p1;
	}

	p1 = head;
	for (int i = 0; i < num_nodes; i++)
	{
		if (i + num_cols < num_nodes)
		{
			shared_ptr<node> p2 = p1;
			for (int d = i; d < i + num_cols; d++)
			{
				p2 = p2->east;
			}
			p1->south = p2;
		}
		p1 = p1->east;
	}
	p1->east = head;
	p1->south = head;

	p1 = head;
	shared_ptr<node> p2 = r.head;
	for (int i = 0; i < num_nodes; i++)
	{
		p1->value = p2->value;
		p1 = p1->east;
		p2 = p2->east;
	}
}

ring::ring(const initializer_list<int> &V)
{
	auto it1 = V.begin();
	num_rows = *it1; 
	it1++;
	num_cols = *it1;
	int num_nodes = num_rows * num_cols;
	shared_ptr<node> p1;

	auto it2 = V.end();
	while (it2 != it1)
	{
		p1 = make_shared<node>(*it2);
		p1->east = head;
		head = p1;
		it2--;
	}

	p1 = head;
	for (int i = 0; i < num_nodes; i++)
	{
		if (i + num_cols < num_nodes)
		{
			shared_ptr<node> p2 = p1;
			for (int d = i; d < i + num_cols; d++)
			{
				p2 = p2->east;
			}
			p1->south = p2;
		}
		p1 = p1->east;
	}
	p1->east = head;
	p1->south = head;
}

int & ring::operator[](int a)
{
	int target = 0;

	shared_ptr<node> p = head;
	for (int i = 0; i < a; i++)
	{
		p = p->east;
	}

	target = p->value;
	return target;
}

int & ring::operator[](pair<int, int> p)
{
	int target = 0;
	shared_ptr<node> trac = head;

	for (int i = 0; i < p.first; i++)
	{
		trac = trac->south;
	}

	for (int i = 0; i < p.second; i++)
	{
		trac = trac->east;
	}

	target = trac->value;
	return target;
}

void ring::DelCol(int i)
{
	shared_ptr<node> p1 = head;
	for (int z = 0; z < num_rows; z++)
	{
		shared_ptr<node> p2 = p1;
		for (int d = 0; d < i; d++)
		{
			p2 = p2->east;
		}
		p2.reset();
		p1 = p1->south;
	}
}

ring ring::Threetimes()
{
	ring output = ring(this->num_rows,this->num_cols);
	int num_nodes = this->num_rows * this->num_cols;
	shared_ptr<node> p1 = output.head;
	shared_ptr<node> p2 = this->head;

	for (int i=0; i<num_nodes; i++)
	{
		p1->value  = p2->value * 3;
		p1 = p1->east;
		p2 = p2->east;
	}
	
	return output;
}


ostream & operator<<(ostream &str, const ring &r)
{
	shared_ptr<node> p1 = r.head;
	if (!p1)
		return str;
	for (int i = 0; i < r.num_rows; i++)
	{
		shared_ptr<node> p2 = p1;
		for (int d = 0; d < r.num_cols; d++)
		{
			str << p2->value << " ";
			p2 = p2->east;
		}
		str << endl;
		p1 = p1->south;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
} 