//HW5 Due: April 7 (Sunday) at 11:59PM//Cletus Andoh//candoh@syr.edu//201525676#include <iostream>#include <memory>using namespace std;class node {public:	shared_ptr<node> east;	shared_ptr<node> south;	int value;	node() {}	node(int i) { value = i; }};class ring {public:	//Implement all functions described below	//funciton operator[] can be invoked by other functions		shared_ptr<node> head;	int num_rows;	int num_cols;	ring(){}						//constructor					   //i rows and j cols					   //values from 0 to i*j-1					//See the photo for ring structures.ring(int i, int j){	num_rows = i, num_cols = j;	int lastnode = (i*j)-1;		for (int a = 0; a <= (i*j)-1; a++){		shared_ptr<node> p = make_shared<node>(lastnode);		lastnode--;		if (!head){			head = p;			p->east = p;		}		else{			p->east = head;			head = p;		}	}	shared_ptr<node> p1 = head;	for (int a = 0; a <= (i*j)-1; a++){		if (a + num_cols < (i*j)){			shared_ptr<node> p2 = head;			for (int b = a; b < a + num_cols; b++){				p2 = p2->east;			}			p1->south = p2;		}		p1 = p1->east;	}	p1->east = head;	p1->south = head;	}		/*	~ring(){	//destructor; do as little work as possible		shared_ptr<node> p = head;		while (p->east != head){			p = p->east;			p->east.reset();			//head = p;		}	}	*/	ring(const ring &r){ //copy constructor		shared_ptr<node> head;	} 	ring(ring &&r); //move constructor	void operator=(ring &&r);//R-value operator=	void operator=(const ring &r); //L-value operator=	ring(const initializer_list<int> &V);//see the explanation in main function		int & operator[](int a);	int & operator[](pair<int, int> p); //first is row number and second is col number	void DelCol(int i); //delete col i of *this		ring Threetimes();	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.};//overload operator<<	ostream & operator<<(ostream &str, const ring &R) {		shared_ptr<node> p = R.head;		if (!R.head) { return str; }		str << p->value<< " ";		p = p->east;		while (p !=  R.head) {			str << p->value << " ";			p = p->east;		}		return str;	}int main() {	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.	cout << R1 << endl;	/*	R1[14] = 1000;	R1[{2, 4}] = 2000;	cout << R1[14] << " " << R1[{2, 4}] << endl;	R1.DelCol(3);	cout << R1 << endl;	R1.DelCol(4);	cout << R1 << endl;	R1.DelCol(0);	cout << R1 << endl;	shared_ptr<ring> p1 = make_shared<ring>(3, 5);	cout << *p1 << endl;	p1.reset();	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring	cout << R2 << endl;	ring R3(R2);	cout << R3 << endl;	ring R4;	R4 = R3;	cout << R4 << endl;	ring R5;	R5 = R4.Threetimes();	cout << R5 << endl;	*/	getchar();	getchar();	return 0;}