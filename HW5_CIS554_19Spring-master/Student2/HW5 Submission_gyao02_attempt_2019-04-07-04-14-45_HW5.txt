//HW5 Due: April 7 (Sunday) at 11:59PM
//name: Guoxing Yao
//email:gyao02@syr.edu
//netid:650670937
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
	//~node() { cout << "node " << value << " is deleted" << endl; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
//constructor
// i as number of rows
// j as number of columns
// there are two steps:
//		create nodes with east pointers
//		connect nodes with south pointers
ring::ring(int i, int j) {
	// either i or j is zero, create nothing
	if (i == 0 || j == 0) {
		return;
	}
	num_rows = i;
	num_cols = j;
	int  value = 0, index = 0;
	shared_ptr<node> curr;
	// create nodes with east pointers
	while (value < num_rows * num_cols) {
		shared_ptr<node> p = make_shared<node>(value++);
		// initialize head node
		if (head == nullptr) {
			head = p;
			curr = head;
		}
		else {// nodes other than head
			curr->east = p;
			curr = p;
		}
		curr->east = head;
	}
	// heads save the address of the first nodes in each line
	// then push all heads east-ward to connect south node
	shared_ptr<node> * heads = new shared_ptr<node>[num_rows];
	heads[0] = head;
	curr = head;
	index = 0;
	//		initialize all heads
	while (index < num_rows - 1) {
		int skip = 0;
		while (skip < num_cols) {
			curr = curr->east;
			skip++;
		}
		skip = 0;
		heads[index + 1] = curr;
		index++;
	}
	index = 0;
	//		connect south nodes and move all heads east-ward
	while (index < num_cols) {
		// connect all south node
		for (int i = 0; i < num_rows - 1; ++i) {
			heads[i]->south = heads[i + 1];
		}
		if (index != num_cols - 1)// for the 
			heads[num_rows - 1]->south = heads[0]->east;
		else if (index == num_cols - 1) {
			heads[num_rows - 1]->south = head;
		}
		// move all heads east-ward
		for (int i = 0; i < num_rows; ++i) {
			heads[i] = heads[i]->east;
		}
		++index;
	}
	delete[] heads;// remove these heads pointers
}

// destructor
ring::~ring() {
	//cout << "I am destructor" << endl;
	if (num_cols == 0 || num_rows == 0) {
		return;
	}
	if (head == nullptr) {
		return;
	}
	while (num_cols != 0) {
		DelCol(0);
	}
}

// constructor with initializer_list
ring::ring(const initializer_list<int> &V) {
	// get num_rows, num_cols
	auto iter = V.begin();
	num_rows = *iter;
	iter++;
	num_cols = *iter;
	iter++;
	head = nullptr;
	shared_ptr<node> curr;
	// assign node values and east connections
	while (iter != V.end()) {
		shared_ptr<node> p = make_shared<node>(*iter);
		if (head == nullptr) {
			head = p;
			curr = head;
		}
		else {
			curr->east = p;
			curr = p;
		}
		curr->east = head;
		iter++;
	}
	// set south connections
	shared_ptr<node> * heads = new shared_ptr<node>[num_rows];
	heads[0] = head;
	curr = head;
	int index = 0;
	while (index < num_rows - 1) {
		int skip = 0;
		while (skip < num_cols) {
			curr = curr->east;
			skip++;
		}
		skip = 0;
		heads[index + 1] = curr;
		index++;
	}
	index = 0;
	while (index < num_cols) {
		for (int i = 0; i < num_rows - 1; ++i) {
			heads[i]->south = heads[i + 1];
		}
		if (index != num_cols - 1)
			heads[num_rows - 1]->south = heads[0]->east;
		else if (index == num_cols - 1) {
			heads[num_rows - 1]->south = head;
		}

		for (int i = 0; i < num_rows; ++i) {
			heads[i] = heads[i]->east;
		}
		++index;
	}
	delete[] heads;
}
// overload of << for ring class
ostream & operator<<(ostream & str, ring &r) {
	if (&r == nullptr) {
		return str;
	}
	if (r.head == nullptr) {
		return str;
	}
	if (r.num_cols == 0 || r.num_rows == 0) {
		return str;
	}
	shared_ptr<node> pivot = r.head;
	int row_index = 0;

	while (row_index < r.num_rows) {
		int col_index = 0;
		while (col_index < r.num_cols) {
			str << pivot->value << " ";
			pivot = pivot->east;
			col_index++;
		}
		str << endl;
		row_index++;
	}
	return str;
}

// overload of [int]
int & ring::operator[](int a)
{
	int index = 0;
	shared_ptr<node> curr = head;
	while (index < a) {
		curr = curr->east;
		index++;
	}
	return curr->value;
}

// overload of [pair]
int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> curr = head;
	for (int i = 0; i < p.first; ++i) {
		curr = curr->south;
	}
	for (int j = 0; j < p.second; ++j) {
		curr = curr->east;
	}
	return curr->value;
}

// DelCol from ring
void ring::DelCol(int i) {
	if (head == nullptr) {
		return;
	}
	if (i < 0 || i >= num_cols) {
		return;
	}

	this->num_cols--;
	// first colum is special
	if (i == 0) {
		// where there is only one column left
		if (num_cols == 0) {
			shared_ptr<node> curr = head;
			for (int j = 0; j < num_rows; ++j) {
				curr = curr->east;
				head->east.reset();
				head->south.reset();
				head = curr;
			}
			head.reset();
			return;
		}

		shared_ptr<node>  tail;
		shared_ptr<node>  newHead;
		int index = 0;
		while (index < num_rows) {
			if (index == 0) {
				tail = head;
			}
			else {
				tail = newHead;
			}
			int skip = 0;
			while (skip < num_cols) {
				tail = tail->east;
				skip++;
			}
			newHead = tail->east;
			tail->east = tail->east->east;
			if (index == num_rows - 1) {
				shared_ptr<node> temp = head;
				tail->south = head->east;
				head = head->east;
			}
			index++;
		}
	}
	else {// for the rest columns other than 1st column
		shared_ptr<node>  tail = head;;
		shared_ptr<node>  newHead;
		int index = 0;
		int skip = 0;
		while (skip < i - 1) {
			tail = tail->east;
			skip++;
		}
		newHead = tail->east;

		while (index < num_rows) {
			tail->east = tail->east->east;
			if (index == 0) {
				if (i == num_cols) {
					newHead = head;
				}
				else
				{
					newHead = tail->east;
				}
			}
			if (index == num_rows - 1) {
				tail->south = newHead;
				break;
			}
			else {
				tail = tail->south;
			}
			index++;
		}
	}
}
// copy constructor
ring::ring(const ring &r) {
	if (&r == nullptr) {
		return;
	}
	this->num_cols = r.num_cols;
	this->num_rows = r.num_rows;
	this->head = r.head;
}

// move constructor
ring::ring(ring &&r) {
	if (&r == nullptr) {
		return;
	}
	if (r.head == nullptr) {
		return;
	}
	if (r.num_cols == 0 || r.num_rows == 0) {
		return;
	}

	this->num_cols = r.num_cols;
	this->num_rows = r.num_rows;
	this->head = r.head;
	r.head.reset();
}
// copy operator
void ring::operator=(ring &&r) {
	if (&r == nullptr)
		return;
	this->head = move(r.head);
	this->num_rows = r.num_rows;
	this->num_cols = r.num_cols;
	shared_ptr<node> curr = r.head;
}

// copy assignment overload
void ring::operator=(const ring &r) {
	if (&r == nullptr)
		return;
	if (r.num_cols == 0 || r.num_rows == 0)
		return;
	if (r.head == nullptr) {
		this->head = nullptr;
		return;
	}
	this->num_rows = r.num_rows;
	this->num_cols = r.num_cols;
	this->head = r.head;
}

// all nodes are creased to 3 times
ring ring::Threetimes() {
	if (head == nullptr) { return *this; }
	if (num_rows == 0 || num_cols == 0) { return *this; }

	ring temp(this->num_rows, this->num_cols);
	int index = 0;
	while (index < num_rows*num_cols) {
		temp[index] = (*this)[index] * 3;
		index++;
	}
	return move(temp);
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
	
}