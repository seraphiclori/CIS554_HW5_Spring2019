//HW5 Due: April 7 (Sunday) at 11:59PM
//Drew Jacobson
//djacobso@syr.edu
//604736456

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j) {
		if (i == 0 || j == 0) {
			return;
		}
		num_rows = i;
		num_cols = j;
		head = make_shared<node>(0);
		shared_ptr<node> p = head; 
		shared_ptr<node> pn = head;
		shared_ptr<node> beg = head;
		shared_ptr<node> end = head;
		shared_ptr<node> last = nullptr;
		int num = 1;
		for (int rows = 0; rows < i; rows++) {
			for (int cols = 0; cols < j-1; cols++) {
				//make east pointers
				p->east = make_shared<node>(num);
				
				//set p to next
				p = p->east;
				//set end to next
				end = p;

				num++;
			}//end rows for-loop
			//set l to current
			if (last) {
				pn = last;
				p = beg;
				for (int k = 0; k < j; k++) {
					pn->south = p;

					pn = pn->east;
					p = p->east;
				}
			}

			if (rows == (i - 1)) {
				pn = beg;
				p = head;
				//cout << "p: " << p->value << "  pn: " << pn->value << endl;
				for (int k = 0; k < j; k++) {
					pn->south = p;
					pn = pn->east;
					p = p->east;
				}
			}
			last = beg;//set the beginning node of this runthru to the last (for the next run thru)
			beg->south = make_shared<node>(num++);//create a new node to the south of this beg node
			p = beg->south; //set the beginning node to the new node
			beg = p; //ste the beg to the new node
			end->east = p; //set the end of the last row to the new row beginning
		}//end cols for-loop
		end->east = head;
		shared_ptr<node> pw = head;
		shared_ptr<node> pe = head->east;
		for (int row = 0; row < i-1; row++) {
			pw = pw->south;
		}
		pw->south = head->east;
		
		for (int col = 0; col < j; col++) {
			
			pw->south = pe;

			if (!(pe->east)) {
				pe = head;
			}
			else {
				pe = pe->east;
			}
						
			if (!pe) {
				pe = head;
			}

			pw = pw->east;
		}
		p = head;
		for (int idx = 0; idx < num_rows*num_cols-1; idx++) {
			p = p->east;
		}
		p->south = head;
	}//constructor

					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring() { 
		shared_ptr<node> p2= head->east;
		shared_ptr<node> p = head;
		head.reset();
		for (int i = 0; i < num_cols; i++) {
			p2 = p->east;
			p.reset();
			p = p2;
		}
		
		head.reset(); 
	};//destructor; do as little work as possible
	
	ring(const ring &r) {
		//deleting everything
		if (head) {
			shared_ptr<node> p2 = head->east;
			shared_ptr<node> p = head;
			head.reset();
			for (int i = 0; i < num_cols - 1; i++) {
				p2 = p->east;
				p.reset();
				p = p2;
			}
		}
		head.reset();

		//rebuilding the ring
		int i = r.num_rows;
		int j = r.num_cols;
		if (i == 0 || j == 0) {
			return;
		}
		num_rows = i;
		num_cols = j;
		head = make_shared<node>(0);
		shared_ptr<node> p = head;
		shared_ptr<node> pn = head;
		shared_ptr<node> beg = head;
		shared_ptr<node> end = head;
		shared_ptr<node> last = nullptr;
		int num = 1;
		for (int rows = 0; rows < i; rows++) {
			for (int cols = 0; cols < j - 1; cols++) {
				//make east pointers
				p->east = make_shared<node>(num);

				//set p to next
				p = p->east;
				//set end to next
				end = p;

				num++;
			}//end rows for-loop
			//set l to current
			if (last) {
				pn = last;
				p = beg;
				for (int k = 0; k < j; k++) {
					pn->south = p;

					pn = pn->east;
					p = p->east;
				}
			}

			if (rows == (i - 1)) {
				pn = beg;
				p = head;
				//cout << "p: " << p->value << "  pn: " << pn->value << endl;
				for (int k = 0; k < j; k++) {
					pn->south = p;
					pn = pn->east;
					p = p->east;
				}
			}
			last = beg;//set the beginning node of this runthru to the last (for the next run thru)
			beg->south = make_shared<node>(num++);//create a new node to the south of this beg node
			p = beg->south; //set the beginning node to the new node
			beg = p; //ste the beg to the new node
			end->east = p; //set the end of the last row to the new row beginning
		}//end cols for-loop
		end->east = head;
		shared_ptr<node> pw = head;
		shared_ptr<node> pe = head->east;
		for (int row = 0; row < i - 1; row++) {
			pw = pw->south;
		}
		pw->south = head->east;

		for (int col = 0; col < j; col++) {

			pw->south = pe;

			if (!(pe->east)) {
				pe = head;
			}
			else {
				pe = pe->east;
			}

			if (!pe) {
				pe = head;
			}

			pw = pw->east;
		}
		p = head;
		for (int idx = 0; idx < num_rows*num_cols - 1; idx++) {
			p = p->east;
		}
		p->south = head;

		shared_ptr<node> thisP = head;
		shared_ptr<node> otherP = r.head;
		for (int idx = 0; idx < i*j; idx++) {//copying over the values
			thisP->value = otherP->value;
		
			thisP = thisP->east;
			otherP = otherP->east;
		}
	}; //copy constructor


	ring(ring &&r) {
		head = r.head;
		num_rows = r.num_rows;
		num_cols = r.num_cols;
	}; //move constructor
	void operator=(ring &&r) {
		head = r.head;
		num_rows = r.num_rows;
		num_cols = r.num_cols;
	};//R-value operator=

	void operator=(const ring &r) {
		//deleting everything
		if (head) {
			shared_ptr<node> p2 = head->east;
			shared_ptr<node> p = head;
			head.reset();
			for (int i = 0; i < num_cols - 1; i++) {
				p2 = p->east;
				p.reset();
				p = p2;
			}
		}
		head.reset();

		//rebuilding the ring
		int i = r.num_rows;
		int j = r.num_cols;
		if (i == 0 || j == 0) {
			return;
		}
		num_rows = i;
		num_cols = j;
		head = make_shared<node>(0);
		shared_ptr<node> p = head;
		shared_ptr<node> pn = head;
		shared_ptr<node> beg = head;
		shared_ptr<node> end = head;
		shared_ptr<node> last = nullptr;
		int num = 1;
		for (int rows = 0; rows < i; rows++) {
			for (int cols = 0; cols < j - 1; cols++) {
				//make east pointers
				p->east = make_shared<node>(num);

				//set p to next
				p = p->east;
				//set end to next
				end = p;

				num++;
			}//end rows for-loop
			//set l to current
			if (last) {
				pn = last;
				p = beg;
				for (int k = 0; k < j; k++) {
					pn->south = p;

					pn = pn->east;
					p = p->east;
				}
			}

			if (rows == (i - 1)) {
				pn = beg;
				p = head;
				//cout << "p: " << p->value << "  pn: " << pn->value << endl;
				for (int k = 0; k < j; k++) {
					pn->south = p;
					pn = pn->east;
					p = p->east;
				}
			}
			last = beg;//set the beginning node of this runthru to the last (for the next run thru)
			beg->south = make_shared<node>(num++);//create a new node to the south of this beg node
			p = beg->south; //set the beginning node to the new node
			beg = p; //ste the beg to the new node
			end->east = p; //set the end of the last row to the new row beginning
		}//end cols for-loop
		end->east = head;
		shared_ptr<node> pw = head;
		shared_ptr<node> pe = head->east;
		for (int row = 0; row < i - 1; row++) {
			pw = pw->south;
		}
		pw->south = head->east;

		for (int col = 0; col < j; col++) {

			pw->south = pe;

			if (!(pe->east)) {//checking to see if at the end of the list
				pe = head;
			}
			else {
				pe = pe->east;
			}

			if (!pe) {
				pe = head;
			}

			pw = pw->east;
		}
		p = head;
		for (int idx = 0; idx < num_rows*num_cols - 1; idx++) {
			p = p->east;
		}
		p->south = head;//setting the last value->south correctly

		shared_ptr<node> thisP = head;
		shared_ptr<node> otherP = r.head;
		for (int idx = 0; idx < i*j; idx++) {//copyng over values
			thisP->value = otherP->value;

			thisP = thisP->east;
			otherP = otherP->east;
		}
	}; //L-value operator=
	ring(const initializer_list<int> &V) {
		auto it = V.begin();
		int i = *it;
		*it++;
		int j = *it;

		if (i == 0 || j == 0) {
			return;
		}
		num_rows = i;
		num_cols = j;
		head = make_shared<node>(0);
		shared_ptr<node> p = head;
		shared_ptr<node> pn = head;
		shared_ptr<node> beg = head;
		shared_ptr<node> end = head;
		shared_ptr<node> last = nullptr;
		int num = 1;
		for (int rows = 0; rows < i; rows++) {

			for (int cols = 0; cols < j - 1; cols++) {
				p->east = make_shared<node>(num);

				//make east pointers
				//p->east = make_shared<node>(num);
				num++;
				//set p to next
				p = p->east;
				//set end to next
				end = p;
			}//end rows for-loop
			//set l to current
			if (last) {
				pn = last;
				p = beg;
				for (int k = 0; k < j; k++) {
					pn->south = p;

					pn = pn->east;
					p = p->east;
				}
			}

			if (rows == (i - 1)) {
				pn = beg;
				p = head;
				//cout << "p: " << p->value << "  pn: " << pn->value << endl;
				for (int k = 0; k < j; k++) {
					pn->south = p;
					pn = pn->east;
					p = p->east;
				}
			}
			last = beg;//set the beginning node of this runthru to the last (for the next run thru)

			beg->south = make_shared<node>(num++);//create a new node to the south of this beg node
			p = beg->south; //set the beginning node to the new node
			beg = p; //ste the beg to the new node
			end->east = p; //set the end of the last row to the new row beginning
			//p = make_shared<node>(num);
			//last = beg;



		}//end cols for-loop
		end->east = head;

		shared_ptr<node> pw = head;
		shared_ptr<node> pe = head->east;
		for (int row = 0; row < i - 1; row++) {
			pw = pw->south;
		}
		pw->south = head->east;

		for (int col = 0; col < j; col++) {
			pw->south = pe;

			if (!(pe->east)) {
				pe = head;
			}
			else {
				pe = pe->east;
			}

			if (!pe) {
				pe = head;
			}

			pw = pw->east;
		}
		p = head;
		for (int idx = 0; idx < num_rows*num_cols - 1; idx++) {
			p = p->east;
		}
		p->south = head;

		it++;
		p = head;
		for (int idx = 0; idx < i*j; idx++) {//copying over values
			p->value = *it;

			it++;
			p = p->east;
		}
	};//see the explanation in main function

	int & operator[](int a) {
		shared_ptr<node> p = head;
		for (int i = 0; i < a; i++) {
			p = p->east;
		}

		return (p->value);	
	};
	int & operator[](pair<int, int> p) {
		int row = p.first;
		int col = p.second;
		shared_ptr<node> pt = head;
		for (int i = 0; i < row-1; i++) {
			pt = pt->south;
		}
		for (int i = 0; i < col-1; i++) {
			pt = pt->east;
		}
		return (pt->value);
	}; //first is row number and second is col number

	void DelCol(int i) {
		if (i > num_cols || i < 0) {
			return;
		}
		if (i == 0) {
			shared_ptr<node> temp = head->east;
			shared_ptr<node> p = head;
			for (int idx = 0; idx < num_rows*num_cols; idx++) {
				p = p->east;
			}
			p->east = temp;
			p->south = temp;
			head.reset();
			head = temp;

			num_cols--;
			return;
		}

		shared_ptr<node> p = head;
		shared_ptr<node> next = head;
		
		for (int idx = 0; idx < i-1; idx++) {
			p = p->east;
		}
		

		next = p->east->east;//get the next node

		//go down, point all nodes to their east
		for (int i = 0; i < num_cols; i++) {
			p->east = p->east->east;
			p = p->south;
		}

		//point the bottom node to the next column
		p->south = next;
		num_cols--;
	};//delete col i of *this

	ring Threetimes() {
		//ring newRing = *this;
		ring newRing = ring(num_rows, num_cols);
		shared_ptr<node> pT = head;
		shared_ptr<node> pO = newRing.head;
		for (int i = 0; i < num_rows*num_cols; i++) {
			pO->value = pT->value*3;

			pO = pO->east;
			pT = pT->east;
		}
		return newRing;
	};
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	shared_ptr<node> last = R.head;
	if (!R.head) { cout << "NULL COUT" << endl; return str; }

	for (int i = 0; i < R.num_rows; i++) {
		last = p;
		for (int k = 0; k < R.num_cols; k++) {
			str << p->value << " ";
			p = p->east;
		}
		p = last->south;
		str << "\n";
	}
	return str;
}

int main() {
	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	cout << R1 << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}