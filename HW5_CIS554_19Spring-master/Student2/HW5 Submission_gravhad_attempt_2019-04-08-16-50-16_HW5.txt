//HW5 Due: April 7 (Sunday) at 11:59PM

/*   HW5
   Name: Gaurav Avhad
   Email: gravhad@syr.edu
   SUID : 648754267
*/
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	friend ostream & operator<< (ostream &s, const ring & V);
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

void ring::DelCol(int i) {
	if (!head) return;
	shared_ptr<node> p1 = head;
	if (0 == i) {
		while(p1->east != head) {
			p1 = p1->east;
		}
		p1->east = p1->south = head -> east;
		shared_ptr<node> p2 = head->east;
		while(head != p2) {
			p1 = head;
			head = head->south;
			shared_ptr<node> t = p1;
			for(;t->east!=head; t= t->east);
			if(head !=p2) 
			 t->east = head->east;
			p1.reset(); 
		}
		//p1 = nullptr; is also OK
		return;
	} else {

		for(int j = 0; j<i ; p1 = p1->east,j++);
		shared_ptr<node> nc = p1->east;

		shared_ptr<node> p3 = head;
		for(int j = 0; j<i-1 ; p3 = p3->east,j++);
		
		while(p3 !=p1) {
			p3->east = p3->east->east;
			p3 = p3->south;
			if(p3 == p1) {
				p3 ->south = nc;
			}
		}

		while(p1 != nc) {
			shared_ptr<node> p2 = p1;
			p1 = p1->south;
			p2.reset();
		}

	}
	num_cols--;
}

ring ring:: Threetimes() {


	shared_ptr<ring> temp = make_shared<ring>(num_rows, num_cols);
	//ring temp(num_rows,num_cols);
	for (int i = 0; i < num_rows*num_cols; i++) {
			(*temp)[i] = 3* (*this)[i];
	}
	return move(*temp);//change temp into an R-vlaue
	


}

void ring::operator=(ring &&r) {
	head = r.head;
	r.head = nullptr;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.num_cols = r.num_rows = 0;
}

void ring::operator=(const ring &r) {
	head.reset();

	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> p1 = r.head;

	int z = 0;
	do {
		shared_ptr<node> p = make_shared<node>(p1->value);
		if (!head) { head = p;  p->east = p; }
		else {
			shared_ptr<node> temp = head;
			int y =0;
			while(temp->east != head) {
        
				if(y%num_cols == z%num_cols) {
					temp-> south = p;
				}
				       
				else if(z/num_cols == num_rows - 1 && y -1 == z % num_cols) {
					p->south = temp;
				}
				temp = temp-> east;
				y++;
			}
			p->east = temp->east;
			temp->east = p;
			if(y == num_cols*num_rows-1) {
				p->east = p->south = head;
			}	
		}

		p1 = p1 ->east;
		z++;
	} while(p1 != r.head);

}



ring :: ring(ring &&r) {
	head = r.head;
	r.head = nullptr;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.num_cols = r.num_rows = 0;
}



ring::ring(const ring &r){
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> p1 = r.head;
	int z = 0;
	do {
		shared_ptr<node> p = make_shared<node>(p1->value);
		if (!head) { head = p;  p->east = p; }
		else {
			shared_ptr<node> temp = head;
			int y =0;
			while(temp->east != head) {
        
				if(y%num_cols == z%num_cols) {
					temp-> south = p;
				}
				       
				else if(z/num_cols == num_rows - 1 && y -1 == z % num_cols) {
					p->south = temp;
				}
				temp = temp-> east;
				y++;
			}
			p->east = temp->east;
			temp->east = p;
			if(y == num_cols*num_rows-1) {
				p->east = p->south = head;
			}	
		}

		p1 = p1 ->east;
		z++;
	} while(p1 != r.head);
}

ring::ring(const initializer_list<int> &V) {
    auto it = V.begin();
	int x = 0;
	while (it != V.end()) {
		if(x == 0 ) {
		   num_rows = *it;
		} else if (x == 1) {
		  num_cols = *it;
		}
		else {
			shared_ptr<node> p = make_shared<node>(*it);
			int z = x-2;

			if (!head) { head = p;  p->east = p; }
			else {
				shared_ptr<node> temp = head;
				int y =0;
				while(temp->east != head) {
        
					if(y%num_cols == z%num_cols) {
					    temp-> south = p;
					}
				       
					else if(z/num_cols == num_rows - 1 && y -1 == z % num_cols) {
					    p->south = temp;
					}
					temp = temp-> east;
					y++;
			    }
			    p->east = temp->east;
			    temp->east = p;
			    if(y == num_cols*num_rows-1) {
					p->east = p->south = head;
			    }	
			}
		}
		it++;
		x++;
	}

}

int & ring::operator[](int a) {
    
    int i =0 ;
    shared_ptr<node> temp = head;
    while(i<a) {
        temp = temp->east;
        i++;
    }
    return temp->value;
}

int & ring:: operator[](pair<int, int> p) {
    shared_ptr<node> temp = head;

    for(int i = 0; i<p.first; i++,temp = temp->south);
    for(int j = 0; j<p.second;j++, temp = temp->east);
    return temp->value;
}

ring::ring(int i, int j) {
    
    int val = 0;
    num_rows = i;
    num_cols = j;
    while(val < i*j) {
        shared_ptr<node> p = make_shared<node>(val);
        
        if(!head) {
            head = p;
	    	p->east = p;
        } else {
            shared_ptr<node> temp = head;

            while(temp->east != head) {
                
                
                if(temp->value == val - j) {
                    temp-> south = p;
                }
               
                else if(val/j == i-1 && temp->value == val%j +1) {
                    p->south = temp;
                }
                temp = temp-> east;
                
            }
            p->east = temp->east;
            temp->east = p;
            if(val == i*j-1) {
                p->east = p->south = head;
            }
        }
        val++;
    }
}

ring::~ring() {
    //head->south.reset();
    //head.reset();
}


ostream & operator<< (ostream &s, const ring & V) {
	
	if(V.head){
    	s<< (V.head)->value<<" ";
    	shared_ptr<node> p = (V.head)-> east;
    	//s<<p->value;
    	while(p != V.head) {
    	    s<< p->value<<" ";
    	    p = p->east;
    	}
	}
	return s;
}
//overload operator<<

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R3.Threetimes();
	cout << R5 << endl;
	
	//getchar();
	//getchar();
	return 0;
}
