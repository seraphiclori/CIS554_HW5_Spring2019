//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring() {}//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(const initializer_list<int> &V) {
	auto it = V.begin();
	num_rows = *it;
	++it;
	num_cols = *it;
	++it;
	shared_ptr<node> first(new node(*it));
	head = first;
	++it;
	shared_ptr<node> current = head;
	for (int x = 1; x < num_cols * num_rows; ++x) {
		shared_ptr<node> tmp(new node(*it));
		++it;
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

ring::ring(int i, int j) {
	num_rows = i;
	num_cols = j;
	shared_ptr<node> first(new node(0));
	head = first;
	shared_ptr<node> current = head;
	for (int x = 1; x < i*j; ++x) {
		shared_ptr<node> tmp(new node(x));
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

ring::ring(const ring& r) {
	shared_ptr<node> t(new node(r.head->value));
	head = t;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> current = head;
	shared_ptr<node> ori = r.head;
	for (int x = 1; x < num_rows * num_cols; ++x) {
		ori = ori->east;
		shared_ptr<node> tmp(new node(ori->value));
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

ring::ring(ring &&r) {
	shared_ptr<node> tmp(r.head);
	head = tmp;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> current = head;
	shared_ptr<node> ori = r.head;
	for (int x = 1; x < num_rows * num_cols; ++x) {
		ori = ori->east;
		shared_ptr<node> tmp(ori);
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

int& ring::operator[](int a) {
	shared_ptr<node> tmp = head;
	for (int i = 0; i < a; ++i) tmp = tmp->east;
	return tmp->value;
}

int& ring::operator[](pair<int, int> p) {
	shared_ptr<node> tmp = head;
	for (int i = 0; i < p.first; ++i) tmp = tmp->south;
	for (int i = 0; i < p.second; ++i) tmp = tmp->east;
	return tmp->value;
}

void ring::operator=(const ring &r) {
	shared_ptr<node> t(new node(r.head->value));
	head = t;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> current = head;
	shared_ptr<node> ori = r.head;
	for (int x = 1; x < num_rows * num_cols; ++x) {
		ori = ori->east;
		shared_ptr<node> tmp(new node(ori->value));
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

void ring::operator=(ring &&r) {
	shared_ptr<node> tmp(r.head);
	head = tmp;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	shared_ptr<node> current = head;
	shared_ptr<node> ori = r.head;
	for (int x = 1; x < num_rows * num_cols; ++x) {
		ori = ori->east;
		shared_ptr<node> tmp(ori);
		current->east = tmp;
		current = tmp;
	}
	current->east = head;
	current = head;
	while (current->east != head) {
		shared_ptr<node> tmp = current;
		for (int x = 0; x < num_cols; ++x) tmp = tmp->east;
		if (tmp->south != nullptr) tmp = tmp->east;
		current->south = tmp;
		current = current->east;
	}
	current->south = head;
}

void ring::DelCol(int i) {
	shared_ptr<node> pre = head;
	int count = 0;
	while ((count + 1 - i) % num_cols != 0) {
		pre = pre->east;
		++count;
	}
	shared_ptr<node> last;
	for (int x = 0; x < num_rows; ++x) {
		shared_ptr<node> current = pre->east;
		shared_ptr<node> next = current->east;
		pre->east = next;
		if (x == num_rows - 1) {
			if (current == head) {
				head = next;
				pre->south = next;
			}
			else pre->south = current->south;
		}
		
		current = nullptr;
		pre = pre->south;
	}
	--num_cols;
}

ring ring::Threetimes() {
	ring r = *this;
	shared_ptr<node> tmp = r.head;
	while (tmp->east != r.head) {
		tmp->value = tmp->value * 3;
		tmp = tmp->east;
	}
	tmp->value = tmp->value * 3;
	return r;
}

//overload operator<<
ostream& operator<<(ostream& os, const ring& r) {
	shared_ptr<node> tmp = r.head;
	for (int i = 0; i < r.num_rows; ++i) {
		for (int j = 0; j < r.num_cols; ++j) {
			os << tmp->value << " ";
			tmp = tmp->east;
		}
		os << endl;
	}
	return os;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}