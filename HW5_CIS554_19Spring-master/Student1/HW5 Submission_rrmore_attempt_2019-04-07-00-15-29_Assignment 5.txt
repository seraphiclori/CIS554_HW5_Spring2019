//HW5 Due: April 7 (Sunday) at 11:59PM
//Name: Rohit More
//email: rrmore@syr.edu
//SUID: 685886144
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1

				   //See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::~ring() {
	shared_ptr<node> current = head;
	if (current == nullptr) {
		return;
	}
	int i = 0;
	while (i < num_cols*num_rows-1) {
		current = current->east;
		i++;
	}
	if (current != nullptr) {
		current->east = nullptr;
		current->south = nullptr;
	}
	num_cols = 0;
	num_rows = 0;
	head = nullptr;
}

void ring::operator=(ring &&r) {
	shared_ptr<node> current = head;
	int i = 0;
	while (i < num_cols*num_rows-1) {
		current = current->east;
		i++;
	}
	if (current != nullptr) {
		current->east = nullptr;
		current->south = nullptr;
	}
	head = nullptr;

	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	r.head = nullptr;
}

void ring::operator=(const ring &r) {
	shared_ptr<node> current = head;
	int i = 0;
	while (i < num_cols*num_rows-1) {
		current = current->east;
		i++;
	}
	if (current != nullptr) {
		current->east = nullptr;
		current->south = nullptr;
	}
	head = nullptr;
	
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	int total = num_rows * num_cols - 1;
	int oneCol = 0;

	if (total <= 0) {
		head = nullptr;
		return;
	}
	int count = 0;
	shared_ptr<node> dupNode = r.head;
	head = make_shared<node>(dupNode->value);
	dupNode = dupNode->east;
	count++;
	shared_ptr<node> faster = head;
	while (count < num_cols) {
		faster->east = make_shared<node>(dupNode->value);
		count++;
		dupNode = dupNode->east;
		faster = faster->east;
	}
	if (num_rows == 1) {
		faster = head;
		oneCol = 1;
		count = 2;
	}
	else {
		faster->east = make_shared<node>(dupNode->value);
		count++;
		dupNode = dupNode->east;
	}
	faster = faster->east;

	shared_ptr<node> slower = head;
	while (count - num_cols <= total) {
		slower->south = faster;
		if (count == total + 1) {
			faster->east = head;
			if (oneCol == 0) {
				faster = head;
			}
		}
		else if (count <= total) {
			if (oneCol == 0) {
				faster->east = make_shared<node>(dupNode->value);
				dupNode = dupNode->east;
			}
		}
		count++;
		faster = faster->east;
		slower = slower->east;
	}
	slower->south = head;
}

ring::ring(ring && r) {
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	r.head = nullptr;
}

ring ring::Threetimes() {
	int row = num_rows;
	int col = num_cols;
	ring newRing(row, col);
	shared_ptr<node> current = head;
	shared_ptr<node> newCurrent = newRing.head;
	for (int i = 0; i < num_cols*num_rows; i++) {
		newCurrent->value = 3 * current->value;
		newCurrent = newCurrent->east;
		current = current->east;
	}

	return newRing;
}

ring::ring(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	int total = num_rows * num_cols - 1;
	int oneCol = 0;

	if (total <= 0) {
		head = nullptr;
		return;
	}
	int count = 0;
	shared_ptr<node> dupNode = r.head;
	head = make_shared<node>(dupNode->value);
	dupNode = dupNode->east;
	count++;
	shared_ptr<node> faster = head;
	while (count < num_cols) {
		faster->east = make_shared<node>(dupNode->value);
		count++;
		dupNode = dupNode->east;
		faster = faster->east;
	}
	if (num_rows == 1) {
		faster = head;
		oneCol = 1;
		count = 2;
	}
	else {
		faster->east = make_shared<node>(dupNode->value);
		count++;
		dupNode = dupNode->east;
	}
	faster = faster->east;

	shared_ptr<node> slower = head;
	while (count - num_cols <= total) {
		slower->south = faster;
		if (count == total + 1) {
			faster->east = head;
			if (oneCol == 0) {
				faster = head;
			}
		}
		else if (count <= total) {
			if (oneCol == 0) {
				faster->east = make_shared<node>(dupNode->value);
				dupNode = dupNode->east;
			}
		}
		count++;
		faster = faster->east;
		slower = slower->east;
	}
	slower->south = head;
}

ring::ring(int row, int col) {
	num_rows = row;
	num_cols = col;
	int total = row * col - 1;
	int oneCol = 0;

	if (total <= 0) {
		head = nullptr;
		return;
	}
	int count = 0;
	head = make_shared<node>(0);
	count++;
	shared_ptr<node> faster = head;
	while (count < col) {
		faster->east = make_shared<node>(count);
		count++;
		faster = faster->east;
	}
	if (row == 1) {
		faster = head;
		oneCol = 1;
		count = 2;
	}
	else {
		faster->east = make_shared<node>(count);
		count++;
	}
	faster = faster->east;

	shared_ptr<node> slower = head;
	while (count - col <= total) {
		slower->south = faster;
		if (count == total + 1) {
			faster->east = head;
			if (oneCol == 0) {
				faster = head;
			}
		}
		else if (count <= total) {
			if (oneCol == 0) {
				faster->east = make_shared<node>(count);
			}
		}
		count++;
		faster = faster->east;
		slower = slower->east;
	}

	slower->south = head;
}

int& ring::operator[](int a) {
	int index = 0;
	if (a >= num_rows * num_cols) {
		return index;
	}
	int row = (a) / num_cols;
	int col = (a) % num_cols;
	shared_ptr<node> current = head;
	while (index < row) {
		current = current->south;
		index++;
	}
	index = 0;
	while (index < col) {
		current = current->east;
		index++;
	}

	return current->value;
}

ring::ring(const initializer_list<int>& V) :ring() {
	auto it = V.begin();
	num_rows = *it;
	it++;
	num_cols = *it;
	it++;
	int total = num_rows * num_cols - 1;
	int oneCol = 0;

	if (total <= 0) {
		head = nullptr;
		return;
	}
	int count = 0;
	head = make_shared<node>(*it);
	count++;
	it++;
	shared_ptr<node> faster = head;
	while (count < num_cols) {
		faster->east = make_shared<node>(*it);
		it++;
		count++;
		faster = faster->east;
	}
	if (num_rows == 1) {
		faster = head;
		oneCol = 1;
		count = 2;
	}
	else {
		faster->east = make_shared<node>(*it);
		count++;
		it++;
	}
	faster = faster->east;

	shared_ptr<node> slower = head;
	while (count - num_cols <= total) {
		slower->south = faster;
		if (count == total + 1) {
			faster->east = head;
			if (oneCol == 0) {
				faster = head;
			}
		}
		else if (count <= total) {
			if (oneCol == 0) {
				faster->east = make_shared<node>(*it);
				it++;
			}
		}
		count++;
		faster = faster->east;
		slower = slower->east;
	}
	slower->south = head;
}


int& ring::operator[](pair<int, int> p) {
	int row = p.first;
	int col = p.second;
	int index = 0;
	if (row >= num_rows || col >= num_cols) {
		return index;
	}
	shared_ptr<node> current = head;
	while (index < row) {
		current = current->south;
		index++;
	}
	index = 0;
	while (index < col) {
		current = current->east;
		index++;
	}

	return current->value;
}

void ring::DelCol(int i) {
	if (i >= num_cols || i < 0) {
		return;
	}
	if (num_cols == 1) {
		head = nullptr;
		num_cols = 0;
		num_rows = 0;
		return;
	}
	int count = 0;
	shared_ptr<node> prev = head;

	while ((count + 1) % num_cols != i) {
		count++;
		prev = prev->east;
	}

	shared_ptr<node> current = prev->east;
	shared_ptr<node> next = current->east;
	int rowCount = 0;
	while (rowCount < num_rows) {
		prev->east = next;
		if (rowCount < num_rows - 1) {
			prev = prev->south;
			current = current->south;
			next = next->south;
		}
		rowCount++;
	}

	if (i == 0) {
		prev->south = head->east;
		head = head->east;
	}
	else {
		prev->south = current->south;
		current->south = nullptr;
	}
	num_cols--;
}

//overload operator<<
ostream & operator<<(ostream &str, const ring &R) {
	int total = R.num_rows*R.num_cols - 1;
	int count = 0;
	shared_ptr<node> current = R.head;
	if (current == nullptr) {
		return str;
	}
	for (int i = 0; i < R.num_rows; i++) {
		for (int j = 0; j < R.num_cols; j++) {
			str << (*current).value << " ";
			current = current->east;
		}
		str << endl;
	}
	current = nullptr;
	return str;
}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}