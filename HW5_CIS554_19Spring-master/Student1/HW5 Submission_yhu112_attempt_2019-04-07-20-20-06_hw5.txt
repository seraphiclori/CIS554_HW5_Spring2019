//HW5
//Name: Yang Hu
//Email: yhu112@syr.edu
//SUID: 362337777
//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number
	
	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	
};

//constructor
ring::ring(int i, int j) {
	num_rows = i;
	num_cols = j;

	shared_ptr<node> p1, p2, p3;
	p1 = make_shared<node>(0);

	if (i*j == 1) {//in case the ring only have one element
		p1->east = p1;
		p1->south = p1;
		head = p1;
	}
	else {//normal case
		p1->east = make_shared<node>(1);
		p2 = p1;
		p1 = p1->east;
		int c = 1;
		while (c < i * j - 1) {//set all east
			p1->east = make_shared<node>(c + 1);
			p1 = p1->east;
			c++;
		}
		//set all south for each node
		p1->east = p2;
		p1 = p1->east;
		p2 = p1;
		p3 = p2->east;
		for (int k = 0; k < j - 1; k++) {	
			for (int m = 0; m < i - 1; m++) {
				for (int n = 0; n < j; n++) {
					p2 = p2->east;
				}
				p1->south = p2;
				p1 = p1->south;
			}
			p1->south = p3;
			p1 = p1->south;
			p2 = p1;
			p3 = p3->east;
		}
		for (int m = 0; m < i - 1; m++) {
			for (int n = 0; n < j; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p1->east;
		p1 = p1->east;
		head = p1; 
		p1.reset();
		p2.reset();
		p3.reset();
	}
}

//destructor
ring::~ring() {
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_cols*num_rows - 1; i++) {
		p1 = p1->east;
	}
	p1->east.reset();
	p1->south.reset();
	p1.reset();
	num_cols = 0;
	num_rows = 0;
}

//initializer list
ring::ring(const initializer_list<int> &V) {
	auto it = V.begin();
	num_rows = *it;
	it++;
	num_cols = *it;
	it++;
	int i = num_rows, j = num_cols;
	shared_ptr<node> p1, p2, p3;
	p1 = make_shared<node>(*it);
	if (i*j == 1) {//in case the ring only have one element
		p1->east = p1;
		p1->south = p1;
		head = p1;
	}
	else {
		it++;
		p1->east = make_shared<node>(*it);
		p2 = p1;
		p1 = p1->east;
		it++;
		while (it!=V.end()) {//set all east
			p1->east = make_shared<node>(*it);
			p1 = p1->east;
			it++;
		}
		//set all south for each node
		p1->east = p2;
		p1 = p1->east;
		p2 = p1;
		p3 = p2->east;
		for (int k = 0; k < j - 1; k++) {
			for (int m = 0; m < i - 1; m++) {
				for (int n = 0; n < j; n++) {
					p2 = p2->east;
				}
				p1->south = p2;
				p1 = p1->south;
			}
			p1->south = p3;
			p1 = p1->south;
			p2 = p1;
			p3 = p3->east;
		}
		for (int m = 0; m < i - 1; m++) {
			for (int n = 0; n < j; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p1->east;
		p1 = p1->east;
		head = p1;
		p1.reset();
		p2.reset();
		p3.reset();
	}

}

//copy constructor
ring::ring(const ring &r) {
	shared_ptr<node> p1, p2, p3, p4;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	p4 = r.head;
	p1 = make_shared<node>(p4->value);
	p4 = p4->east;
	p1->east = make_shared<node>(p4->value);
	p2 = p1;
	p1 = p1->east;
	int c = 1;
	while (c < num_cols * num_rows - 1) {//set all east
		p1->east = make_shared<node>(p4->east->value);
		p4 = p4->east;
		p1 = p1->east;
		c++;
	}
	//set all south for each node
	p1->east = p2;
	p1 = p1->east;
	p2 = p1;
	p3 = p2->east;
	for (int k = 0; k < num_cols - 1; k++) {
		for (int m = 0; m < num_rows - 1; m++) {
			for (int n = 0; n < num_cols; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p3;
		p1 = p1->south;
		p2 = p1;
		p3 = p3->east;
	}
	for (int m = 0; m < num_rows - 1; m++) {
		for (int n = 0; n < num_cols; n++) {
			p2 = p2->east;
		}
		p1->south = p2;
		p1 = p1->south;
	}
	p1->south = p1->east;
	p1 = p1->east;
	head = p1;
	p1.reset();
	p2.reset();
	p3.reset();
}

void ring::operator=(const ring &r) {//L-value
	shared_ptr<node> p1 = head;
	int count = 0;
	while (count < num_cols*num_rows - 1) {
		p1 = p1->east;
		count++;
	}
	if (p1) {
		p1->east.reset();
		p1->south.reset();
		p1.reset();
	}
	else p1.reset();
	
	shared_ptr<node> p2, p3, p4;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	p4 = r.head;
	p1 = make_shared<node>(p4->value);
	p4 = p4->east;
	p1->east = make_shared<node>(p4->value);
	p2 = p1;
	p1 = p1->east;
	int c = 1;
	while (c < num_cols * num_rows - 1) {//set all east
		p1->east = make_shared<node>(p4->east->value);
		p4 = p4->east;
		p1 = p1->east;
		c++;
	}
	//set all south for each node
	p1->east = p2;
	p1 = p1->east;
	p2 = p1;
	p3 = p2->east;
	for (int k = 0; k < num_cols - 1; k++) {
		for (int m = 0; m < num_rows - 1; m++) {
			for (int n = 0; n < num_cols; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p3;
		p1 = p1->south;
		p2 = p1;
		p3 = p3->east;
	}
	for (int m = 0; m < num_rows - 1; m++) {
		for (int n = 0; n < num_cols; n++) {
			p2 = p2->east;
		}
		p1->south = p2;
		p1 = p1->south;
	}
	p1->south = p1->east;
	p1 = p1->east;
	head = p1;
	p1.reset();
	p2.reset();
	p3.reset();

}

//move constructor
ring::ring(ring &&r) {
	shared_ptr<node> p1, p2, p3, p4;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	p4 = r.head;
	p1 = make_shared<node>(p4->value);
	p4 = p4->east;
	p1->east = make_shared<node>(p4->value);
	p2 = p1;
	p1 = p1->east;
	int c = 1;
	while (c < num_cols * num_rows - 1) {//set all east
		p1->east = make_shared<node>(p4->east->value);
		p4 = p4->east;
		p1 = p1->east;
		c++;
	}
	//set all south for each node
	p1->east = p2;
	p1 = p1->east;
	p2 = p1;
	p3 = p2->east;
	for (int k = 0; k < num_cols - 1; k++) {
		for (int m = 0; m < num_rows - 1; m++) {
			for (int n = 0; n < num_cols; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p3;
		p1 = p1->south;
		p2 = p1;
		p3 = p3->east;
	}
	for (int m = 0; m < num_rows - 1; m++) {
		for (int n = 0; n < num_cols; n++) {
			p2 = p2->east;
		}
		p1->south = p2;
		p1 = p1->south;
	}
	p1->south = p1->east;
	p1 = p1->east;
	head = p1;
	p1.reset();
	p2.reset();
	p3.reset();

	r.num_cols = 0;
	r.num_rows = 0;
	c = 0;
	p4 = r.head;
	while (c < r.num_cols*r.num_rows - 1) {
		p4 = p4->east;
		c++;
	}
	p4->east.reset();
	p4->south.reset();
	p4.reset();
}

void ring::operator=(ring &&r) {//R-value operator=
	shared_ptr<node> p1 = head;
	int count = 0;
	while (count < num_cols*num_rows - 1) {
		p1 = p1->east;
		count++;
	}
	if (p1) {
		p1->east.reset();
		p1->south.reset();
		p1.reset();
	}
	else p1.reset();

	shared_ptr<node> p2, p3, p4;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	p4 = r.head;
	p1 = make_shared<node>(p4->value);
	p4 = p4->east;
	p1->east = make_shared<node>(p4->value);
	p2 = p1;
	p1 = p1->east;
	int c = 1;
	while (c < num_cols * num_rows - 1) {//set all east
		p1->east = make_shared<node>(p4->east->value);
		p4 = p4->east;
		p1 = p1->east;
		c++;
	}
	//set all south for each node
	p1->east = p2;
	p1 = p1->east;
	p2 = p1;
	p3 = p2->east;
	for (int k = 0; k < num_cols - 1; k++) {
		for (int m = 0; m < num_rows - 1; m++) {
			for (int n = 0; n < num_cols; n++) {
				p2 = p2->east;
			}
			p1->south = p2;
			p1 = p1->south;
		}
		p1->south = p3;
		p1 = p1->south;
		p2 = p1;
		p3 = p3->east;
	}
	for (int m = 0; m < num_rows - 1; m++) {
		for (int n = 0; n < num_cols; n++) {
			p2 = p2->east;
		}
		p1->south = p2;
		p1 = p1->south;
	}
	p1->south = p1->east;
	p1 = p1->east;
	head = p1;
	p1.reset();
	p2.reset();
	p3.reset();

	r.num_cols = 0;
	r.num_rows = 0;
	c = 0;
	p4 = r.head;
	while (c < r.num_cols*r.num_rows - 1) {
		p4 = p4->east;
		c++;
	}
	p4->east.reset();
	p4->south.reset();
	p4.reset();
}

int & ring::operator[](int a) {
	shared_ptr<node> p = head;
	while (a > 0) {
		p = p->east;
		a--;
	}
	return p->value;
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> sp = head;
	int i = p.first;
	int j = p.second;

	while (i > 0) {
		while (j > 0) {
			sp = sp->east;
			j--;
		}
		sp = sp->south;
		i--;
	}
	return sp->value;
}

void ring::DelCol(int i) {
	int j = num_rows;
	int k;
	shared_ptr<node> p = head;
	if (i == 0) {//when first column is deleted head needs to be reset
		head = head->east;
		p = head;
		k = num_cols - 1;
	}
	else k = i;
	while (k > 0) {
		p = p->east;
		k--;
	}
	while (j > 1) {
		p->east = p->east->east;
		p = p->south;
		j--;
	}
	p->south = p->east->south;
	p->east = p->east->east;
	num_cols--;
}

ring ring::Threetimes() {
	ring temp = *this;
	shared_ptr<node> p1 = temp.head;
	int c = 0;
	while (c < temp.num_cols*temp.num_rows) {
		p1->value = p1->value * 3;
		p1 = p1->east;
		c++;
	}
	temp.head = p1;
	return temp;
}

//overload operator<<
ostream & operator<<(ostream &str, ring &R) {
	shared_ptr<node> p = R.head;
	for (int i = 0; i < R.num_rows; i++) {
		for (int j = 0; j < R.num_cols; j++) {
			str << p->value << "	";
			p = p->east;
		}
		str << endl;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}