//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
    shared_ptr<node> east;
    shared_ptr<node> south;
    int value;
    node() {}
    node(int i) { value = i; }
};
class ring {
public:
    //Implement all functions described below
    //funciton operator[] can be invoked by other functions
    shared_ptr<node> head;
    int num_rows;
    int num_cols;
    ring() {}
    ring(int i, int j);//constructor
    //i rows and j cols
    //values from 0 to i*j-1
    //See the photo for ring structures.
    
    ~ring();//destructor; do as little work as possible
    ring(const ring &r); //copy constructor
    ring(ring &&r); //move constructor
    void operator=(ring &&r);//R-value operator=
    void operator=(const ring &r); //L-value operator=
    ring(const initializer_list<int> &V);//see the explanation in main function
    int & operator[](int a);
    int & operator[](pair<int, int> p); //first is row number and second is col number
    
    void DelCol(int i);//delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
};

void ring::DelCol(int i) {
    //cout << "operate del";
    shared_ptr<node> sp = head;
    for (int colNum = 0; colNum < i; colNum++) {
        sp = sp->east;
    }
    
    for (int rowNum = 0; rowNum < num_rows; rowNum++) {
        //shared_ptr<node> del = sp;
        //sp = sp->south;
        //del.reset();
        sp.reset();
    }
    
    
}
int & ring::operator[](pair<int, int> p) {
    int row = p.first;
    int col = p.second;
    shared_ptr<node> sp = head;
    for (int i = 0; i < (row + 1) * (col + 1) + 1; i++) {
        sp = sp->east;
    }
    return sp->value;
}

ring ring::Threetimes() {
    shared_ptr<node> sp = head;
    for (int i = 0; i < num_rows * num_cols-1; i++) {
        sp->value *= 3;
        sp = sp->east;
    }
    return *this;
}
//move constructor
ring::ring(ring &&r) {
    head = r.head;
}
//////////////////problems!!!
//copy constructor
ring::ring(const ring &r) {
    num_cols = r.num_cols;
    num_rows = r.num_rows;
    shared_ptr<node> sp1, sp2 = r.head;
    while (sp2) {
        sp1 = make_shared<node>();
        sp1->east = head;
        sp1->south = head;
        head = sp1;
        sp2 = sp2->east;
    }
    shared_ptr<node> sp3 = head, sp4 = r.head;
    while (sp4) {
        sp3->value = r.head->value;
        sp3 = sp3->east;
        sp4 = sp4->east;
    }
}

//R-value operator=
void ring::operator=(ring &&r) {
    head->east.reset();
    head->south.reset();
    head = r.head;
}

//L-value operator=
void ring::operator=(const ring &r) {
    //cout << "operate operator=";
    head->east.reset();
    head->south.reset();
    num_cols = r.num_cols;
    num_rows = r.num_rows;
    shared_ptr<node> sp1, sp2 = r.head;
    while (sp2) {
        sp1 = make_shared<node>();
        sp1->east = head;
        sp1->south = head;
        head = sp1;
        sp2 = sp2->east;
    }
    shared_ptr<node> sp3 = head, sp4 = r.head;
    while (sp4) {
        sp3->value = r.head->value;
        sp3 = sp3->east;
        sp4 = sp4->east;
    }
    
}

//overload operator<<
ostream & operator<<(ostream &s, const ring &t) {
    shared_ptr<node> sp = t.head;
    if (!t.head) return s;
    for (int i = 0; i < t.num_rows; i++) {
        for (int j = 0; j < t.num_cols; j++) {
            s << sp->value << " ";
            sp = sp->east;
        }
        s << endl;
    }
    return s;
}

int &ring :: operator[](int a) {
    shared_ptr<node> sp = head;
    for (int i = 0; i < a; i++) {
        sp = sp->east;
    }
    return sp->value;
}

//constructor
ring::ring(int i, int j) {
    num_rows = i;
    num_cols = j;
    int total = i * j-1;
    shared_ptr<node> pPrev (new node(0));
    shared_ptr<node> pCurr;
    int m = 1;
    head = pPrev;
    while (--total > -1){
        pCurr = make_shared<node>(m);
        m++;
        pPrev->east = pCurr;
        pPrev = pCurr;
        
    }
    pCurr->east = head;
    
    /*shared_ptr<node> sp = head;
    shared_ptr<node> sp1 = head;
    for (int i = 0; i < total; i++) {
        for (int j = 0; j < num_cols; j++) {
            sp = sp->east;
        }
        //if ((total - sp1->value) < num_cols) sp = sp->east;
        sp1->south = sp;
        sp1 = sp1->south;*/
    
    
    shared_ptr<node> start = head;
    for(int i = 0; i < num_cols; i++){
        for(int j = 0; j < i; j++){
            start = start->east;
        }
        shared_ptr<node> tag = start;
         for (int i = 0; i < num_rows - 1; i++) {
             shared_ptr<node> last = start;
             for (int r = 0; r < num_cols; r++) {
                last = last->east;
             }
             start->south = last;
             start = last;
         }
         if (i != num_cols - 1)
             start->south = tag->east;
         else
             start->south = head;
         start = head;
    }
}

//initializer_list
ring::ring(const initializer_list<int> &V) : ring() {
    
    if (V.begin() == nullptr)
        return;
    if (V.begin() == V.end()) {
        head->value = 0;
        head->east = head;
        head->south = head;
    }
   
    auto it = V.begin();
    num_rows = *it;
    it++;
    num_cols = *it;
    it++;
    while (it != V.end()) {
        shared_ptr<node> p = make_shared<node>(*it);
        p->east = head;
        head = p;
        it++;
    }
}

//destructor
ring::~ring() {
    head->east.reset();
    head->south.reset();
}

int main() {
    
    ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
    
    cout << R1 << endl;
    R1[14] = 1000;
     R1[{2, 4}] = 2000;
     cout << R1[14] << " " << R1[{2, 4}] << endl;
     R1.DelCol(3);
     cout << R1 << endl;
     R1.DelCol(4);
     cout << R1 << endl;
     R1.DelCol(0);
     cout << R1 << endl;
     shared_ptr<ring> p1 = make_shared<ring>(3, 5);
     cout << *p1 << endl;
     p1.reset();
     //ring R2(4,6);
     ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
     //first two numbers are num_rows and num_cols; followed by values of nodes of ring
     cout << R2 << endl;
     ring R3(R2);
     cout << R3 << endl;
     ring R4;
     R4 = R3;
     cout << R4 << endl;
     ring R5;
     R5 = R4.Threetimes();
     cout << R5 << endl;
    
    getchar();
    getchar();
    return 0;
}

