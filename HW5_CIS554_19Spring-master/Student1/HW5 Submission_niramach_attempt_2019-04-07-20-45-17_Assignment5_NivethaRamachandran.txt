//HW5 Due: April 7 (Sunday) at 11:59PM
//Name:Nivetha Ramachandran
//SUID: 724348897
//Email:niramach@syr.edu
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r);//move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};
//Delete Column
void ring::DelCol(int i) {
	shared_ptr<node> p,q,r;
	if (!head) return;
	else if (head) { p = q= head;}
	//if first column
	if (i == 0) {
		for (int j = 0; j < num_cols-1; j++) {
			q = q->east;
		}
		p = p->south;
		for (int j = 1; j < num_rows; j++) {
			q->east = p->east;
			p = p->south;
			q = q->south;
		}
		q->east = p;
		q->south = p;
		head = p;
		p.reset();
		q.reset();
	}
	//if last column
	else if (i == num_cols-1) {
		for (int j = 0; j < i - 1; j++) {
			q = q->east;
		}
		p = p->south;
		for (int j = 1; j < num_rows; j++) {
			q->east = p;
			p = p->south;
			q = q->south;
		}
		q->east = head;
		q->south = head;
		p.reset();
		q.reset();
	}
	//any column in between
	else {
		for (int j = 0; j < i - 1; j++) {
			p = p->east;
		}
		q = p->east->east;
		for (int j = 0; j < num_rows; j++) {
			p->east = q;
			if (j != num_rows - 1) {
				p = p->south;
				q = q->south;
			}
		}
		p->south = p->south->east;
		p.reset();
		q.reset();
	}
	num_cols--;
}

//copy constructor
ring::ring(const ring &r) :ring() {
	shared_ptr<node> p1 = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> p, q, new_node;
	if (num_rows == 0 || num_cols == 0) return;
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			new_node = make_shared<node>(*p1);
			if (!head) { head = p = q = new_node; }
			else {
				q->east = new_node;
				q = new_node;
				if (i != 0) {
					p->south = q;
					p = p->east;
				}
			}
			p1 = p1->east;
		}
		//p1 = p1->east;
	}
	new_node.reset();
	q->east = head;
	q->south = head;
	q = head->east;
	for (int i = 1; i < num_cols; i++) {
		p->south = q;
		q = q->east;
		p = p->east;
	}
	p.reset();
	q.reset();
	p1.reset();
}
ring ring::Threetimes() {
	ring temp(num_rows, num_cols);
	shared_ptr<node> p1 = this->head;
	shared_ptr<node> p2 = temp.head;
	for (int i = 0; i < num_cols*num_rows; i++) {
		p2->value = 3 * p1->value;
		p1 = p1->east;
		p2 = p2->east;
	}
	return temp;
}
//move constructor
ring::ring(ring &&r) {
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	r.num_cols = 0;
	r.num_rows = 0;
	r.head.reset();
}

//R value operator= 
void ring::operator=(ring &&r) {
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	head = r.head;
	r.num_cols = 0;
	r.num_rows = 0;
	r.head.reset();
}

//L-value operator=
void ring::operator=(const ring &r) {
	shared_ptr<node> p1 = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> p, q, new_node;
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			new_node = make_shared<node>(*p1);
			if (!head) { head = p = q = new_node; }
			else {
				q->east = new_node;
				q = new_node;
				if (i != 0) {
					p->south = q;
					p = p->east;
				}
			}
			p1 = p1->east;
		}
	}
	new_node.reset();
	q->east = head;
	q->south = head;
	q = head->east;
	for (int i = 1; i < num_cols; i++) {
		p->south = q;
		q = q->east;
		p = p->east;
	}
	p.reset();
	q.reset();
	p1.reset();
}

//destructor
ring::~ring() {
	shared_ptr<node> p1 = head;
	if (num_rows == 0 || num_cols == 0) return;
	for (int i = 0; i < num_cols; i++)
		p1 = p1->east;
	for (int j = 0; j < num_rows-1; j++) {
		(p1->east).reset();
		p1 = p1->south;
	}
	if (p1) {
		p1->east.reset();
		p1->south.reset();
	}
	head.reset();
	p1.reset();
	num_rows = 0;
	num_cols = 0;
}
//Initializer list
ring::ring(const initializer_list<int> &R) {
	head.reset();
	auto it1 = R.begin();
	num_rows = *it1;
	num_cols = *(++it1);
	it1++;
	shared_ptr<node> p, q, new_node;
	while (it1 != R.end()) {
		for (int i = 0; i < num_rows; i++) {
			for (int j = 0; j < num_cols; j++) {
				new_node = make_shared<node>(*it1);
				if (!head) { head = p = q = new_node; }
				else {
					q->east = new_node;
					q = new_node;
					if (i != 0) {
						p->south = q;
						p = p->east;
					}
				}
				it1++;
			}
		}
		
	}
		new_node.reset();
		q->east = head;
		q->south = head;
		q = head->east;
		for (int i = 1; i < num_cols; i++) {
			p->south = q;
			q = q->east;
			p = p->east;
		}
		p.reset();
		q.reset();
}
int & ring::operator[](int a) {
	shared_ptr<node> p=head;
	for (int i = 0; i < a; i++)
		p = p->east;
	return p->value;
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> q=head;
	for (int i = 0; i < p.second; i++) 
		q = q->east;
	for (int i = 0; i < p.first; i++)
		q = q->south;
	return q->value;
}

ring::ring(int no_rows,int no_cols) {
	num_rows = no_rows;
	num_cols = no_cols;
	int count=0; //start from zero
	shared_ptr<node> p, q,new_node;
	for(int i=0;i<num_rows;i++){
		for (int j = 0; j < num_cols; j++) {
			new_node = make_shared<node>(count); count++;
			if (!head) { head = p = q = new_node; }
			else {
				q->east = new_node;
				q = new_node;
				if (i != 0) {
					p->south = q;
					p = p->east;
				}
			}
		}
	}
	new_node.reset();
	q->east = head;
	q->south = head;
	q = head->east;
	for (int i = 1; i < num_cols; i++) {
		p->south = q;
		q = q->east;
		p = p->east;
	}
	p.reset();
	q.reset();
}

//overload operator<<
ostream & operator<<(ostream &str,const ring &ring) {
	shared_ptr<node> p1 = ring.head;
	for (int i = 0; i < ring.num_rows; i++) {
		for (int j = 0; j < ring.num_cols; j++) {
			str <<p1->value << " ";
			p1 = p1->east;
		}
		str << endl;
	}
	return str;
}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}