//Ziyang Chen
//zchen103@syr.edu
//SUID: 659745396

//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	friend ostream & operator<<(ostream &s, const ring &r);
};

//overload operator<<

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}

ring::ring(int i, int j)
{
	num_rows = i > 0? i : 0;
	num_cols = j > 0? j : 0;
	head = make_shared<node>(0);
	shared_ptr<node> p2 = head;
	for (int n = 1; n < i*j; n++) {
		p2->east = make_shared<node>(n);
		p2 = p2->east;
	}

	p2->east = head;
	p2 = head;
	shared_ptr<node> p3 = head;
	for (int i = 0; i < num_cols; i++) {
		p3 = p3->east;
	}
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			p2->south = p3;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
}

ring::~ring()
{

	head.reset();
	
}

ring::ring(const ring & r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	shared_ptr<node> p1 = r.head->east;
	shared_ptr<node> p2 = head;
	while (p1 != r.head) {
		p2->east = make_shared<node>(p1->value);
		p1 = p1->east;
		p2 = p2->east;
	}
	p2->east = head;
	p2 = head;
	shared_ptr<node> p3 = head;
	for (int i = 0; i < num_cols; i++) {
		p3 = p3->east;
	}
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			p2->south = p3;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
}

ring::ring(ring && r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;

	r.head.reset();
}

void ring::operator=(ring && r)
{
	head.reset();
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
}

void ring::operator=(const ring & r)
{
	head.reset();
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	shared_ptr<node> p1 = r.head->east;
	shared_ptr<node> p2 = head;
	while (p1 != r.head) {
		p2->east = make_shared<node>(p1->value);
		p1 = p1->east;
		p2 = p2->east;
	}
	p2->east = head;
	p2 = head;
	shared_ptr<node> p3 = head;
	for (int i = 0; i < num_cols; i++) {
		p3 = p3->east;
	}
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			p2->south = p3;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
}

ring::ring(const initializer_list<int>& V)
{
	auto it = V.begin();
	num_rows = (*it++);
	num_cols = (*it++);
	head = make_shared<node>(*it++);
	shared_ptr<node> p2 = head;
	while (it != V.end()) {
		p2->east = make_shared<node>(*it++);
		p2 = p2->east;
	}
	p2->east = head;
	p2 = head;
	shared_ptr<node> p3 = head;
	for (int i = 0; i < num_cols; i++) {
		p3 = p3->east;
	}
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			p2->south = p3;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
}

int & ring::operator[](int a)
{
	// TODO: insert return statement here
	a %= num_rows * num_cols;
	shared_ptr<node> p = head;
	while (a-- > 0) {
		p = p->east;
	}
	return p->value;
}

int & ring::operator[](pair<int, int> p) //first is row number and second is col number
{
	// TODO: insert return statement here
	shared_ptr<node> ptr = head;

	for (int i = 0; i < p.first; i++) {
		ptr = ptr->south;
	}
	for (int i = 0; i < p.second; i++) {
		ptr = ptr->east;
	}
	return ptr->value;
}

void ring::DelCol(int i)//delete col i of *this
{
	if (i > num_cols) return;
	
	shared_ptr<node> p1 = head;
	shared_ptr<node> p2 = head;
	if (i == 0) {
		if (num_cols == 1) {
			head.reset();
			num_cols--;
			num_rows = 0;
			return;
		}
		head = head->east;
		for (int j = 0; j < num_cols-1; j++) p2 = p2->east;
		p1 = p1->south;
	}
	else {
		p1 = p1->east;
		for (int j = 1; j < i; j++) {
			p1 = p1->east;
			p2 = p2->east;
		}
	}


	int r = num_rows;
	while (r-- > 0) {
		p2->east = p1->east;
		p2 = p2->south;
		shared_ptr<node> temp = p1->south;
		p1.reset();
		p1 = temp;
		//p1 = p1->south;
	}
	num_cols--;
}

ring ring::Threetimes()
{
	ring temp(*this);
	shared_ptr<node> p = temp.head;
	for (int i = 0; i < temp.num_rows; i++) {
		for (int j = 0; j < temp.num_cols; j++) {
			p->value = p->value * 3;
			p = p->east;
		}
	}
	return move(temp);
}

ostream & operator<<(ostream & s, const ring & r)
{
	// TODO: insert return statement here
	shared_ptr<node> p = r.head;
	for (int i = 0; i < r.num_rows; i++) {
		for (int j = 0; j < r.num_cols; j++) {
			s << p->value << "\t";
			p = p->east;
		}
		s << "\n";
	}
	return s;
}
