//Name - Pushkar Tatiya
//SUID - 212517742
//Email - pmtatiya@syr.edu
//HW5 Due: April 7 (Sunday) at 11:59PM

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	//ring() { value = new int; }

	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//Basic Constructor with i rows, j columns and calues from 0 to i*j-1
ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;

	shared_ptr<node> last;
	// Create all the nodes and create east links for every one of them... so 0 -> 1 -> 2 -> 3 ... -> 23 -> 1
	for (int k = 0; k < i * j; k++)
	{
		shared_ptr<node> p = make_shared<node>(k);
		if (!head) // No nodes initially
		{
			head = p;
			last = p;
			p->east = p;
		}
		else // Else create a new node and create it's east node back to head (circular structure)
		{
			last->east = p;
			last = p;
			p->east = head;
		}
	}

	shared_ptr<node> temp1 = head;
	shared_ptr<node> temp2 = head;
	shared_ptr<node> temp3 = head;
	// To create south links...
	for (int j = 0; j != (num_rows * num_cols); j++)
	{
		for (int i = 0; i < num_cols; i++) temp1 = temp1->east; // Go to end of first row.. so we put the next as south to first node.


		if (temp1 == temp3)
		{
			temp1 = temp1->east;
			temp3 = temp1;
		}

		temp2->south = temp1; //so p1 points to head initially.. now it's south will be the next node.. in this case 6
		temp2 = temp1;
		if (temp1->east == head) // if last element.. point it's south to head too.. 
		{
			temp2->south = head;
			break;
		}

	}
}


// Changes value ay index a
int& ring:: operator[](int a)
{
	if (a == 0)
		return head->value;
	shared_ptr<node> p = head;
	while (a != 0)
	{
		p = p->east;
		a--;
	}
	return p->value;

}


//Change values at row i, column j, Given as pair of <int,int>
int& ring::operator[](pair<int, int> p)
{
	shared_ptr<node> temp = head;
	for (int i = 0; i < p.first - 1; i++)
		temp = temp->south;
	for (int i = 0; i < p.second - 1; i++)
		temp = temp->east;
	return temp->value;
}

// Delecte column given by column number i
void ring::DelCol(int i)
{
	shared_ptr<node> temp = head;
	shared_ptr<node> temp1 = head->east;

	if (i > num_cols or i == 0) return; //Check if column number is 0 or more than the number of columns we have

	int j = 0;
	if (i == 1) // We go to the last column so that we can link last column to second column and delete the 1st column
	{
		while (j != num_cols - 1)
		{
			temp = temp->east;
			temp1 = temp1->east;
			j++;
		}
	}
	else // We go to a column before the column we are supposed to delete and then create a link.
	{
		while (j != (i - 2))
		{
			temp = temp->east;
			temp1 = temp1->east;
			j++;
		}
	}


	for (int k = 0; k < num_rows - 1; k++)
	{
		temp->east = temp1->east;
		temp1.reset();
		temp = temp->south;
		temp1 = temp->east;
	}

	temp->east = temp1->east;
	if (i == 1)
	{
		temp->south = temp1->east;
		head = temp1->east;
	}
	else temp->south = temp1->south;

	temp1.reset();
	num_cols--;
}

//Implementation of a basic copy constructor
//Used the idea from ring::ring(int i, int j) and done the same
ring::ring(const ring &r) : ring()
{
	//cout << "entering copy const " << endl;
	shared_ptr<node> temp = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	shared_ptr<node> last;
	for (int k = 0; k < num_rows * num_cols; k++)
	{
		shared_ptr<node> p = make_shared<node>(temp->value);
		if (!head)
		{
			head = p;
			last = p;
			p->east = p;
			temp = temp->east;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
			temp = temp->east;
		}

	}

	shared_ptr<node> temp1 = head;
	shared_ptr<node> temp2 = head;
	shared_ptr<node> temp3 = head;

	for (int j = 0; j != (num_rows * num_cols); j++)
	{
		for (int i = 0; i < num_cols; i++) temp1 = temp1->east;


		if (temp1 == temp3)
		{
			temp1 = temp1->east;
			temp3 = temp1;
		}

		temp2->south = temp1;
		temp2 = temp1;
		if (temp1->east == head)
		{
			temp2->south = head;
			break;
		}

	}
}


// Implementation of initializer list
//Used the idea from ring::ring(int i, int j) and done the same
ring::ring(const initializer_list<int> &V) : ring()
{
	auto i = V.begin();
	num_rows = *i;
	i++;
	num_cols = *i;
	i++;
	shared_ptr<node> last;

	for (; i != V.end(); i++)
	{
		shared_ptr<node> p = make_shared<node>(*i);
		if (!head)
		{
			head = p;
			last = p;
			p->east = p;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
		}

	}

	shared_ptr<node> temp1 = head;
	shared_ptr<node> temp2 = head;
	shared_ptr<node> temp3 = head;

	for (int j = 0; j != (num_rows * num_cols); j++)
	{
		for (int i = 0; i < num_cols; i++) temp1 = temp1->east;


		if (temp1 == temp3)
		{
			temp1 = temp1->east;
			temp3 = temp1;
		}

		temp2->south = temp1;
		temp2 = temp1;
		if (temp1->east == head)
		{
			temp2->south = head;
			break;
		}

	}
}


//Impkementation of l value operatror
//Used the idea from ring::ring(int i, int j) and done the same 
void ring::operator=(const ring &r)
{
	shared_ptr<node> temp = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	shared_ptr<node> tail;
	for (int k = 0; k < num_rows * num_cols; k++)
	{
		shared_ptr<node> p = make_shared<node>(temp->value);
		if (!head)
		{
			head = tail = p;
			p->east = p;
			temp = temp->east;
		}
		else
		{
			tail->east = p;
			tail = p;
			p->east = head;
			temp = temp->east;
		}
	}

	shared_ptr<node> temp1 = head;
	shared_ptr<node> temp2 = head;
	shared_ptr<node> temp3 = head;

	for (int j = 0; j != (num_rows * num_cols); j++)
	{
		for (int i = 0; i < num_cols; i++) temp1 = temp1->east;


		if (temp1 == temp3)
		{
			temp1 = temp1->east;
			temp3 = temp1;
		}

		temp2->south = temp1;
		temp2 = temp1;
		if (temp1->east == head)
		{
			temp2->south = head;
			break;
		}

	}
}


//Implememntyation of three timnes (calls move opetator)
ring ring::Threetimes()
{
	shared_ptr<node> p = head;
	ring temp(num_rows, num_cols);
	shared_ptr<node> test = temp.head;

	for (size_t i = 0; i < num_rows * num_cols; i++)
	{
		test->value = 3 * p->value;
		p = p->east;
		test = test->east;
	}

	return move(temp);

}


//IOmplementation of MOVE
ring::ring(ring &&r) : ring()//r.num_rows, r.num_cols)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	//It calls destructor after moved
}

// R-value... Working same as move operatoire
void ring::operator=(ring &&r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	//It calls destructor after moved
}

//Implemnetation of OVerloading operatoer
ostream & operator<<(ostream &str, const ring &R)
{
	shared_ptr<node> p = R.head;

	//if head not found
	if (!p) return str;

	//else
	str << p->value << "\t";
	p = p->east;

	//Make sure you go to end of row and go to new line
	int row_end = 1;

	while (p != R.head)
	{
		str << p->value << "\t";
		p = p->east;
		row_end += 1;

		//If end of row.. go to next line
		if ((row_end % R.num_cols) == 0)
			str << "\n";
	}
	return str;
}

//KABOOOOOOOOOOOOOOOOM
ring::~ring()
{
	head.reset(); 
	num_rows = 0;
	num_cols = 0;
}



int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}