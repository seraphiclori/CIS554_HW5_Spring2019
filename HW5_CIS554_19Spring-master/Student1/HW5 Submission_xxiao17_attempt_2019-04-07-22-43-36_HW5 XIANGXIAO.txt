//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
    shared_ptr<node> east;
    shared_ptr<node> south;a
    int value;
    node() {
    }
    node(int i) {
        value = i;
    }
};

class ring {
public:
    //Implement all functions described below
    //funciton operator[] can be invoked by other functions
    
    shared_ptr<node> head;
    int num_rows;
    int num_cols;
    
    ring();
    ring(int i, int j);    //constructor
    //i rows and j cols
    //values from 0 to i*j-1
    //See the photo for ring structures.
    
    ~ring();                    //destructor; do as little work as possible
    ring(const ring &r); //copy constructor
    ring(ring &&r); //move constructor
    void operator=(ring &&r); //R-value operator=
    void operator=(const ring &r); //L-value operator=
    ring(const initializer_list<int> &V); //see the explanation in main function
    int & operator[](int a);
    int & operator[](pair<int, int> p); //first is row number and second is col number
    
    void DelCol(int i); //delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
    
};

//overload operator<<
ostream& operator<<(ostream& os, const ring& r);

int main() {
    
    ring R1(4, 6); //24 numbers from 0 to 23 will be initialized to nodes.
    cout << R1 << endl;
    R1[14] = 1000;
    R1[ { 2, 4 }] = 2000;
    cout << R1[14] << " " << R1[ { 2, 4 }] << endl;
    R1.DelCol(3);
    cout << R1 << endl;
    R1.DelCol(4);
    cout << R1 << endl;
    R1.DelCol(0);
    cout << R1 << endl;
    shared_ptr<ring> p1 = make_shared<ring>(3, 5);
    cout << *p1 << endl;
    p1.reset();
    
    ring R2 = { 3, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500, 1000, 2000,
        3000, 4000, 5000 }; //
    
    //first two numbers are num_rows and num_cols; followed by values of nodes of ring
    cout << R2 << endl;
    ring R3(R2);
    cout << R3 << endl;
    ring R4;
    R4 = R3;
    cout << R4 << endl;
    ring R5;
    R5 = R4.Threetimes();
    cout << R5 << endl;
    
    //getchar();
    //getchar();
    return 0;
}

ring::ring() {
    num_rows = num_cols = 0;
}

ring::ring(int rows, int cols) {
    num_rows = rows;
    num_cols = cols;
    
    head = shared_ptr<node>(new node[num_rows * num_cols]);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            head.get()[index] = node(index);
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            //cout << i << " " << j << " " << index << " " << east_index << " " << south_index << endl;
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

ring::~ring() {
    
}

ring::ring(const ring& r) {
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    node* p = new node[num_rows * num_cols];
    head = shared_ptr<node>(p);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            head.get()[index] = node(r.head.get()[index].value);
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

ring::ring(ring&& r) {
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    if(num_rows == 0 && num_cols == 0){
        return;
    }
    
    node* p = new node[num_rows * num_cols];
    head = shared_ptr<node>(p);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            head.get()[index] = node(r.head.get()[index].value);
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

void ring::operator =(ring&& r) {
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    if(num_rows == 0 && num_cols == 0){
        return;
    }
    
    node* p = new node[num_rows * num_cols];
    head = shared_ptr<node>(p);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            head.get()[index] = node(r.head.get()[index].value);
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

void ring::operator =(const ring& r) {
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    node* p = new node[num_rows * num_cols];
    head = shared_ptr<node>(p);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            head.get()[index] = node(r.head.get()[index].value);
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

ring::ring(const initializer_list<int>& V) {
    initializer_list<int>::const_iterator it = V.begin();
    num_rows = *it;
    it++;
    num_cols = *it;
    it++;
    
    cout << num_rows << " " << num_cols << endl;
    node* p = new node[num_rows * num_cols];
    head = shared_ptr<node>(p);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            //cout << index << endl;
            //cout << *it << endl;
            head.get()[index] = node(*it);
            it++;
        }
    }
    
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            
            int east_index = index + 1;
            if(east_index >= num_rows * num_cols){
                east_index = 0;
            }
            
            int south_index = index + num_cols;
            if(south_index >= num_rows * num_cols){
                south_index = j + 1;
                if(south_index >= num_cols){
                    south_index = 0;
                }
            }
            
            head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
            head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
        }
    }
}

int& ring::operator [](int a) {
    return head.get()[a].value;
}

int& ring::operator [](pair<int, int> p) {
    return head.get()[p.first*num_rows+p.second].value;
}

void ring::DelCol(int col) {
    
    /*
     shared_ptr<node> old = shared_ptr<node>(head.get());
     
     head = shared_ptr<node>(new node[num_rows * (num_cols-1)]);
     int index = 0;
     for (int i = 0; i < num_rows; i++) {
     for (int j = 0; j < num_cols; j++) {
     int oldIndex = i*num_cols + j;
     if(j == col){
     continue;
     }
     //cout << old.get()[oldIndex].value << endl;
     head.get()[index++] = node(old.get()[oldIndex].value);
     }
     }
     
     
     num_cols = num_cols-1;
     for (int i = 0; i < num_rows; i++) {
     for (int j = 0; j < num_cols; j++) {
     int index = i*num_cols + j;
     
     int east_index = index + 1;
     if(east_index >= num_rows * num_cols){
     east_index = 0;
     }
     
     int south_index = index + num_cols;
     if(south_index >= num_rows * num_cols){
     south_index = j + 1;
     if(south_index >= num_cols){
     south_index = 0;
     }
     }
     
     //cout << i << " " << j << " " << index << " " << east_index << " " << south_index << endl;
     head.get()[index].east = shared_ptr<node>(&head.get()[east_index]);
     head.get()[index].south = shared_ptr<node>(&head.get()[south_index]);
     }
     }
     */
}

ring ring::Threetimes() {
    ring r(num_rows, num_cols);
    for (int i = 0; i < num_rows; i++) {
        for (int j = 0; j < num_cols; j++) {
            int index = i*num_cols + j;
            r[index] = (*this)[index] * 3;
        }
    }
    return r;
}

ostream& operator <<(ostream& os, const ring& r) {
    for (int i = 0; i < r.num_rows; i++) {
        for (int j = 0; j < r.num_cols; j++) {
            int index = i*r.num_cols + j;
            cout << r.head.get()[index].value << " ";
        }
        cout << endl;
    }
    return os;
}
