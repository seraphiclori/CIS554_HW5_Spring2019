// HW 5
// Sencer Burak Somuncuoglu
// sbsomunc@syr.edu
// 270898660

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(int i, int j) {
	shared_ptr<node> current = make_shared<node>();
	head = current;

	num_rows = i;
	num_cols = j;

	for (int v = 0; v < i*j; v++) { // create all the nodes and connect east
		current->value = v;
		if (v == i*j - 1) {
			current->east = head;
			break;
		}
		current->east = make_shared<node>();
		current = current->east;
	}

	current = head;

	shared_ptr<node> currentSouthTemp = make_shared<node>();
	currentSouthTemp = head;

	shared_ptr<node> currentEastTemp = make_shared<node>();
	currentEastTemp = head;

	for (int c = 0; c < j; c++) {
		currentSouthTemp = currentSouthTemp->east;
	}

	int counter = j;
	for (int r = 1; r < i; r++) {
		for (int c = 0; c < j; c++) {
			current->south = currentSouthTemp; // south

			current = current->east;

			if (r == i - 1) {
				currentSouthTemp->south = currentEastTemp->east;
				currentEastTemp = currentEastTemp->east;
				if (counter == i * j - 1) {
					currentSouthTemp->south = head;
					currentSouthTemp->east = head;
					break;
				}
			}

			currentSouthTemp = currentSouthTemp->east;

			counter++;
		}
	}
}

ring::~ring() {
	if (head) {
		shared_ptr<node> current = head;
		for (int i = 1; i < num_rows; i++) {
			current = current->south;
		}
		for (int i = 1; i < num_cols; i++) {
			current = current->east;
		}
		current->east.reset();
		current->south.reset();
		head.reset();

		num_rows = 0;
		num_cols = 0;
	}
}

ring::ring(const ring &r) : ring() {
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	shared_ptr<node> rCurrent = r.head;
	shared_ptr<node> current = make_shared<node>();
	head = current;

	for (int i = 0; i < num_rows * num_cols; i++) {
		current->value = rCurrent->value;
		if (i == num_rows * num_cols - 1) {
			current->east = head;
			break;
		}
		current->east = make_shared<node>();

		rCurrent = rCurrent->east;
		current = current->east;
	}

	current = head;
	rCurrent = r.head;

	shared_ptr<node> currentSouthTemp = make_shared<node>();
	currentSouthTemp = head;

	shared_ptr<node> currentEastTemp = make_shared<node>();
	currentEastTemp = head;

	for (int c = 0; c < num_cols; c++) {
		currentSouthTemp = currentSouthTemp->east;
	}

	int counter = num_cols;
	for (int r = 1; r < num_rows; r++) {
		for (int c = 0; c < num_cols; c++) {
			current->south = currentSouthTemp; // south

			current = current->east;

			if (r == num_rows - 1) {
				currentSouthTemp->south = currentEastTemp->east;
				currentEastTemp = currentEastTemp->east;
				if (counter == num_rows * num_cols - 1) {
					currentSouthTemp->south = head;
					currentSouthTemp->east = head;
					break;
				}
			}

			currentSouthTemp = currentSouthTemp->east;

			counter++;
		}
	}
} // copy ctor

ring::ring(ring &&r) { // move ctor
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;

	r.num_rows = 0;
	r.num_cols = 0;
	r.head = nullptr;
}

void ring::operator=(ring &&r) { // R-value assignment
	if (this != &r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;

		r.num_rows = 0;
		r.num_cols = 0;
		r.head = nullptr;
	}
}

ring ring::Threetimes() {
	ring R = ring(num_rows, num_cols);
	shared_ptr<node> current = R.head;

	for (int i = 0; i < num_rows * num_cols; i++) {
		current->value = current->value*3;
		if (i == num_rows * num_cols - 1) {
			break;
		}
		current = current->east;
	}

	return move(R);
}

void ring::operator=(const ring &r) { // L-value assignment
	if (this != &r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;

		shared_ptr<node> rCurrent = r.head;
		shared_ptr<node> current = make_shared<node>();
		head = current;

		for (int i = 0; i < num_rows * num_cols; i++) {
			current->value = rCurrent->value;
			if (i == num_rows * num_cols - 1) {
				current->east = head;
				break;
			}
			current->east = make_shared<node>();

			rCurrent = rCurrent->east;
			current = current->east;
		}

		current = head;
		rCurrent = r.head;

		shared_ptr<node> currentSouthTemp = make_shared<node>();
		currentSouthTemp = head;

		shared_ptr<node> currentEastTemp = make_shared<node>();
		currentEastTemp = head;

		for (int c = 0; c < num_cols; c++) {
			currentSouthTemp = currentSouthTemp->east;
		}

		int counter = num_cols;
		for (int r = 1; r < num_rows; r++) {
			for (int c = 0; c < num_cols; c++) {
				current->south = currentSouthTemp; // south

				current = current->east;

				if (r == num_rows - 1) {
					currentSouthTemp->south = currentEastTemp->east;
					currentEastTemp = currentEastTemp->east;
					if (counter == num_rows * num_cols - 1) {
						currentSouthTemp->south = head;
						currentSouthTemp->east = head;
						break;
					}
				}

				currentSouthTemp = currentSouthTemp->east;

				counter++;
			}
		}
	}
}

int & ring::operator[](int a) {
	if (a >= 0) {
		shared_ptr<node> current = head;
		if (a > 1) {
			for (int i = 0; i < a - 1; i++) {
				current = current->east;
			}
		}
		return current->value;
	}
}

int & ring::operator[](pair<int, int> p) {
	if (p.first >= 0 && p.second >= 0) {
		int pos = ((p.first-1) * num_cols) + p.second;
		shared_ptr<node> current = head;
		if (pos > 1) {
			for (int i = 0; i < pos - 1; i++) {
				current = current->east;
			}
		}
		return current->value;
	}
}

void ring::DelCol(int i) {
	shared_ptr<node> current = head;
	shared_ptr<node> temp = make_shared<node>();
	shared_ptr<node> tempSouth = make_shared<node>();

	if (i>2) {
		for (int c = 0; c < i - 2; c++) {
			current = current->east;
		}
	}

	tempSouth = current->east->east;
	shared_ptr<node> currentEast = current->east;

	for (int r = 0; r < num_rows; r++) {
		if (i == 0) {
			for (int c = 2; c < num_cols; c++) {
				currentEast = currentEast->east;
			}
			if (currentEast->east == head) {
				currentEast->south.reset();
				head = currentEast->east->east;
			}
			shared_ptr<node> tempEast = currentEast->east->east;
			currentEast->east.reset();
			currentEast->east = tempEast;

			current = currentEast;
			if (r == num_rows - 1) {
				if (!current->south) {
					current->south = head;
				} else {
					shared_ptr<node> tempSouth2 = current->south->south;
					current->south.reset();
					current->south = tempSouth2;
				}
			}

			currentEast = currentEast->east;
		} else if (i > 0) {
			temp = current->east->east;
			current->east.reset();
			current->east = temp;

			if (r == num_rows - 1) {
				current->south.reset();
				if (current->east == head) {
					current->south = head;
				} else {
					current->south = tempSouth;
				}
			}
			current = current->south;
		}
	}
	num_cols--;
}

ring::ring(const initializer_list<int> &V) {
	shared_ptr<node> current = make_shared<node>();
	head = current;

	auto it = V.begin();

	num_rows = *it;
	it++;

	num_cols = *it;
	it++;

	while (it != V.end()) {
		current->value = *it;
		if (*it == num_rows * num_cols - 1) {
			current->east = head;
			break;
		}
		current->east = make_shared<node>();
		current = current->east;

		it++;
	}

	current = head;

	shared_ptr<node> currentSouthTemp = make_shared<node>();
	currentSouthTemp = head;

	shared_ptr<node> currentEastTemp = make_shared<node>();
	currentEastTemp = head;

	for (int c = 0; c < num_cols; c++) {
		currentSouthTemp = currentSouthTemp->east;
	}

	int counter = num_cols;
	for (int r = 1; r < num_rows; r++) {
		for (int c = 0; c < num_cols; c++) {
			current->south = currentSouthTemp; // south

			current = current->east;

			if (r == num_rows - 1) {
				currentSouthTemp->south = currentEastTemp->east;
				currentEastTemp = currentEastTemp->east;
				if (counter == num_rows * num_cols - 1) {
					currentSouthTemp->south = head;
					currentSouthTemp->east = head;
					break;
				}
			}

			currentSouthTemp = currentSouthTemp->east;

			counter++;
		}
	}
}

//overload operator<<
ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	if (!R.head) { return str; }
	str << p->value << " ";
	p = p->east;
	int counter = 1;
	while (p != R.head) {
		if (counter % R.num_cols == 0) {
			str << endl;
		}
		str << p->value << " ";
		p = p->east;
		counter++;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}