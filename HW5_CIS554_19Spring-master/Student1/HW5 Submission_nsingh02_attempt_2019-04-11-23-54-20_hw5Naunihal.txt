//Naunihal Singh
//541905989
//nsingh02@syr.edu

//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};


ring::~ring()
{
	shared_ptr<node> h1 = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	int count = num_rows * num_cols;
	while (count > 0)
	{
		temp1 = h1->east;
		temp2 = h2->south;
		delete h1;
		delete h2;
		h1 = temp1;
		h2 = temp 2;
		count -=2;
	}
}


ring::ring(const ring &r) :ring ()
{
	shared_ptr<node> r.hcopy1;
	shared_ptr<node> r.hcopy2;
	shared_ptr<node> h1 = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	int count = num_rows * num_cols;
	while (count > 0)
	{
		r.hcopy1 = h1;
		r.hcopy2 = h2;
		temp1 = h1->east;
		temp2 = h2->south;
		r.hcopy1->east = temp1;
		r.hcopy2->south = temp2;
		h1 = temp1;
		h2 = temp 2;
		r.hcopy1 = temp1;
		r.hcopy2 = temp2;
		count -=2;
	}
}


ring::ring(ring &&r) :ring()
{
	shared_ptr<node> r.hcopy1;
	shared_ptr<node> r.hcopy2;
	shared_ptr<node> h1 = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	int count = num_rows * num_cols;
	while (count > 0)
	{
		r.hcopy1 = h1;
		r.hcopy2 = h2;
		temp1 = h1->east;
		temp2 = h2->south;
		r.hcopy1->east = temp1;
		r.hcopy2->south = temp2;
		delete h1;
		delete h2;
		shared_ptr<node> h1 = nullptr;
		shared_ptr<node> h2 = nullptr;
		h1 = temp1;
		h2 = temp 2;
		r.hcopy1 = temp1;
		r.hcopy2 = temp2;
		count -=2;
	}
	delete h1;
	delete h2;
	shared_ptr<node> h1 = nullptr;
	shared_ptr<node> h2 = nullptr;
}


void ring::operator=(ring &&r)
{
	int num_rows = r.num_rows;
	int num_cols = r.num_cols;
	shared_ptr<node> head = r.head;
}


ring::ring(const initializer_list<int> &V) : ring()
{
	shared_ptr<node> h1 = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> V = head;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	int count = num_rows * num_cols;
	while (count > 0)
	{
		temp1 = h1->east;
		temp2 = h2->south;
		V->next = temp1;
		V = V->next;
		V->next = temp2;
		V = V->next;
		h1 = temp1;
		h2 = temp 2;
		count -=2;
	}
}


int& ring:: operator[](int a)
{
	if (a == 0)
		return head->value;

	int row = a / num_cols;
	int col = a % num_cols;
	shared_ptr<node> temp = head;

	for (int i = 0; i < row; i++)
		temp = temp->south;
	for (int i = 0; i < col; i++)
		temp = temp->east;
	return temp->value;
}


int& ring::operator[](pair<int, int> p)
{
	shared_ptr<node> temp = head;
	for (int i = 0; i < p.first - 1; i++)
		temp = temp->south;
	for (int i = 0; i < p.second - 1; i++)
		temp = temp->east;
	return temp->value;
}


ring ring::Threetimes()
{
	shared_ptr<node> temp = head;
	ring newRing(num_rows, num_cols);
	for (int i = 0; i < num_rows * num_cols; i++)
	{
		newRing->value = 3 * temp->value;
		temp = temp->east;
		newRing = newRing->east;
	}
	return newRing;
}


//overload operator<<

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}