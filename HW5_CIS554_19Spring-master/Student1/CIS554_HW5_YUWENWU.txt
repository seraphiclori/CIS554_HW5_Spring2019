//CIS554_HW5
//YUWEN WU
//ywu203@syr.edu
//329393870


#include <iostream>
#include <memory>
#include <map>
#include <exception>
using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	//constructor
	 //i rows and j cols
	 //values from 0 to i*j-1
	 //See the photo for ring structures.
	ring(int i, int j) {
		num_rows = i;
		num_cols = j;
		map<int, shared_ptr<node>> nodeMap;
		shared_ptr<node> prev;
		shared_ptr<node> cur;

		// create east link
		for (int r = 0; r < num_rows; r++) {
			for (int c = 0; c < num_cols; c++) {
				cur = make_shared<node>(r * num_cols + c);
				nodeMap[r * num_cols + c] = cur;
				if (prev == nullptr) {
					head = cur;
				}
				else {
					prev->east = cur;
				}
				prev = cur;

			}
		}
		// last point to head
		cur->east = head;

		// use dictionary to make south link
		prev = nullptr;
		cur = nullptr;
		for (int c = 0; c < num_cols; c++) {
			for (int r = 0; r < num_rows; r++) {
				cur = nodeMap[r * num_cols + c];
				if (prev != nullptr) {
					prev->south = cur;
				}
				prev = cur;

			}
		}
		// last point to head
		cur->south = head;


	}

	~ring() = default;
	ring(const ring& r) = default;
	ring(ring&& r) = default;
	/*void operator=(ring &&r) {
		if (this != &r) {

		}
	}*/
	void operator=(const ring& r) {
		// shape must consistent
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;

	}
	ring(const initializer_list<int>& V) {
		auto iter = V.begin();
		auto end = V.end();
		num_rows = *iter;
		iter++;
		num_cols = *iter;
		iter++;


		map<int, shared_ptr<node>> nodeMap;
		shared_ptr<node> prev;
		shared_ptr<node> cur;

		// create east link
		for (int r = 0; r < num_rows; r++) {
			for (int c = 0; c < num_cols; c++) {
				if (iter != end) {
					cur = make_shared<node>(*iter);
					iter++;
				}
				else {
					throw exception("elements not enough");
				}
				nodeMap[r * num_cols + c] = cur;
				if (prev == nullptr) {
					head = cur;
				}
				else {
					prev->east = cur;
				}
				prev = cur;

			}
		}
		// last point to head
		cur->east = head;

		// use dictionary to make south link
		prev = nullptr;
		cur = nullptr;
		for (int c = 0; c < num_cols; c++) {
			for (int r = 0; r < num_rows; r++) {
				cur = nodeMap[r * num_cols + c];
				if (prev != nullptr) {
					prev->south = cur;
				}
				prev = cur;

			}
		}
		// last point to head
		cur->south = head;




	}
	int& operator[](int a) {
		shared_ptr<node> cur = head;
		// move to east until a <= 0
		while (a > 0) {
			cur = cur->east;
			a--;
		}
		return cur->value;
	}
	int& operator[](pair<int, int> p) {
		int a = p.first * num_cols + p.second;
		shared_ptr<node> cur = head;
		// move to east until a <= 0
		while (a > 0) {
			cur = cur->east;
			a--;
		}
		return cur->value;
	}

	void DelCol(int i) {
		map<int, shared_ptr<node>> nodeMap;
		shared_ptr<node> prev;
		shared_ptr<node> cur = head;

		// create east link
		for (int r = 0; r < num_rows; r++) {
			for (int c = 0; c < num_cols; c++) {
				nodeMap[r * num_cols + c] = cur;
				cur = cur->east;
			}
		}

		if (i == num_cols - 1) {
			for (int r = 0; r < num_rows; r++) {
				nodeMap[r * num_cols + i - 1]->east = nodeMap[r * num_cols + i]->east;
			}
			nodeMap[(num_rows - 1) * num_cols + i - 1]->south = nodeMap[(num_rows - 1) * num_cols + i]->south;

		}
		else {
			for (int r = 0; r < num_rows; r++) {
				nodeMap[r * num_cols + i]->value = nodeMap[r * num_cols + i + 1]->value;
				nodeMap[r * num_cols + i]->east = nodeMap[r * num_cols + i + 1]->east;
			}
			nodeMap[(num_rows - 1) * num_cols + i]->south = nodeMap[(num_rows - 1) * num_cols + i + 1]->south;

		}
		num_cols--;
	}
	ring Threetimes() {
		ring result(num_rows, num_cols);
		shared_ptr<node> cur1 = result.head;
		shared_ptr<node> cur2 = head;

		int num = num_rows * num_cols;
		while (num > 0) {
			cur1->value = 3 * cur2->value;
			cur1 = cur1->east;
			cur2 = cur2->east;
			num--;
		}
		return result;
	}

	friend ostream& operator <<(ostream & os, const ring & r);
};

//overload operator<<
ostream& operator <<(ostream & os, const ring & r) {
	shared_ptr<node> cur = r.head;
	for (int i = 0; i < r.num_rows; i++) {
		for (int j = 0; j < r.num_cols; j++) {
			os << cur->value << "\t";
			cur = cur->east;
		}
		os << endl;
	}

	return os;
}


int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	// two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}