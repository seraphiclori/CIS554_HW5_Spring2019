//HW5 Due: April 7 (Sunday) at 11:59PM
//Name: Riya Godwani
//SUID: 660244087
//Email: rgodwani@syr.edu
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
    shared_ptr<node> east;
    shared_ptr<node> south;
    int value;
    node() {}
    node(int i) { value = i; }
};

class ring {
public:
    //Implement all functions described below
    //funciton operator[] can be invoked by other functions
    
    
    shared_ptr<node> head;
    int num_rows;
    int num_cols;
    ring(){}
    ring(int i, int j);//constructor
    //i rows and j cols
    //values from 0 to i*j-1
    //See the photo for ring structures.
    
    ~ring();//destructor; do as little work as possible
    ring(const ring &r); //copy constructor
    ring(ring &&r); //move constructor
    void operator=(ring &&r);//R-value operator=
    void operator=(const ring &r); //L-value operator=
    ring(const initializer_list<int> &V);//see the explanation in main function
    int & operator[](int a);
    int & operator[](pair<int, int> p); //first is row number and second is col number
    
    void DelCol(int i);//delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
    
    
};

ring::ring(int i, int j)
{
    num_rows = i;
    num_cols = j;
    shared_ptr<node> start;
    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    int begin = 1;
    head = make_shared<node>(0);
    start = head;
    while(begin!= i * j)
    {
        ptr1 = make_shared<node>(begin);
        start->east = ptr1;
        start = ptr1;
        begin++;
    }
    //Set the last node to point to head
    start->east = head;
    //Set the initial pointers to head
    //Move till we reach the last element of row 1
    ptr1 = ptr2 = head;
    for (int k = 0; k < j; k++)
    {
        ptr2 = ptr2->east;
    }
    //Continue setting south pointer to ptr2
    for(ptr1 = head; ptr1->east!=head; ptr1 = ptr1->east)
    {
        ptr1->south = ptr2;
        ptr2 = ptr2->east;
        if (ptr2 == head)
        {
            ptr2 = head->east;
        }
    }
    //Check if it is the last node then point it to head
    if (ptr1->east == head)
    {
        ptr1->south = head;
    }
    
}

//Ring Destructor
ring::~ring()
{
    shared_ptr<node> start1 = head;
    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    shared_ptr<node> start2;
    
    while (start1 && start2) {
        ptr1 = start1->east;
        ptr2 = start1->south;
        start1.reset();
        start1 = ptr1;
        start2 = ptr2;
    }
    start1.reset();
    start2.reset();
    cout << "Destroyed ring"<<endl;
}

//Copy Constructor
ring::ring(const ring &r): ring()
{
    shared_ptr<node> start;
    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    head = make_shared<node>(r.head->value);
    //Start from the head
    start = head;
    int begin = 1;
    //Make num_rows * num_cols - 1 number of nodes
    while(begin < r.num_rows * r.num_cols)
    {
        ptr1 = make_shared<node>();
        start->east = ptr1;
        start = ptr1;
        begin++;
    }
    //Set the last node to point to the head
    start->east = head;
    //Start from the first node in the ring i.e. the head
    ptr1 = head;
    ptr2 = head;
    begin = 0;
    //Traverse till the last node in the row
    while(begin<num_cols)
    {
        ptr2 = ptr2->east;
        begin++;
    }
    //Start setting the south pointers for the nodes till we reach the end node i.e. it points to the head
    while (ptr1->east != head)
    {
        ptr1->south = ptr2;
        ptr2 = ptr2->east;
        if (ptr2 == head)
            ptr2 = head->east;
        ptr1 = ptr1->east;
    }
    //Set final south pointer of last node to the head
    if (ptr1->east == head)
    {
        ptr1->south = head;
    }
    
    //Update num_rows and num_cols
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    //Start from head
    ptr1 = head;
    ptr2 = r.head;
    
    begin = 0;
    //Copy the values from r.head to head
    while(begin < num_rows * num_cols)
    {
        ptr1->value = ptr2->value;
        ptr1 = ptr1->east;
        ptr2 = ptr2->east;
        begin++;
    }
}

//Move Constructor
ring::ring(ring &&r): ring()
{
    //Set the head to r.head
    head = r.head;
    //Update the rows and columns
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    //Set original values to 0
    r.num_rows = 0;
    r.num_cols = 0;
    //Reset the head so that all pointers are reset
    r.head.reset();
}

//R-value
void ring::operator=(ring &&r)
{
    //Set the head to r.head
    head = r.head;
    //Update the rows and columns
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    //Set original values to 0
    r.num_rows = 0;
    r.num_cols = 0;
    //Reset the head so that all pointers are reset
    r.head.reset();
}

//L-value
void ring::operator=(const ring &r)
{
    shared_ptr<node> start1;
    shared_ptr<node> start2;
    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    start1 = head;
    while (start1 && start2)
    {
        ptr1 = start1->east;
        ptr2 = start1->south;
        //Reset values of the east pointers, use south pointer to traverse
        start1.reset();
        start1 = ptr1;
        start2 = ptr2;
    }
    start1.reset();
    start1.reset();
    //Reset the head if it exists
    if (head)
    {
        head.reset();
    }
    num_rows = 0;
    num_cols = 0;
    //Make new head node
    head = make_shared<node>(r.head->value);
    start1 = head;
    int begin = 1;
    //Create a ring with num_rows * num_cols - 1  nodes
    while(begin < r.num_rows * r.num_cols)
    {
        ptr1 = make_shared<node>();
        start1->east = ptr1;
        start1 = ptr1;
        begin++;
    }
    //Once you reach the last node, set it's east to point to the head
    start1->east = head;
    //Start traversing again from the head node
    ptr1 = head;
    ptr2 = head;
    begin = 0;
    //Start from the beginning and go till you reach the last element in the row
    while(begin < num_cols)
    {
        ptr2 = ptr2->east;
        begin++;
    }
    //Start setting the south pointers now
    while (ptr1->east != head)
    {
        ptr1->south = ptr2;
        ptr1 = ptr1->east;
        ptr2 = ptr2->east;
        //If pointer's east becomes head, it means you are at the last position
        if (ptr2 == head)
        {
            ptr2 = head->east;
        }
    }
    
    //Update the south of the last node to the head
    if (ptr1->east == head)
    {
        ptr1->south = head;
    }
    
    //Update rows and columns
    num_rows = r.num_rows;
    num_cols = r.num_cols;
    
    //Reset the pointers
    ptr1 = head;
    ptr2 = r.head;
    
    begin = 0;
    //Set the L-values
    while(begin < num_rows * num_cols)
    {
        ptr1->value = ptr2->value;
        ptr1 = ptr1->east;
        ptr2 = ptr2->east;
        begin++;
    }
}

//Initializer List
ring::ring(const initializer_list<int> &V)
{
    shared_ptr<node> start;
    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    //Use iterator to traverse the list
    auto iterator1 = V.begin();
    //Set the rows from the first index value of iterator
    num_rows = *iterator1;
    //Set the rows from the second index value of iterator
    num_cols = *(++iterator1);
    //Increment the iterator twice to reach iterator1 -> V[2]
    iterator1++;
    //Start making the ring with the values from the list
    head = make_shared<node>(*iterator1);
    start = head;
    iterator1++;
    //Read values one by one and add to the ring
    while (iterator1 != V.end())
    {
        ptr1 = make_shared<node>(*iterator1);
        start->east = ptr1;
        start = ptr1;
        iterator1++;
    }
    //Once you reach the last node, set it's east to point to the head
    start->east = head;
    //Start traversing again from the head node
    ptr1 = head;
    ptr2 = head;
    //Start from the beginning and go till the last element of the row
    int temp = 0;
    while(temp < num_cols)
    {
        ptr2 = ptr2->east;
        temp++;
    }
    //Start setting the south pointers now
    while (ptr1->east != head)
    {
        ptr1->south = ptr2;
        ptr1 = ptr1->east;
        ptr2 = ptr2->east;
        //If pointer's east becomes head, it means you are at the last position
        if (ptr2 == head)
        {
            ptr2 = head->east;
        }
    }
    //Update the south of the last node to the head
    if (ptr1->east == head)
    {
        ptr1->south = head;
    }
}


int &ring::operator[](int index)
{
    //Check if the index is within bounds
    if (index >= (num_rows *  num_cols) - 1)
    {
        cout << "Array index out of bound, exiting";
        exit(0);
    }
    //Create a shared pointer
    shared_ptr<node> ptr1 = head;
    for(int i = 0; i < index; i++)
    {
        ptr1 = ptr1 -> east;
    }
    return ptr1->value;
}


int &ring::operator[](pair<int, int> p)
{
    //Check if the index is within bounds
    if(p.first >= num_rows)
    {
        cout << "Array index out of bound, exiting";
        exit(0);
    }
    //Check if the index is within bounds
    else if(p.second >= num_cols)
    {
        cout << "Array index out of bound, exiting";
        exit(0);
    }
    //Create a shared pointer
    shared_ptr<node> ptr1 = head;
    for(int i = 0; i < p.first * p.second; i++)
    {
        ptr1 = ptr1 -> east;
    }
    return ptr1->value;
}


void ring::DelCol(int i)
{
    if(i > num_cols - 1)
    {
        cout<<"Index out of bounds"<<endl;
        exit(0);
    }
    else if(i ==0)
    {
        shared_ptr<node> ptr1;
        head = head->east;
        ptr1 = head;
        for (int j = 1; j < num_cols-1; j++)
        {
            ptr1 = ptr1->east;
        }
        for (int j = 1; j <= num_rows; j++)
        {
            ptr1->east = ptr1->east->east;
            ptr1 = ptr1->south;
        }
    }
    else
    {
        shared_ptr<node> ptr1 = head;
        for(int j=0; j < i-2;j++)
        {
            ptr1 = ptr1 ->east;
        }
        for(int j=0; j < num_rows; j++)
        {
            ptr1->east = ptr1->east->east;
            ptr1 = ptr1->south;
        }
    }
    
    num_cols = num_cols - 1;

    shared_ptr<node> ptr1;
    shared_ptr<node> ptr2;
    ptr1 = head;
    ptr2 = head;
    for (int j = 0; j < num_cols; j++)
    {
        ptr2 = ptr2->east;
    }
    while (ptr1->east != head)
    {
        ptr1->south = ptr2;
        ptr1 = ptr1->east;
        ptr2 = ptr2->east;
        if (ptr2 == head)
            ptr2 = head->east;
    }
    if (ptr1->east == head)
    {
        ptr1->south = head;
    }
    
}

ring ring::Threetimes()
{
    shared_ptr<node> start = head;
    while (start->east != head)
    {
        start->value *= 3;
        start = start->east;
    }
    return *this;
}


//overload operator<<
ostream & operator<<(ostream & str, const ring &R)
{
    shared_ptr<node> start;
    start = R.head;
    int i = 1;
    
    while (start->east != R.head) {
        str << start->value << "\t";
        if ((i) % R.num_cols == 0)
            str << endl;
        i++;
        start = start->east;
    }
    str << start->value;
    str << endl;
    return str;
}








int main() {

    ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
    cout << R1 << endl;
    R1[14] = 1000;
    R1[{2, 4}] = 2000;
    cout << R1[14] << " " << R1[{2, 4}] << endl;
    R1.DelCol(3);
    cout << R1 << endl;
    R1.DelCol(4);
    cout << R1 << endl;
    R1.DelCol(0);
    cout << R1 << endl;
    shared_ptr<ring> p1 = make_shared<ring>(3, 5);
    cout << *p1 << endl;
    p1.reset();
    ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
    //first two numbers are num_rows and num_cols; followed by values of nodes of ring
    cout << R2 << endl;
    ring R3(R2);
    cout << R3 << endl;
    ring R4;
    R4 = R3;
    cout << R4 << endl;
    ring R5;
    R5 = R4.Threetimes();
    cout << R5 << endl;
    
    getchar();
    getchar();
    return 0;
}
