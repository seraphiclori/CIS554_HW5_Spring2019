//HW5 Due: April 7 (Sunday) at 11:59PM
//Zhenqi Li
//SUID: 863502422
//email: zli287@syr.edu

#include <iostream>
#include <memory>
#include <list>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
	bool operator==(const node &t) const { return value == t.value; }
};

class ring {
private:
	void init_blank_ring(int row, int col);

public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int target_col);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	
};

void ring::init_blank_ring(int row, int col) {
	num_rows = row;
	num_cols = col;
	shared_ptr<node> current, n;
	for (int i = 0; i < row; ++i) {
		for (int j = 0; j < col; ++j) {
			n = make_shared<node>(i*col + j);
			if (!head) { head = n; }
			else {
				current->east = n;
			}
			current = n;
		}
	}
	current->east = head;
	current = head;
	shared_ptr<node> s;
	for (int i = 0; i < row - 1; ++i) {
		for (int j = 0; j < col; ++j) {
			int push_forward = col;
			s = current;
			for (int step = 0; step < push_forward; ++step) { s = s->east; }
			current->south = s;
			current = current->east;
		}
	}
	s = head->east;
	while (current->value != row * col - 1) {
		current->south = s;
		s = s->east;
		current = current->east;
	}
	current->south = head;
}

ring::ring(int i, int j) {
	init_blank_ring(i, j);
}

ring::~ring() {
	/*shared_ptr<node> sp1 = head;
	for (int i = 0; i < (num_rows-1)*num_cols; i++) { sp1 = sp1->east; }
	shared_ptr<node> sp2 = sp1->east;
	while (sp2 != head) {
		sp1.reset();
		sp1 = sp2;
		sp2 = sp2->east;
	}
	sp1.reset();
	sp2.reset();
	head.reset();*/
}

ring::ring(const ring &r) : ring() {//copy constructor
	init_blank_ring(r.num_rows, r.num_cols);
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head->value = r.head->value;
	shared_ptr<node> current = head->east;
	shared_ptr<node> new_current = r.head->east;
	while (new_current != r.head && current != head) {
		current->value = new_current->value;
		current = current->east;
		new_current = new_current->east;
	}
	//cout << "copy" << endl;
}

void ring::operator=(const ring &r) {//L-value operator=
	init_blank_ring(r.num_rows, r.num_cols);
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head->value = r.head->value;
	shared_ptr<node> current = head->east;
	shared_ptr<node> new_current = r.head->east;
	while (new_current != r.head) {
		current->value = new_current->value;
		current = current->east;
		new_current = new_current->east;
	}
	//cout << "L-value" << endl;
}

ring::ring(ring &&r) : ring() {
	init_blank_ring(r.num_rows, r.num_cols);
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
	//cout << "move" << endl;
}

void ring::operator=(ring &&r) {
	init_blank_ring(r.num_rows, r.num_cols);
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
	//cout << "R-value" << endl;
}

ring::ring(const initializer_list<int> &V) :ring(){
	int index = 0, row, col;
	list<int> l;
	for (int num : V) {
		switch (index) {
		case 0:
			row = num;
			++index;
			break;
		case 1:
			col = num;
			++index;
			break;
		default:
			l.push_back(num);
			++index;
		}
	}
	init_blank_ring(row, col);
	shared_ptr<node> current = this->head;
	for (auto it = l.begin(); it != l.end(); ++it) {
		current->value = *it;
		current = current->east;
	}
}

int & ring::operator[](int a) {
	shared_ptr<node> sp = head;
	for (int i = 0; i < a; i++) {
		sp = sp->east;
	}
	return sp->value ;
}

int &ring::operator[](pair<int , int> p) {
	shared_ptr<node> sp = head;
	for (int i = 0; i < p.first; i++) {
		sp = sp->south;
	}
	for (int j = 0; j < p.second; j++) {
		sp = sp->east;
	}
	return sp->value;
}

void ring::DelCol(int target_col) {
	if (target_col == 0) {
		shared_ptr<node> target = head, p1, p2, p3;
		p1 = p2 = target;
		p3 = target->east->south;
		for (int i = 1; i < num_cols; i++) p2 = p2->east;
		for (int i = 1; i < num_rows; i++) {
			p2->east = p3;
			p2 = p2->south;
			p3 = p3->south;
			if (i == num_rows - 1) {
				p2->south = target->east;
				p2->east = target->east;
			}
		}
		target = target->east;
		head = target;
	}
	else {
		shared_ptr<node> target = head;
		shared_ptr<node> previous = head;
		int step_forward = target_col;
		for (int i = 0; i < step_forward; i++) {
			if (i < step_forward - 1 && target_col != 0) {
				previous = previous->east;
			}
			target = target->east;
		}
		for (int i = 0; i < num_rows; i++) {
			previous->east = target->east;
			target = target->south;
			previous = previous->south;
		}
	}
	num_cols--;
}

ring ring::Threetimes() {
	shared_ptr<node> current = head;
	current->value = 3 * current->value;
	current = current->east;
	while (current != head) {
		current->value = 3 * current->value;
		current = current->east;
	}
	return *this;
}

//overload operator<<
ostream &operator<<(ostream &o, const ring &r) {
	shared_ptr<node> p1 = r.head;
	if (!r.head)return o;
	o << p1->value << " ";
	p1 = p1->east;
	//p1 = p1->south;
	int count = 1;
	while (p1 != r.head) {
		if (count % r.num_cols == 0) {
			o << endl;
		}
		o << p1->value << " ";
		p1 = p1->east;
		//p1 = p1->south;
		count++;
	}
	o << endl;
	return o;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}