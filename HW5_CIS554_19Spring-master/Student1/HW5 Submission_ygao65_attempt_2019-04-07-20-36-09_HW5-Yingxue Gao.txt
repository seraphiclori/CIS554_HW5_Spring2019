//HW5 Due: April 7 (Sunday) at 11:59PM
//Yingxue Gao
//ygao65@syr.edu
//SUID:225200289
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};
ring::ring(int i, int j) {
	int num_rows = i;
	int num_cols = j;
	shared_ptr<node> p = head;
	ring **r = new ring*[i];
	for (int m = 0; m < i; m++) {
		r[m] = new ring[j];
	}
	for (int n = 0; n < (i*j); n++) {
		head = p;
		p->east = p;
		p->south = p;
	}
	int k = 0;
	shared_ptr<node> sp = head;
	for (int a = 0; a < i; a++) {
			sp->value = k;
			sp = sp->east;
			k++;
	}
	/*int ** r;
	r = new int*[i];
	for (int m = 0; m < i; m++) {
			r[m] = new int[j];
		}
	int n = 0;
	for (int p = 0; p < i; p++) {
		for (int q = 0; q < j; q++) {
			r[p][q] = n;
			n++;
		}
	}*/
}
ring::~ring() {
	ring r;
	for (int i = 0; i < num_cols; i++) {
		shared_ptr<node> sp = make_shared<node>(r[num_rows-1,i]);
		sp->south = nullptr;
	}
	for (int j = 0; j < num_rows; j++) {
		shared_ptr<node> sp = make_shared<node>(r[j, num_cols-1]);
		sp->east = nullptr;
	}
	head->east.reset();
	head->south.reset();
}
ring::ring(const ring &r) {
	auto it1 = 0;
	shared_ptr<node> p1 = r.head;
	while (it1 < r.num_rows) {
		head = p1;
		p1->east = p1;
		it1++;
	}
	auto it2 = 0;
	shared_ptr<node> p2 = r.head;
	while (it2 < r.num_cols) {
		head = p2;
		p2->south = p2;
		it2++;
	}
}
ring::ring(ring &&r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.num_rows = 0;
	r.num_cols = 0;
	r.head = nullptr;
}
void ring::operator=(ring &&r) {
	shared_ptr<node> p;
	while (head != nullptr) {
		p = head->east;
		head = make_shared<node> (p);
	}
	head.reset();
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
	r.num_rows = 0;
	r.num_cols = 0;
}
void ring::operator=(const ring &r) {
	shared_ptr<node> p1;
	while (head != nullptr) {
		p1 = head->east;
		head.reset();
		head = make_shared<node> (p1);
	}
	head = nullptr;
	num_rows = 0;
	for (int i = 0; i < num_rows; i++) {
		p1 = make_shared<node>(new node);
		p1->east = head;
		head = make_shared<node>(p1);
	}
	num_cols = 0;
	for (int j = 0; j < num_cols; j++) {
		p1 = make_shared<node>(new node);
		p1->south = head;
		head = make_shared<node>(p1);
	}
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	p1 = make_shared<node>(head);
	shared_ptr<node> p2 = r.head;
	for (int i = 0; i < num_rows; i++) {
		p1->value = p2->value;
		p1 = p1->east;
		p2 = p2->east;
	}
}
ring::ring(const initializer_list<int> &V) {
	/*int * p1 = V.begin;
	int * p2 = V.begin + 1;
	auto it = V.begin + 2;
	ring R(*p1, *p2);
	for (int m = 0; m < (*p1); m++) {
		for (int n = 0; n < (*p2); n++) {
			R[m, n] = it->value;
			it++;
		}
	}*/
}
int & ring::operator[](int a) {
	ring r;
	return r[a];
}
int & ring::operator[](pair<int, int> p) {
	ring r;
	return r[{p.first, p.second}];
}
void ring::DelCol(int i) {
	shared_ptr<node> p1, p2, p3;
	int num_cols = i;
	ring r;
	p1 = make_shared<node>(r[i]);
	p2->east = p1;
	p3->south = p1;
	p2->east = p1->east;
	p3->south = p1->east;
	p1 = p1->south;
	p2 = p2->south;
	while (p1->east != p2->east) {
		p2->east = p1->east;
		p1 = p1->south;
		p2 = p2->south;
	}
}
ring ring::Threetimes() {
	ring r;
	ring threer;
	shared_ptr <node> p1 = r.head;
	shared_ptr <node> p2 = threer.head;
	p2->value = (p1->value) * 3;
	p1 = p1->east;
	p2 = p2->east;
	while (p1 != head) {
		p2->value = (p1->value) * 3;
		p1 = p1->east;
		p2 = p2->east;
	}
}
//overload operator<<
ostream & operator << (ostream & str, const ring &R) {
	shared_ptr<node> p11 = R.head;
	if (!R.head) { 
		return str;
	}
	str << p11->value << " ";
	p11 = p11->east;
	while (p11 != R.head) {
		str << p11->value << " ";
		p11 = p11->east;
	}
	return str;
}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}