// CIS554 HW4
// NAME : YUJIE FAN
// EMAIL : yfan37@syr.edu
// SUID : 467921153
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	//constructor
	ring(int i, int j) {
		num_rows = i;
		num_cols = j;
		//row direction pointer
		shared_ptr<node> tail = make_shared<node>(i*j - 1);
		head = tail;
		for (int m = i * j - 2; m >= 0; m--) {
			shared_ptr<node> p1 = make_shared<node>(m);
			p1->east = head;
			head = p1;
		}
		tail->east = head;
		//column direction pointer
		shared_ptr<node> p2 = head, p3;
		for (int m = 0; m < ((i - 1)*j); m++) {
			p3 = p2;
			for (int n = 0; n < j; n++) {
				p3 = p3->east;
			}
			p2->south = p3;
			p2 = p2->east;
		}
		p2 = head;
		for (int m = 0; m < j - 1; m++) {
			p3 = p2;
			for (int n = 0; n < i - 1; n++) {
				p3 = p3->south;
			}
			p3->south = p2->east;
			p2 = p2->east;
		}
		tail->south = head;
	}
	//destructor
	~ring()
	{
		if (!head) return;
		shared_ptr<node> p1 = head, p2;
		if (num_rows >= num_cols) {
			for (int m = 0; m < num_cols; m++) {
				p2 = p1;
				p1 = p1->east;
				p2->south.reset();
			}
			p2->east.reset();
		}
		else {
			for (int m = 0; m < num_rows; m++) {
				p2 = p1;
				p1 = p1->south;
				p2->east.reset();
			}
			p2->south.reset();
		}
		p1.reset();
		p2.reset();
		num_cols = 0;
		num_rows = 0;
	}
	//copy constructor
	ring(const ring &r) :ring(r.num_rows, r.num_cols) {
		shared_ptr<node> p2 = head, p3 = r.head;
		for (int m = 0; m < num_rows * num_cols; m++) {
			p2->value = p3->value;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
	//move constructor
	ring(ring &&r) {
		head = r.head;
		r.head.reset();
		num_cols = r.num_cols;
		r.num_cols = 0;
		num_rows = r.num_rows;
		r.num_rows = 0;
	}
	//R-value operator
	void operator=(ring &&r) {
		head = r.head;
		r.head.reset();
		num_cols = r.num_cols;
		r.num_cols = 0;
		num_rows = r.num_rows;
		r.num_rows = 0;
	}
	//L-value operator
	void operator=(const ring &r) {
		num_cols = r.num_cols;
		num_rows = r.num_rows;
		int i = num_rows;
		int j = num_cols;
		//row direction pointer
		shared_ptr<node> tail = make_shared<node>(i*j - 1);
		head = tail;
		for (int m = i * j - 2; m >= 0; m--) {
			shared_ptr<node> p1 = make_shared<node>(m);
			p1->east = head;
			head = p1;
		}
		tail->east = head;
		//column direction pointer
		shared_ptr<node> p2 = head, p3;
		for (int m = 0; m < ((i - 1) * j); m++) {
			p3 = p2;
			for (int n = 0; n < j; n++) {
				p3 = p3->east;
			}
			p2->south = p3;
			p2 = p2->east;
		}
		p2 = head;
		for (int m = 0; m < j - 1; m++) {
			p3 = p2;
			for (int n = 0; n < i - 1; n++) {
				p3 = p3->south;
			}
			p3->south = p2->east;
			p2 = p2->east;
		}
		tail->south = head;
		p2 = head;
		p3 = r.head;
		for (int m = 0; m < i*j; m++) {
			p2->value = p3->value;
			p2 = p2->east;
			p3 = p3->east;
		}
	}
	//initializer_list
	ring(const initializer_list<int> &V) :ring(*V.begin(), *(V.begin() + 1)) {
		auto t = V.begin() + 2;
		shared_ptr<node> p2 = head;
		for (int m = 0; m < num_rows * num_cols; m++) {
			p2->value = *t;
			p2 = p2->east;
			t++;
		}
	}
	//operator[] with input of single integer
	int & operator[](int a) {
		int i = a / num_cols;
		int j = a % num_cols;
		shared_ptr<node> p1 = head;
		for (int m = 0; m < i; m++) {
			p1 = p1->south;
		}
		for (int m = 0; m < j; m++) {
			p1 = p1->east;
		}
		return p1->value;
	}
	//operator[] with input of structure pair
	int & operator[](pair<int, int> p) {
		int i = p.first;
		int j = p.second;
		shared_ptr<node> p1 = head;
		for (int m = 0; m < i; m++) {
			p1 = p1->south;
		}
		for (int m = 0; m < j; m++) {
			p1 = p1->east;
		}
		return p1->value;
	}
	//delete one col
	void DelCol(int i) {
		if (i > num_cols - 1) { return; }
		num_cols--;
		shared_ptr<node> p1 = head, p2;
		p2 = p1;
		if (i == 0) {
			head = head->east;
			for (int m = 0; m < num_cols; m++) {
				p2 = p2->east;
			}
			p1->south.reset();
			for (int m = 0; m < num_rows - 1; m++) {
				p1 = p2->east;
				p2->east = p1->east;
				p2 = p2->south;
			}
			p2->east = p2->east->east;
			p2->south = p2->south->east;
		}
		else {
			p2 = p1;
			for (int m = 0; m < i - 1; m++) {
				p2 = p2->east;
			}
			for (int m = 0; m < num_rows - 1; m++) {
				p2->east = p2->east->east;
				p2 = p2->south;
			}
			p2->east = p2->east->east;
			p2->south = p2->south->east;
		}
	}
	//each value in ring multiple 3
	ring Threetimes() {
		ring R1(*this);
		shared_ptr<node> p1 = R1.head;
		for (int m = 0; m < (R1.num_cols)*(R1.num_rows); m++) {
			p1->value = 3 * (p1->value);
			p1 = p1->east;
		}
		return R1;
	}
};

//overload operator<<
ostream & operator<<(ostream & str, const ring &t) {
	int num = 0;
	shared_ptr<node> p = t.head;
	for (int n = 0; n < t.num_rows*t.num_cols; n++) {
		str << p->value << " ";
		num++;
		if (num == t.num_cols) {
			str << endl;
			num = 0;
		}
		p = p->east;
	}
	return str;
}

int main() {
	ring R1(4, 6);
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	getchar();
	getchar();
	return 0;
}