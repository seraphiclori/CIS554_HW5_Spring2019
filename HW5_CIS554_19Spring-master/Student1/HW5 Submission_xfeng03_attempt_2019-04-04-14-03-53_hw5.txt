//HW5 Due: April 7 (Sunday) at 11:59PM
//xfeng03@syr.edu
//842625562
//Xueming Feng
#include <iostream>
#include <memory>

using namespace std;

class node {
  public:
    shared_ptr<node> east;
    shared_ptr<node> south;
    int              value;
    node() {}
    node(int i) { value = i; }
};

class ring {
  public:
    //Implement all functions described below
    //funciton operator[] can be invoked by other functions

    shared_ptr<node> head;
    int              num_rows;
    int              num_cols;
    ring() {}
    ring(int i, int j); //constructor
                        //i rows and j cols
                        //values from 0 to i*j-1
    //See the photo for ring structures.

    ~ring();                       //destructor; do as little work as possible
    ring(const ring& r);           //copy constructor
    ring(ring&& r);                //move constructor
    void operator=(ring&& r);      //R-value operator=
    void operator=(const ring& r); //L-value operator=
    ring(const initializer_list<int>& V); //see the explanation in main function
    int& operator[](int a);
    int& operator[](
        pair<int, int> p); //first is row number and second is col number

    void DelCol(int i); //delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
};

ring::~ring() {
    if (!head) return;
    auto right = head->east;
    auto down  = head->south;
    for (int i = 0; i < num_rows - 2; i++) {
        auto downN = down->south;
        down->east.reset();
        down->south.reset();
        down = downN;
    }
    for (int i = 0; i < num_cols - 2; i++) {
        auto rightN = right->east;
        right->east.reset();
        right->south.reset();
        right = rightN;
    }
}

ring ring::Threetimes() {
    ring ou;
    ou.num_rows = num_rows;
    ou.num_cols = num_cols;
    shared_ptr<node> temp(new node());
    ou.head = temp;
    for (int x = 0; x < num_rows * num_cols; x++) {
        temp->value = head->value * 3;
        head        = head->east;
        shared_ptr<node> temp2(new node());
        if (x == num_rows * num_cols - 1)
            temp->east = ou.head;
        else {
            temp->east = temp2;
            temp       = temp2;
        }
    }
    //add vertical pointers in

    shared_ptr<node> down  = ou.head;
    shared_ptr<node> up    = ou.head;
    shared_ptr<node> right = ou.head;
    for (int r = 0; r < num_cols; r++) {
        right = right->east;
        for (int y = 0; y < num_rows - 1; y++) {
            for (int x = 0; x < num_cols; x++) { down = down->east; }
            up->south = down;
            up        = down;
        }
        if (r == num_cols - 1)
            up->south = ou.head;
        else {
            up->south = right;
            up        = right;
            down      = right;
        }
    }

    return ou;
}

void ring::operator=(const ring& r) {
    num_rows               = r.num_rows;
    num_cols               = r.num_cols;
    shared_ptr<node> rhead = r.head;
    shared_ptr<node> temp(new node());
    head = temp;
    for (int x = 0; x < num_rows * num_cols; x++) {
        temp->value = rhead->value;
        rhead       = rhead->east;
        shared_ptr<node> temp2(new node());
        if (x == num_rows * num_cols - 1)
            temp->east = head;
        else {
            temp->east = temp2;
            temp       = temp2;
        }
    }
    //add vertical pointers in

    shared_ptr<node> down  = head;
    shared_ptr<node> up    = head;
    shared_ptr<node> right = head;
    for (int r = 0; r < num_cols; r++) {
        right = right->east;
        for (int y = 0; y < num_rows - 1; y++) {
            for (int x = 0; x < num_cols; x++) { down = down->east; }
            up->south = down;
            up        = down;
        }
        if (r == num_cols - 1)
            up->south = head;
        else {
            up->south = right;
            up        = right;
            down      = right;
        }
    }
}

void ring::operator=(ring&& r) {
    num_rows   = r.num_rows;
    num_cols   = r.num_cols;
    r.num_rows = 0;
    r.num_cols = 0;
    head       = r.head;
    r.head.reset();
}

ring::ring(ring&& r) {
    num_rows   = r.num_rows;
    num_cols   = r.num_cols;
    r.num_rows = 0;
    r.num_cols = 0;
    head       = r.head;
    r.head.reset();
}

ring::ring(const ring& r) {
    num_rows               = r.num_rows;
    num_cols               = r.num_cols;
    shared_ptr<node> rhead = r.head;
    shared_ptr<node> temp(new node());
    head = temp;
    for (int x = 0; x < num_rows * num_cols; x++) {
        temp->value = rhead->value;
        rhead       = rhead->east;
        shared_ptr<node> temp2(new node());
        if (x == num_rows * num_cols - 1)
            temp->east = head;
        else {
            temp->east = temp2;
            temp       = temp2;
        }
    }
    //add vertical pointers in

    shared_ptr<node> down  = head;
    shared_ptr<node> up    = head;
    shared_ptr<node> right = head;
    for (int r = 0; r < num_cols; r++) {
        right = right->east;
        for (int y = 0; y < num_rows - 1; y++) {
            for (int x = 0; x < num_cols; x++) { down = down->east; }
            up->south = down;
            up        = down;
        }
        if (r == num_cols - 1)
            up->south = head;
        else {
            up->south = right;
            up        = right;
            down      = right;
        }
    }
}

void ring::DelCol(int i) {
    if (num_cols <= i) return;
    shared_ptr<node> start = head;
    //when deleting first col
    if (i == 0) {
        head  = head->east;
        start = head;
        for (int e = 0; e < num_cols - 2; e++) { start = start->east; }
        for (int t = 0; t < num_rows; t++) {
            start->east = start->east->east;
            if (t != num_rows - 1) start = start->south;
        }
        start->east  = head;
        start->south = head;
        num_cols--;
        return;
    }
    //remove east pointer
    for (int e = 0; e < i - 1; e++) { start = start->east; }
    for (int t = 0; t < num_rows; t++) {
        start->east = start->east->east;
        if (t != num_rows - 1) start = start->south;
    }
    if (i == num_cols - 1)
        start->south = head;
    else
        start->south = start->south->east;
    num_cols--;
}

int& ring::operator[](pair<int, int> p) {
    shared_ptr<node> t = head;
    for (int i = 0; i <= p.first; i++) { t = t->south; }
    for (int i = 0; i <= p.second; i++) { t = t->east; }
    return t->value;
}

int& ring::operator[](int a) {
    shared_ptr<node> p = head;
    for (int i = 0; i <= a; i++) { p = p->east; }
    return p->value;
}

ring::ring(const initializer_list<int>& V) {
    auto it  = V.begin();
    num_rows = *it;
    it++;
    num_cols = *it;
    it++;

    shared_ptr<node> temp(new node());
    head = temp;
    for (int x = 0; x < num_rows * num_cols; x++) {
        temp->value = *it;
        it++;
        shared_ptr<node> temp2(new node());
        if (x == num_rows * num_cols - 1)
            temp->east = head;
        else {
            temp->east = temp2;
            temp       = temp2;
        }
    }
    //add vertical pointers in

    shared_ptr<node> down  = head;
    shared_ptr<node> up    = head;
    shared_ptr<node> right = head;
    for (int r = 0; r < num_cols; r++) {
        right = right->east;
        for (int y = 0; y < num_rows - 1; y++) {
            for (int x = 0; x < num_cols; x++) { down = down->east; }
            up->south = down;
            up        = down;
        }
        if (r == num_cols - 1)
            up->south = head;
        else {
            up->south = right;
            up        = right;
            down      = right;
        }
    }
}

ring::ring(int i, int j) {
    //a long link of shared nodes without column
    num_rows               = i;
    num_cols               = j;
    int              pivot = 0;
    shared_ptr<node> temp(new node(pivot));
    head = temp;
    for (int x = 0; x < i * j; x++) {
        temp->value = pivot + x;
        shared_ptr<node> temp2(new node());
        if (x == i * j - 1)
            temp->east = head;
        else {
            temp->east = temp2;
            temp       = temp2;
        }
    }
    //add vertical pointers in

    shared_ptr<node> down  = head;
    shared_ptr<node> up    = head;
    shared_ptr<node> right = head;
    for (int r = 0; r < j; r++) {
        right = right->east;
        for (int y = 0; y < i - 1; y++) {
            for (int x = 0; x < j; x++) { down = down->east; }
            up->south = down;
            up        = down;
        }
        if (r == j - 1)
            up->south = head;
        else {
            up->south = right;
            up        = right;
            down      = right;
        }
    }
}

//overload operator<<
ostream& operator<<(ostream& str, const ring& R) {
    shared_ptr<node> p = R.head;
    if (!R.head) { return str; }
    str << "South: " << endl;
    str << p->value << " ";
    p = p->south;
    while (p != R.head) {
        str << p->value << " ";
        p = p->south;
    }
    str << endl << "East: " << endl;
    str << p->value << " ";
    p = p->east;
    while (p != R.head) {
        str << p->value << " ";
        p = p->east;
    }
    return str;
}

int main() {
    ring R1(4, 6); //24 numbers from 0 to 23 will be initialized to nodes.
    cout << R1 << endl;
    R1[14]     = 1000;
    R1[{2, 4}] = 2000;
    cout << R1[14] << " " << R1[{2, 4}] << endl;
    R1.DelCol(3);
    cout << R1 << endl;
    R1.DelCol(4);
    cout << R1 << endl;
    R1.DelCol(0);
    cout << R1 << endl;
    shared_ptr<ring> p1 = make_shared<ring>(3, 5);
    cout << *p1 << endl;
    p1.reset();
    ring R2 = {3,   5,   10,  20,   30,   40,   50,   100, 200,
               300, 400, 500, 1000, 2000, 3000, 4000, 5000};
    //first two numbers are num_rows and num_cols; followed by values of nodes of ring
    cout << R2 << endl;
    ring R3(R2);
    cout << R3 << endl;
    ring R4;
    R4 = R3;
    cout << R4 << endl;
    ring R5;
    R5 = R4.Threetimes();
    cout << R5 << endl;

    getchar();
    getchar();
    return 0;
}