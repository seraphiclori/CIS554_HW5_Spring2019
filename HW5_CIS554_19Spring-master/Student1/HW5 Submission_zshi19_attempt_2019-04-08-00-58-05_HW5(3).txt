//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j)//constructor
	//i rows and j cols
	//values from 0 to i*j-1
	//See the photo for ring structures.
	{
		num_rows = i;
		num_cols = j;
		int total = i * j;
		int line = 1;
		shared_ptr<node> p, pH;
		if (total <= 0) {
			p->east.reset();
		}
		//For the speical condital (1,x) or (x,1)
		if (i == 1) {
			for (int m = 0; m < j; m++) {
				p = make_shared<node>(j - 1 - m);
				p->east = head;
				head = p;
			}
			return;
		}
		else if (j == 1) {
			for (int m = 0; m < i; m++) {
				p = make_shared<node>(i - 1 - m);
				p->south = head;
				head = p;
			}
			return;
		}
		// Create east direction circle
		for (int m = 0; m < total; m++) {
			p = make_shared<node>(total - 1 - m);
			if (m == 0)
				pH = p;
			p->east = head;
			head = p;
			if (m == total - 1) {
				pH->east = head;
			}
		}
		// connect south direction circle
		shared_ptr<node> p1 = head, p2, p3, p4, p5;
		if (p1) {
			p2 = p1;
			p3 = p1;
			p4 = p1->east;
			p5 = p1;
		}
		//get start node of next row
		for (int n = 0; n < j; n++) {
			p3 = p3->east;
		}
		//cout << " p3 " << p3->value << " p4 " << p4->value << " p5 " << p5->value << endl;
		//cout << "linking south" << endl;
		for (int m = 0; m < i - 1; m++) {
			for (int n = 0; n < j; n++) {
				if (n != j) {
					//cout << " p2 " << p2->value << " p3 " << p3->value << endl;
					p2->south = p3;
				}

				p2 = p2->east;
				p3 = p3->east;
			}
		}
		for (int m = 0; m < i; m++) {
			if (p5->south) {
				//cout << " p5 " << p5->value << endl;
				p5 = p5->south;
			}
		}
		//cout << " p5 after for " << p5->value << endl;
		//cout <<" link edge "<<endl;
		for (int m = 1; m < j; m++) {
			//cout << " p5 " << p5->value << " p4 " << p4->value <<" m "<<m<< " j "<< j <<endl;
			p5->south = p4;
			p4 = p4->east;
			p5 = p5->east;
			if (m + 1 == j) {
				//cout << " p5 " << p5->value << " head " << head->value << endl;
				p5->south = head;
			}
		}
	}
	/*
	~ring() {//destructor; do as little work as possible
		shared_ptr<node> p = head, p1, p2;
		p1 = p;
		for (int i = 1; i < num_cols; i++) {
			p = p->east;
		}
		for (int i = 1; i < num_rows; i++) {
			p2 = p->south;
			p->east.reset();
			p->south.reset();
			p = p2;
		}
		p1->east.reset();
		p1->south.reset();
		cout << "Leaving Destructor" << endl;
	}*/

	ring(const ring &r) { //copy constructor
		this->num_rows = r.num_rows;
		this->num_cols = r.num_cols;
		//cout << " num_rows " << num_rows << " num_cols " << num_cols << " r.num_rows " << r.num_rows << " r.num_cols " << r.num_cols << endl;
		ring r1(num_rows, num_cols);
		this->head = r1.head;
		shared_ptr<node> p1 = r1.head;
		shared_ptr<node> p2 = r.head;
		//cout<<" p1 "<<p1->value<<" p2 "<<p2->value<<" p1->east "<<p1->east->value<<endl;
		do {
			//cout << " p1 " << p1->value << " p2 " << p2->value << endl;
			p1->value = p2->value;
			//cout << " p1-> " << p1->value << " p2-> " << p2->value << endl;
			p1 = p1->east;
			p2 = p2->east;
            //cout << " p1--> " << p1->value << " p2--> " << p2->value << endl;
		} while (p2 != r.head);
		this->head = r1.head;
		//cout << "Leaving Copy Contructor" << endl;
	}

	ring(ring &&r) {//move constructor
		this->head = r.head;
		num_cols = r.num_cols;
		num_rows = r.num_rows;
		//cout << " head " << this->head->value << endl;
		r.head = nullptr;
		cout << "Leaving Move Constructor" << endl;
	}
	
	void operator=(ring &&r)//R-value operator=
	{
		shared_ptr<node> p = this->head, p1, p2;
		p1 = p;
		if (p) {
			for (int i = 1; i < num_cols; i++) {
				p = p->east;
			}
			for (int i = 1; i < num_rows; i++) {
				p2 = p->south;
				p->east.reset();
				p->south.reset();
				p = p2;
			}
			p1->east.reset();
			p1->south.reset();
			cout<<" Leaving destructor "<<endl;
		}
		this->head.reset();
		num_cols = r.num_cols;
		num_rows = r.num_rows;
		head = r.head;
		r.head.reset();
		r.num_rows = 0;
		r.num_cols = 0;
		cout << "Leaving R-value Operator=" << endl;
	}
	void operator=(const ring &r) { //L-value operator=
		shared_ptr<node> p = this->head, p1, p2;
		p1 = p;
		if (p) {
			for (int i = 1; i < num_cols; i++) {
				p = p->east;
			}
			for (int i = 1; i < num_rows; i++) {
				p2 = p->south;
				p->east.reset();
				p->south.reset();
				p = p2;
			}
			p1->east.reset();
			p1->south.reset();
			cout<<" Leaving destructor "<<endl;
		}
		this->num_rows = r.num_rows;
		this->num_cols = r.num_cols;
		//cout<<" num_rows "<< num_rows << " num_cols "<< num_cols<< " r.num_rows "<< r.num_rows<< " r.num_cols "<< r.num_cols <<endl;
		ring r1(num_rows, num_cols);
		p1 = r1.head;
		p2 = r.head;
		this->head = r1.head;
		do{
			p1->value = p2->value;
			p1 = p1->east;
			p2 = p2->east;
		} while (p1 != r1.head);
		cout << "Leaving L-value Operator=" << endl;
	}
	ring(const initializer_list<int> &V) {//see the explanation in main function */
		auto it = V.begin();
		int i = *it;
		num_rows = *it;
		it++;
		int j = *it;
		num_cols = *it;
		it++;

		ring R(i, j);
		//cout << R << endl;
		shared_ptr<node> p = R.head;
		while (it != V.end()) {
			p->value = (*it);
			p = p->east;
			it++;
		}
		this->head = R.head;
		//cout << R << endl;
		cout << "Leaving Initalizer" << endl;
	}
	int & operator[](int a) {
		shared_ptr<node>  p = head;
		while (a > 0) {
			p = p->east;
			a--;
		}
		return p->value;
	}
	int & operator[](pair<int, int> p) { //first is row number and second is col number
		int rows = p.first;
		int cols = p.second;
		shared_ptr<node>  p1 = head;
		while (rows > 1) {
			p1 = p1->south;
			rows--;
		}
		while (cols > 1) {
			p1 = p1->east;
			cols--;
		}
		return p1->value;
	}

	void DelCol(int i) {//delete col i of *this
		cout << "DelCol " << i << endl;
		if (i > this->num_cols) {
			cout << "Col number out of  range" << endl;
			return;
		}
		shared_ptr<node> p = this->head;
		shared_ptr<node> p1, p2, p3;
		//i is left edge
		if (i == 0) {
			p1 = p;
			p2 = p;
			p3 = p->east->south;
			for (int m = 1; m < this->num_cols; m++) {
				p2 = p2->east;
			}
			//cout << " p2 " << p2->value <<" p3 "<<p3->value<<endl;
			for (int m = 1; m < this->num_rows; m++) {
				//cout << " p2 " << p2->value << " p2e " << p2->east->value << " p3 " << p3->value << " p3s " << p3->south->value << endl;
				p2->east = p3;
				//cout << " p2e after del " << p2->east->value << endl;
				p2 = p2->south;
				p3 = p3->south;
				if (m == this->num_rows - 1) {
					//cout << " p2 last " << p2->value << endl;
					p2->south = p->east;
					p2->east = p->east;
					//cout << " p2e " << p2->east->value << " p2s " << p2->south->value << endl;
				}
			}
			head = p2->east;
			this->num_cols--;
			cout << "Leaving DelCol" << endl;
			return;
		}
		//i is right edge
		if (i == this->num_cols - 1) {
			p1 = p;
			p2 = p->south;
			p3 = p->east;
			for (int m = 1; m < this->num_cols - 1; m++) {
				p1 = p1->east;
			}
			//cout << " p1 " << p1->value << endl;
			for (int m = 1; m < this->num_rows; m++) {
				//cout << " p1 " << p1->value << " p1e " << p1->east->value << " p2 " << p2->value <<" p2s "<<p2->south->value<<endl;
				p1->east = p2;
				//cout << " p1e after del " << p1->east->value << endl;
				p1 = p1->south;
				p2 = p2->south;
				if (m == this->num_rows - 1) {
					//cout << " p1 last " << p1->value << endl;
					p1->east = p;
					p1->south = p;
					//cout << " p1e " << p1->east->value << " p1s " << p1->south->value << endl;
				}
			}
			this->num_cols--;
			cout << "Leaving DelCol" << endl;
			return;
		}
		//i between edge
		p1 = p;
		for (int m = 0; m < i - 1; m++) {
			p1 = p1->east;
		}
		//cout << " p1 " << p1->value <<endl;
		p2 = p1->east->east;
		//cout << " p2 " << p2->value << endl;
		p3 = p2;
		//cout << " p3 " << p3->value << endl;
		for (int m = 0; m < this->num_rows; m++) {
			//cout << " p1 " << p1->value <<" p1e "<<p1->east->value<<" p2 "<<p2->value<<endl;
			p1->east = p2;
			//cout << " p1e after del " << p1->east->value << endl;
			p1 = p1->south;
			p2 = p2->south;
			if (m == this->num_rows - 1) {
				//cout << " p2s " << p2->south->value <<" p3 "<<p3->value<<endl;
				p2->south = p3;
			}
		}
		this->num_cols--;
		cout << "Leaving DelCol" << endl;
	}

	ring Threetimes() {
		int i = this->num_rows;
		int j = this->num_cols;
		ring tmp(i, j);
		shared_ptr<node> p1 = tmp.head;
		shared_ptr<node> p2 = this->head;
		if (p1 && p2) {
			do {
				p1->value = 3*(p2->value);
				//cout<<" p1 "<<p1->value<<" p2 "<<p2->value<<endl;
				p1 = p1->east;
				p2 = p2->east;
			} while (p2 != this->head);
		}
		else {
			cout<<"Error Threetimes"<<endl;
		}
		//cout << tmp << endl;
		cout<<"Leaving Threetimes"<<endl;
		return tmp;
	}
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	friend ostream & operator<<(ostream &str, const ring &R);
};

//overload operator<<
//east direction
ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	if (!R.head) {
		str << "empty " << endl;
		return str;
	}
	for (int i = 0; i < R.num_rows; i++) {
		str << p->value << " ";
		p = p->east;
		for (int j = 1; j < R.num_cols; j++) {
			str << p->value << " ";
			p = p->east;
			if (j == R.num_cols - 1)
				str << endl;
		}
	}
	return str;
}
/*
 //overload operator << for south direction
 ostream & operator<<(ostream &str, const ring &R) {
 shared_ptr<node> p = R.head;
 if (!R.head) { return str; }
 for (int i = 0; i < R.num_cols; i++) {
 str << p->value << " ";
 p = p->south;
 for (int j = 1; j < R.num_rows; j++) {
 str << p->value << " ";
 p = p->south;
 if (j == R.num_rows - 1)
 str << endl;
 }
 }
 return str;
 }
 */
int main() {
	
	 ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	 cout << R1 << endl;

	 R1[14] = 1000;
	 R1[{2, 4}] = 2000;
	 cout << R1[14] << " " << R1[{2, 4}] << endl;
	 cout << R1 << endl;

	 R1.DelCol(3);
	 cout << R1 << endl;
	 R1.DelCol(4);
	 cout << R1 << endl;
	 R1.DelCol(0);
	 cout << R1 << endl;
	 
	  shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	  cout << *p1 << endl;
	  p1.reset();
	  ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	  //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	  cout << R2 << endl;
	  ring R3(R2);
	  cout << R3 << endl;
	  ring R4;
	  R4 = R3;
	  cout << R4 << endl;
	 
	 ring R5;
	 R5 = R4.Threetimes();
	 cout << R5 << endl;
	 
	getchar();
	getchar();
	return 0;
}
