// HW5 Due : April 7 (Sunday)at 11 : 59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//function operator[] can be invoked by other functions
	shared_ptr<node> head;
	shared_ptr<node> p1;
	shared_ptr<node> p2;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j) {
		i = num_rows;
		j = num_cols;
		// for loop for rows
		for (int i = 0; i < i*j - 1; i++) {
			p1->value = i;
			p1 = head;
			if (!head) {
				head = p1;
			}
			else {
				p1->east = head;
				head = p1;
				p1->east = p1;
			}
		}
		// for loop for column
		for (int j = 0; j < i*j - 1; j++) {
			p2->value = j;
			p2 = head;
			if (!head) {
				head = p2;
			}
			else {
				p2->south = head;
				head = p2;
				p2->south = p2;
			}
		}
		// and connect them for all directions
	}//constructor
	//i rows and j cols
	//values from 0 to i*j-1
	//See the photo for ring structures.

	~ring() {
		head->east.reset();
		head->south.reset();
	}//destructor; do as little work as possible

	ring(const ring &r) {
		*(head) = *(r.head);
	} //copy constructor

	ring(ring &&r) {
		head = r.head;
		r.head = nullptr;

	}//move constructor
	void operator=(ring &&r) {
		head = r.head;
		r.head = nullptr;
	}//R-value operator=

	void operator=(const ring &r) {
		*head = *(r.head);
	} //L-value operator=

	ring(const initializer_list<int> &V) {
		auto it = V.begin();
		while (it != V.end()) {
			shared_ptr<node> p = make_shared<node>(*it);
			if (!head) { head = p;  p->east = p; }
			else {
				head->east = p;
				head = p;
				p->east = head;
			}
			it++;
		}

	}//see the explanation in main function
	int & operator[](int a) {
		// find the int from the order of the nodes
		int b; 
		while (head != NULL) {
		
		}

		return b;
	}
	int & operator[](pair<int, int> p) {
		// do the same as operator[](int a)
		int a, b;

		return a,b;
	} //first is row number and second is col number

	void DelCol(int i) {
		return;

	}//delete col i of *this
	ring Threetimes() {
		ring a;
		return a;
	}
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<

ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	if (!R.head) { return str; }
	str << p->value << " ";
	p = p->east;
	while (p != R.head) {
		str << p->value << " ";
		p = p->east;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}