//HW5 Due: April 7 (Sunday) at 11:59PM
//I assumed  R1[{2, 4} means third  row and ﻿﻿﻿﻿﻿fifth  col and 
//R1[14] means 14th, because you said in email operator[] starts from 0. 

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream& operator<<(ostream& os, const ring &a);

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}

ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;
	head = make_shared<node>(0);
	shared_ptr<node> it1 = head;
	for (int a = 1; a < i*j; a++)
	{
		shared_ptr<node> p1 = make_shared<node>(a);
		it1->east = p1;
		it1 = p1;
	}
	it1->east = head;
	it1 = head;
	shared_ptr<node> it2 = head;
	shared_ptr<node> it3 = head->east;
	int temp = j;
	int count = 1;
	int c = 0;
	for (int a = 0; a < i*j; a++)
	{
		if (a == temp)
		{
			if (count < i)
			{
				it2->south = it1;
				temp = temp + j;
				it2 = it1;
				count++;
			}
		}

		if (count == i)
		{
			c++;
			if (c == j)
			{
				it2->south = head;
				break;
			}
			else
			{
				it1 = it3;
				it2->south = it1;
				temp = j + 1;
				it2 = it1;
				count = 1;
				it3 = it3->east;
				a = c;
			}
		}
		it1 = it1->east;
	}


}


int& ring::operator[](int a)
{
	shared_ptr<node> it = head;
	for (int i = 0; i < num_rows * num_cols; i++)
	{
		if (i == a)
			return it->value;
		it = it->east;
	}
}

int& ring::operator[](pair<int, int> p)
{
	if (p.first == 0 && p.second == 0)
		return head->value;
	shared_ptr<node> it = head;
	if (p.first == 0)
	{
		for (int i = 0; i < num_rows * num_cols; i++)
		{
			if (i == p.second)
				return it->value;
			it = it->east;
		}
	}
	else if (p.second == 0)
	{
		for (int i = 0; i < num_rows; i = i + 1)
		{
			it = it->south;
			if (i == p.first)
				return it->value;
			
		}
	}
	else 
	{
		for (int i = 0; i < num_rows * num_cols; i++)
		{
			if (i == p.first * (p.second + 1))
				return it->value;
			it = it->east;
		}
	}
	
}

ostream& operator<<(ostream& os, const ring &a)
{
	shared_ptr<node> it = a.head;
	
	for (int i = 0; i < a.num_rows; i++)
	{
		for (int j = 0; j < a.num_cols; j++)
		{
			//os.width(5);
			os << it->value<<" ";
			it = it->east;
		}
		os << endl;
	}

	return os;
}

void ring::DelCol(int i)
{
	shared_ptr<node> it1;
	if (i == num_cols-1)
	{
		for (int a = 0; a < num_cols * num_rows; a++)
		{
			if (a == 0)
				it1 = head;
			else if (a%i != 0)
				it1 = it1->east;
			else
			{
				it1->east = it1->east->east;
				it1 = it1->east;
			}

			if (a == num_cols * num_rows - 2)
			{
				it1->south = head;
			}
		}
	}
	else if (i == 0)
	{
		int c = 1;
		for (int a = 1; a < num_cols * num_rows; a++)
		{
			if (a == 1)
			{
				it1 = head->east;
				head = it1;
			}
			else if (a - num_cols * c != 0)
			{
				it1 = it1->east;
			}	
			else
			{
				it1->east = it1->east->east;
				it1 = it1->east;
				a++;
				c++;
			}

			if (a == num_cols * num_rows-1)
			{
				it1->south = head;
			}
		}
	}
	else
	{
		int c = 0;
		shared_ptr<node> temp;
		bool g = true;
		for (int a = 0; a < num_cols * num_rows; a++)
		{
			if (a == 0)
			{
				it1 = head;
			}
			else if (a - (i + (num_cols*c)) != 0)
			{
				it1 = it1->east;
			}
			else
			{
				it1->east = it1->east->east;
				it1 = it1->east;
				if (g)
				{
					temp = it1;
					g = false;
				}
				a++;
				c++;
			}

			if (a == (i + num_cols *( num_rows -1)))
			{
				it1->south = temp;
			}
		}
	}



	num_cols--;
}

ring::ring(const initializer_list<int> &V)
{
	int i, j;
	auto it = V.begin();
	i = *it;
	it++;
	j = *it;
	it++;
	num_rows = i;
	num_cols = j;
	head = make_shared<node>(*it);
	it++;
	shared_ptr<node> it1 = head;
	for (int a = 1; a < i*j; a++,it++)
	{
		shared_ptr<node> p1 = make_shared<node>(*it);
		it1->east = p1;
		it1 = p1;
	}
	it1->east = head;
	it1 = head;
	shared_ptr<node> it2 = head;
	shared_ptr<node> it3 = head->east;
	int temp = j;
	int count = 1;
	int c = 0;
	for (int a = 0; a < i*j; a++)
	{
		it1 = it1->east;
		if (a == temp)
		{
			if (count < i)
			{
				it2->south = it1;
				temp = temp + j;
				it2 = it1;
				count++;
			}
		}

		if (count == i)
		{
			c++;
			if (c == j)
			{
				it2->south = head;
				break;
			}
			else
			{
				it1 = it3;
				it2->south = it1;
				temp = j + 1;
				it2 = it1;
				count = 1;
				it3 = it3->east;
				a = c;
			}
		}

	}

}


ring::ring(const ring&r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	shared_ptr<node> it1 = head;
	shared_ptr<node> it2 = r.head;
	it2 = it2->east;

	for (it2; it2 != r.head; it2 = it2->east)
	{
		shared_ptr<node> p1 = make_shared<node>(it2->value);
		it1->east = p1;
		it1 = p1;
	}
	it1->east = head;
	it1 = head;
	it2 = head;
	shared_ptr<node> it3 = head->east;
	int i= num_rows;
	int j = num_cols;
	int temp = j;
	int count = 1;
	int c = 0;
	for (int a = 0; a < i*j; a++)
	{
		it1 = it1->east;
		if (a == temp)
		{
			if (count < i)
			{
				it2->south = it1;
				temp = temp + j;
				it2 = it1;
				count++;
			}
		}

		if (count == i)
		{
			c++;
			if (c == j)
			{
				it2->south = head;
				break;
			}
			else
			{
				it1 = it3;
				it2->south = it1;
				temp = j + 1;
				it2 = it1;
				count = 1;
				it3 = it3->east;
				a = c;
			}
		}
	}
}

ring::ring(ring &&r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	shared_ptr<node> it1 = head;

	for (auto i = r.head->east; i != r.head; i = i->east)
	{
		it1->east = i;
		it1 = it1->east;

	}
	
	r.head.reset();
	r.num_cols = 0;
	r.num_rows = 0;
}


void ring::operator=(ring &&r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	head = r.head;
	shared_ptr<node> it1 = head;
	for (auto i = r.head->east; i != r.head; i = i->east)
	{
		it1->east = i;
		it1 = it1->east;
	}

	r.head.reset();
	r.num_cols = 0;
	r.num_rows = 0;
	
}

void ring::operator=(const ring &r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	shared_ptr<node> it1 = head;
	shared_ptr<node> it2 = r.head;
	it2 = it2->east;

	for (it2; it2 != r.head; it2 = it2->east)
	{
		shared_ptr<node> p1 = make_shared<node>(it2->value);
		it1->east = p1;
		it1 = p1;
	}
	it1->east = head;
	it1 = head;
	it2 = head;
	shared_ptr<node> it3 = head->east;
	int i = num_rows;
	int j = num_cols;
	int temp = j;
	int count = 1;
	int c = 0;
	for (int a = 0; a < i*j; a++)
	{
		it1 = it1->east;
		if (a == temp)
		{
			if (count < i)
			{
				it2->south = it1;
				temp = temp + j;
				it2 = it1;
				count++;
			}
		}

		if (count == i)
		{
			c++;
			if (c == j)
			{
				it2->south = head;
				break;
			}
			else
			{
				it1 = it3;
				it2->south = it1;
				temp = j + 1;
				it2 = it1;
				count = 1;
				it3 = it3->east;
				a = c;
			}
		}
	}
}

ring ring::Threetimes()	
{
	head->value *= 3;
	shared_ptr<node> it = head;
	for (auto i = it->east; i != head; i = i->east)
	{
		i->value *= 3;
	}
	return *this;
}

ring::~ring()
{
	head.reset();
	num_cols = 0;
	num_rows = 0;
}