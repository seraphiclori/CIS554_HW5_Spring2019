//HW3
//Name: Samarth Shetty
//Email: sshett03@syr.edu
//SUID: 201170032
//HW5 Due: April 7 (Sunday) at 11:59PM

#include <iostream>
#include <memory>


using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j); //constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r);//copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);
	
	//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream& operator<<(std::ostream& out, const ring& r) {
	shared_ptr<node> temp;
	temp = r.head;

	out << "\n\n";
	
	for (int i = 0; i <= (r.num_rows*r.num_cols) - 1; i++) {
		out << temp->value << " ";
		temp = temp->east;
		if ((i + 1) % r.num_cols == 0) {
			out << "\n";
		}
	}

	out << "\n\n";
	return out;

}

ring::~ring() {
	if (head != nullptr) {
		shared_ptr<node> current = head;
		for (int i = 0; i < num_rows * num_cols; i++) {
			shared_ptr<node> temp = current->east;
			current.reset();
			current = temp;
		}
		current = nullptr;
	}

}

ring::ring(int i, int j) {
	num_rows = i;
	num_cols = j;
	shared_ptr<node> first = make_shared<node>();
	shared_ptr<node> temp = make_shared<node>();
	head = first;
	for (int k = 0; k <= (i*j) - 2; k++) {
		shared_ptr<node> newnode = make_shared<node>();
		first->east = newnode;
		first = first->east;
	}
	first->east = head;
	first = head;

	int l;
	for (int k = 0; k <= (i*j) - 1; k++) {
		temp = first;
		l = k + 1;
		if (k <= ((i - 1)*j) - 1) {
			while ((l % j) != (k % j) && l <= ((i*j) - 1)) {
				l++;
				temp = temp->east;
			}
			temp = temp->east;
			first->south = temp;
		}
		else {
			l = 0;
			temp = head;
			while ((l != ((k + 1) % j)) && (l <= (i*j) - 1)) {
				l++;
				temp = temp->east;
			}
			first->south = temp;
		}

		first = first->east;
	}


	shared_ptr<node> val = head;
	for (int v = 0; v <= (i*j -1); v++) {
		val->value = v;
		val = val->east;
	}

}

ring::ring(const ring &r) : num_rows(r.num_rows), num_cols(r.num_cols)
{
	//creating data structure:
	shared_ptr<node> first = make_shared<node>();
	shared_ptr<node> temp = make_shared<node>();
	head = first;
	for (int k = 0; k <= (num_rows*num_cols) - 2; k++) {
		shared_ptr<node> newnode = make_shared<node>();
		first->east = newnode;
		first = first->east;
	}
	first->east = head;
	first = head;

	int l;
	for (int k = 0; k <= (num_rows*num_cols) - 1; k++) {
		temp = first;
		l = k + 1;
		if (k <= ((num_rows - 1)*num_cols) - 1) {
			while ((l % num_cols) != (k % num_cols) && l <= ((num_rows*num_cols) - 1)) {
				l++;
				temp = temp->east;
			}
			temp = temp->east;
			first->south = temp;
		}
		else {
			l = 0;
			temp = head;
			while ((l != ((k + 1) % num_cols)) && (l <= (num_rows*num_cols) - 1)) {
				l++;
				temp = temp->east;
			}
			first->south = temp;
		}

		first = first->east;
	}

	temp = r.head;
	first = head;

	//copying the values from other data structure
	for (int i = 0; i < num_rows*num_cols; i++) {
		first->value = temp->value;
		first = first->east;
		temp = temp->east;
	}
	
}

ring::ring(ring &&r) : head(r.head), num_rows(r.num_rows), num_cols(r.num_cols)
{
	r.head = nullptr;
}

void ring::operator=(ring &&r)
{
	if (this != &r) 
	{
		if (head != nullptr) {
			shared_ptr<node> current = head;
			for (int i = 0; i < num_rows * num_cols; i++) {
				shared_ptr<node> temp = current->east;
				current.reset();
				current = temp;
			}
			current = nullptr;
		}

		head = r.head;
		num_cols = r.num_cols;
		num_rows = r.num_rows;
		r.head.reset();
	}
}

void ring::operator=(const ring &r)
{
	if (this != &r)
	{
		if (head != nullptr) {
			shared_ptr<node> current = head;
			for (int i = 0; i < num_rows * num_cols; i++) {
				shared_ptr<node> temp = current->east;
				current.reset();
				current = temp;
			}
			current = nullptr;
		}

		head = r.head;
		num_cols = r.num_cols;
		num_rows = r.num_rows;
	}
}

ring::ring(const initializer_list<int> &V) : ring( *V.begin(), (V.size()-2)/(*V.begin()) )
{
	shared_ptr<node> temp;
	temp = this->head;
	auto it = V.begin();
	for (it = it + 2; it != V.end(); it++) {
		temp->value = *it;
		temp = temp->east;
	}
}


void ring::DelCol(int i) {

	if (!head) {
		return;
	}

	shared_ptr<node> curr;
	shared_ptr<node> prev;

	curr = head;
	
	if (i == 0) {
		head = head->east;
		for (int k = 1; k <= num_cols; k++) {
			prev = curr;
			curr = curr->east;
		}
	}
	else {
		for (int k = 1; k < num_cols; k++) {
			if (k-1 == i) {
				break;
			}
			prev = curr;
			curr = curr->east;
		}
	}

	for (int k = 1; k <= num_rows; k++) {
		prev->east = curr->east;
		prev = prev->south;
		curr = curr->south;

		if (k == num_rows) {
			prev->south = curr->south;
		}
	}

	if (num_cols != 0) {
		num_cols--;
	}
}

int & ring::operator[](int a) {
	shared_ptr<node> temp = make_shared<node>();
	temp=head;

	for (int i = 1; i < a; i++) {
		temp = temp->east;
	}

	return temp->value;

}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> temp = make_shared<node>();
	temp = head;

	for (int i = 1; i < p.first; i++) {
		temp = temp->south;
	}

	for (int j = 1; j < p.second; j++) {
		temp = temp->east;
	}
	return temp->value;

}
ring ring::Threetimes() {
	shared_ptr<node> temp;
	temp = head;


	int count = 0;
	while (temp && count < num_cols*num_rows) {
		temp->value = 3 * temp->value;
		temp = temp->east;
		count++;
	}
	return *this;

}



int main() {

	ring R1(4,6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}