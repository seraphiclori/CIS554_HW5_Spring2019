//HW5
//Zijian Chen
//zchen24@syr.edu
//306012101

//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

	ring::ring(int i, int j) { 
		shared_ptr<node> p1;
		shared_ptr<node> p2;
		for (int n = 0; n < i*j; n++) {
			p1 = make_shared<node>(n);
			if (n == 0) {
				head = p1;
			}
			else {
				p2->east = p1;
			}
			p2 = p1;
		}
		p2->east = head;
		
		num_rows = i;
		num_cols = j;
		for (int x = 0; x < j; x++) {
			p1 = head;
			for (int k = 0; k < x; k++) {
				p1 = p1->east;
			}
			p2->south = p1;
			p2 = p1;
			int temp = p2->value;
			for (int y = x; y <i*j; y++) {
				if ((y % j) == x) {
					if ((p1->value) != temp) {
						p2->south = p1;
						p2 = p1;
					}
				}
				p1 = p1->east;
			}
		}
	}

	ring::~ring() {
		if ((num_rows > 0) || (num_cols > 0)) {
			shared_ptr<node> p1 = head;
			for (int i = 0; i < num_rows - 1; i++) {
				p1->east.reset();
				p1 = p1->south;
			}
			p1->east.reset();
			p1->south.reset();
		}		
	}

	ring::ring(const ring &r) : ring() { //copy constructor																			  																		  //num_nodes = 0;
	
		shared_ptr<node> rp1 = r.head;
		shared_ptr<node> p1;
		shared_ptr<node> p2;
		for (int n = 0; n < r.num_cols*r.num_rows; n++) {

			p1 = make_shared<node>(rp1->value);
			if (n == 0) {
				head = p1;
			}
			else {
				p2->east = p1;
			}
			p2 = p1;
			rp1 = rp1->east;
		}
		p2->east = head;
		
		for (int x = 0; x < r.num_cols; x++) {
			p1 = head;
			for (int k = 0; k < x; k++) {
				p1 = p1->east;
			}
			p2->south = p1;
			p2 = p1;
			int temp = p2->value;
			for (int y = x; y < r.num_rows*r.num_cols; y++) {
				if ((y % r.num_cols) == x) {
					if ((p1->value) != temp) {
						p2->south = p1;
						p2 = p1;
					}
				}
				p1 = p1->east;
			}
		}
		num_rows = r.num_rows;
		num_cols = r.num_cols;
	}

	ring::ring(ring &&r):ring() {//move constructor
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;
		r.num_rows = 0;
		r.num_cols = 0;
		r.head = nullptr;
	}

	void ring::operator=(ring &&r) {//R-value operator=
		if ((num_rows > 0) || (num_cols > 0)) {
			shared_ptr<node> p1 = head;
			for (int i = 0; i < num_rows - 1; i++) {
				p1->east.reset();
				p1 = p1->south;
			}
			p1->east.reset();
			p1->south.reset();
			head.reset();
		}
		

		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;
		r.head.reset();
		r.num_rows = 0;
		r.num_cols = 0;
	}

	void ring::operator=(const ring &r) {//L-value operator=
		if ((num_rows > 0) || (num_cols > 0)) {
			shared_ptr<node> p1 = head;
			for (int i = 0; i < num_rows - 1; i++) {
				p1->east.reset();
				p1 = p1->south;
			}
			p1->east.reset();
			p1->south.reset();
			head.reset();
		}
		
		shared_ptr<node> rp1 = r.head;
		shared_ptr<node> p1;
		shared_ptr<node> p2;
		for (int n = 0; n < r.num_cols*r.num_rows; n++) {

			p1 = make_shared<node>(rp1->value);
			if (n == 0) {
				head = p1;
			}
			else {
				p2->east = p1;
			}
			p2 = p1;
			rp1 = rp1->east;
		}
		p2->east = head;

		for (int x = 0; x < r.num_cols; x++) {
			p1 = head;
			for (int k = 0; k < x; k++) {
				p1 = p1->east;
			}
			p2->south = p1;
			p2 = p1;
			int temp = p2->value;
			for (int y = x; y < r.num_rows*r.num_cols; y++) {
				if ((y % r.num_cols) == x) {
					if ((p1->value) != temp) {
						p2->south = p1;
						p2 = p1;
					}
				}
				p1 = p1->east;
			}
		}
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		
	}

	ring::ring(const initializer_list<int> &V) :ring(){
		auto it1 = V.begin();
		int i = *it1;
		it1++;
		int j = *it1;

		shared_ptr<node> p1;
		shared_ptr<node> p2;
		for (int n = 0; n < i*j; n++) {
			it1++;
			p1 = make_shared<node>(*it1);
			if (n == 0) {
				head = p1;
			}
			else {
				p2->east = p1;
			}
			p2 = p1;
		}
		p2->east = head;
		num_rows = i;
		num_cols = j;
		for (int x = 0; x < j; x++) {
			p1 = head;
			for (int k = 0; k < x; k++) {
				p1 = p1->east;
			}
			
			p2->south = p1;
			p2 = p1;
			int temp = p1->value;
			for (int y = 0; y <= (i - 1)*j; y++) {
				if (((p1->value) % j) == temp) {
					if ((p1->value) != temp) {
						p2->south = p1;
						p2 = p1;
					}
				}
			}
		}
		
		
	}

	int & ring::operator[](int a) {
		shared_ptr<node> p1 = head;
		for (int i = 0; i < a; i++) {
			p1 = p1->east;
		}
		return p1->value;
	}

	int & ring::operator[](pair<int, int> p) {
		shared_ptr<node> p1 = head;
		for (int i = 0; i < p.first; i++) {
			p1 = p1->south;
		}
		for (int i = 0; i < p.second; i++) {
			p1 = p1->east;
		}
		return p1->value;
	}

	void ring::DelCol(int i) {
		if (i == 0) {
			if (num_cols == 1) {
				shared_ptr<node> p1 = head;
				for (int a = 0; a < num_rows - 1; a++) {
					p1->east.reset();
					p1 = p1->south;
				}
				p1->east.reset();
				p1->south.reset();
				head.reset();
			}
			else {
				shared_ptr<node> p1 = head;
				shared_ptr<node> p2;
				shared_ptr<node> p3 = head->east;
				p1 = p1->east;
				p2 = p1;
				for (int n = 2; n < num_cols; n++) {
					p2 = p2->east;
				}
				for (int a = 0; a < num_rows-1; a++) {

					p1 = p1->south;
					p2->east = p1;
					p2 = p2->south;
				}
				
				p2->east = p3;
				p2->south = p3;
				
				head = p3;
			}
			num_cols -= 1;
		}
		else {
			shared_ptr<node> p1 = head;
			shared_ptr<node> p2;
			shared_ptr<node> p3;
			for (int a = 0; a < i-1; a++) {
				p1 = p1->east;
			}
			p2 = p1;
			for (int a = 0; a < 2; a++) {
				p2 = p2->east;
			}
			p3 = p2;
			for (int i = 0; i < num_rows - 1; i++) {
				p1->east = p2;
				p1 = p1->south;
				p2 = p2->south;
			}
			if (i == num_cols) {
				p1->east = head;
				p1->south = head;
			}
			else {
				p1->east = p1;
				p1->south = p3;
			}

			
		
			num_cols -= 1;
		}
	}

	ring ring::Threetimes() {
		ring r1(num_rows, num_cols);
		r1.head->value = (head->value) * 3;
		shared_ptr<node> p1 = r1.head;
		shared_ptr<node> p2 = head;

		p1 = p1->east;
		p2 = p2->east;
		while (p2 != head) {
			p1->value = (p2->value) * 3;
			p1 = p1->east;
			p2 = p2->east;
		}
		return r1;
	}
//overload operator<<
	ostream & operator<<(ostream & str, const ring &r) {
		shared_ptr<node> p1 = r.head;
		for (int i = 0; i < r.num_rows; i++) {
			for (int i = 0; i < r.num_cols; i++) {
				str << p1->value << " ";
				p1 = p1->east;
			}
			str << endl;
		}
		
		return str;
	}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}