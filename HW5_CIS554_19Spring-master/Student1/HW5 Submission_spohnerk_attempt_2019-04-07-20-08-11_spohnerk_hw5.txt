//HW5 Due: April 7 (Sunday) at 11:59PM
// Saurabh Pohnerkar
// 784946818
// spohnerk@syr.edu


#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//Constructor
ring :: ring(int i, int j)
{
	for(int x = (i*j-1); x>=0; x--)
      {
        shared_ptr <node> p1 = make_shared<node>(x); // creating new nodes one by one
        p1->east = head; // node's east is head
        head = p1; // node is now head
      }

  shared_ptr <node> p2 = head; 
  for(int x = 0; x<((i*j)-1); x++)
  	{
  		p2 = p2->east;
  	}
 
  p2->east = head; // This is for the last element again pointing to head.

  shared_ptr <node> n1, n2, n3;
  n1 = n2 = n3 = head;


  // For establishing south links

  int count;
  while(count < i * j)
  {
  	for(int x = 0; x < j; x++)
  	{
  		n1 = n1->east;
  	}

  	n2->south = n1;	// first column making south links
  	n2 = n1;

  	if(n1 == n3)
  	{
  		n1 = n1->east; //moving to next column if previous links are established
  		n3 = n1; 
  	}

  	if(n1->east == head)
  	{
  		n2->south = head; // last node pointing back to head
  	}

  	count = count + 1;
  }
	num_rows = i;
	num_cols = j;
}

//Destructor
ring :: ~ring()
{
	
	head.reset(); 
	num_rows = 0;
	num_cols = 0;

}

//copy constructor
ring :: ring(const ring &r) : ring()
{
	num_rows = r.num_rows; // copying no_rows
	num_cols = r.num_cols; // copying no_cols
	shared_ptr<node> ring2 = r.head; // ring2 node contains the head
	shared_ptr<node> tail; // creating tail node

	for (int x = 0; x < r.num_rows * r.num_cols; x++)
	{
		shared_ptr<node> p1 = make_shared<node>(ring2->value); // for copying creating new node
		if (!head) // if head doesnt exist
		{
			head = p1; // head and tail are same
			tail = p1;
			p1->east = p1; // pointing to itself
			ring2 = ring2->east; // moving forward
		}
		else
		{
			tail->east = p1; // tail's east is new node
			tail = p1; // its now the tail
			p1->east = head; // last node pointing to head
			ring2 = ring2->east; // moving forward
		}
	}


  shared_ptr <node> n1, n2, n3;
  n1 = n2 = n3 = head;

  int count;
  while(count < r.num_rows * r.num_cols)
  {
  	for(int x = 0; x < r.num_cols; x++)
  	{
  		n1 = n1->east;
  	}

  	n2->south = n1; 
  	n2 = n1;

  	if(n1 == n3)
  	{
  		n1 = n1->east; 
  		n3 = n1; 
  	}

  	if(n1->east == head)
  	{
  		n2->south = head; 
  	}

  	count = count + 1;
  }
}


//Move Constructor
ring :: ring(ring &&r) : ring()
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}


//R-Value 
void ring :: operator=(ring &&r) 
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}


//Lvalue
void ring :: operator=(const ring &r)  
{

	num_rows = r.num_rows; // copying no_rows
	num_cols = r.num_cols; // copying no_cols
	shared_ptr<node> ring2 = r.head; // ring2 node contains the head
	shared_ptr<node> tail; // creating tail node

	for (int x = 0; x < r.num_rows * r.num_cols; x++)
	{
		shared_ptr<node> p1 = make_shared<node>(ring2->value); // for copying creating new node
		if (!head) // if head doesnt exist
		{
			head = p1; // head and tail are same
			tail = p1;
			p1->east = p1; // pointing to itself
			ring2 = ring2->east; // moving forward
		}
		else
		{
			tail->east = p1; // tail's east is new node
			tail = p1; // its now the tail
			p1->east = head; // last node pointing to head
			ring2 = ring2->east; // moving forward
		}
	}


  shared_ptr <node> n1, n2, n3;
  n1 = n2 = n3 = head;

  int count;
  while(count < r.num_rows * r.num_cols)
  {
  	for(int x = 0; x < r.num_cols; x++)
  	{
  		n1 = n1->east;
  	}

  	n2->south = n1;
  	n2 = n1;

  	if(n1 == n3)
  	{
  		n1 = n1->east;
  		n3 = n1; 
  	}

  	if(n1->east == head)
  	{
  		n2->south = head;
  	}

  	count = count + 1;
  }
	
}


//initializer list
ring :: ring(const initializer_list<int> &V) : ring()
{

	auto it1 = V.begin();
	int i = *it1; // rows
	it1++;
	int j = *it1; // columns
	it1++;

	shared_ptr<node> tail; // Similar to creating a linked list
	while (it1 != V.end())
	{
		shared_ptr<node> p1 = make_shared<node>(*it1);

		if (!head) // if head doesnt exist
		{
			head = p1;
			tail = p1;
			p1->east = p1; // pointing to itself
		}

		else
		{
			tail->east = p1;
			tail = p1;
			p1->east = head; // pointing last link to head always
		}

		it1	++;
	}


  shared_ptr <node> n1, n2, n3;
  n1 = n2 = n3 = head;

  int count;
  while(count < i*j)
  {
  	for(int x = 0; x<j; x++)
  	{
  		n1 = n1->east;
  	}

  	n2->south = n1; 
  	n2 = n1; 

  	if(n1 == n3)
  	{
  		n1 = n1->east; 
  		n3 = n1; 
  	}

  	if(n1->east == head)
  	{
  		n2->south = head; 
  	}

  	count = count + 1;
  }

	num_rows = i;
	num_cols = j;
}

int & ring :: operator [](int a)
{
	if(a == 0) { return head->value; }

	shared_ptr <node> p1 = head;

	for(int i=0; i<a; i++)
	{
		p1 = p1->east;
	}

	return p1->value;
}

int & ring :: operator[](pair<int, int> p)
{
	shared_ptr <node> p1 = head;

	for(int i = 0; i<(p.second-1); i++) // Moving East in terms of columns
	{
		p1 = p1->east;
	}

	for(int j = 0; j<(p.first); j++) // Moving South in terms of rows
	{
		p1 = p1->south;
	}

	return p1->value;

}


void ring :: DelCol(int i)
{

	if(i > num_cols)
	{
		return;
	}

	if(i == 0)
	{
		shared_ptr <node> p1 = head;
		shared_ptr <node> p2;
		p2 = p1->east;
		head = p2;

		shared_ptr <node> dummy = p1;	
		shared_ptr <node> dummy2 = p1->south;
		shared_ptr <node> dummy3 = p1->south;
		shared_ptr <node> dummy4 = p1->south;

		dummy.reset();
		dummy2.reset();
		dummy3.reset();
		dummy4.reset();
		num_cols++;
	}

	else
	{
		shared_ptr <node> p1 = head;

		p1 = p1->east;
		p1 = p1->east;
		
	shared_ptr <node> p2 = p1->east;
	for (int i = 0; i < num_rows; i++)
		{
			p1->east = p2->east;
			p2.reset();
			p1 = p1->south;
			p2 = p1->east;
		}
	}

	num_cols = num_cols-1;
}

ring ring :: Threetimes()
{
	shared_ptr <node> p1 = head; // p1 is head
	ring ring2(num_rows, num_cols); // new ring
	shared_ptr <node> p2 = ring2.head; // p2 is new ring's head

	for(int i=0; i<(num_rows * num_cols); i++)
	{
		p2->value = 3 * p1->value; // multiplying by 3
		p1 = p1->east; // moving forward
		p2 = p2->east;
	}

	return move(ring2); // move constructor
}

//overload operator<<
ostream & operator <<(ostream &str, const ring &r1)
{

	shared_ptr <node> p1 = r1.head;
	str << p1->value << "	"; // printing the head
	p1 = p1->east; // moving forward

	int count = 1;
	while(p1 != r1.head)
	{
		str << p1->value << "	"; //printing node's value
		p1 = p1->east;
		count = count + 1;

		if (count % r1.num_cols == 0) // for new line after one row
		{
			str << "\n";
		}
	}

	return str;
}


int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}