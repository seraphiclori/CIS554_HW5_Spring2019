//
//  main.cpp
//  hw5
//
//  Created by Qianru Zhao on 2019/4/7.
//  Copyright © 2019年 Qianru Zhao. All rights reserved.
//

//HW5 Due: April 7 (Sunday) at 11:59PM
#include "pch.h"
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
	//i rows and j cols
	//values from 0 to i*j-1
	//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(int i, int j) {
	shared_ptr<node> tail;
	for (int index = 0; index < i * j; index++) {
		int * p1 = new int(index);
		shared_ptr<node> p = make_shared<node>(*p1);
		if (!head) { head = tail = p; p->east = p; }
		else {
			tail->east = p;
			tail = p;
			p->east = head;
		}
	}
	tail = head;
	shared_ptr<node> next_head;
	for (int index = 0; index < j; index++) {
		next_head = tail->east;
		for (int index1 = 0; index1 < i - 1; index1++) {
			shared_ptr<node> p = tail;
			for (int index1 = 0; index1 < j; index1++) {
				p = p->east;
			}
			tail->south = p;
			tail = p;
		}
		if (index == j - 1) {
			tail->south = head;
		}
		else {
			tail->south = next_head;
			tail = next_head;
		}
	}
	num_rows = i;
	num_cols = j;
}

ring:: ~ring() { head.reset(); }

//overload operator<<
ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	if (!R.head) return str;
	for (int i = 0; i < R.num_rows * R.num_cols; i++) {
		str << p->value << " ";
		p = p->east;
	}
	return str;
}

int & ring :: operator[](int index) {
	//if (index >= num_rows * num_cols || index < 0) return;
	shared_ptr<node> p = head;
	for (int i = 0; i < index; i++) {
		p = p->east;
	}
	return p->value;
}

int & ring :: operator[](pair<int, int> p) {
	int index = p.first * num_cols + p.second;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < index; i++) {
		p1 = p1->east;
	}
	return p1->value;
}

void ring::DelCol(int i) {
	if (i < 0 || i >= num_cols) { return; }
	shared_ptr<node> col_head = head;
	for (int index = 0; index < i; index++) {
		col_head = col_head->east;
	}
	shared_ptr<node> col_tail = col_head;
	for (int index = 0; index < num_rows - 1; index++) {
		col_tail = col_tail->south;
	}
	shared_ptr<node> pre = head;
	while (pre->south != col_head) {
		pre = pre->south;
	}
	pre->south = col_tail->south;
	//col_tail->south = nullptr;
	if (i == 0) {
		head = head->east;
	}
	shared_ptr<node> p = head;
	for (int index = 0; index < num_rows * num_cols; index++) {
		if ((i != 0 && (index + 1) % num_cols == i) || ((i == 0) && (index + 2) % num_cols == i)) {
			p->east = p->east->east;
			p = p->east;
			index++;
		}
		else {
			p = p->east;
		}
	}
	num_cols--;
}

ring::ring(const initializer_list<int> &V) {
	auto it = V.begin();
	num_rows = *it;
	it++;
	num_cols = *it;
	it++;
	shared_ptr<node> tail;
	while (it != V.end()) {
		shared_ptr<node> p = make_shared<node>(*it);
		if (!head) { head = tail = p; p->east = p; }
		else {
			tail->east = p;
			tail = p;
			p->east = head;
		}
		it++;
	}
	tail = head;
	shared_ptr<node> next_head;
	for (int index = 0; index < num_cols; index++) {
		next_head = tail->east;
		for (int index1 = 0; index1 < num_rows - 1; index1++) {
			shared_ptr<node> p = tail;
			for (int index1 = 0; index1 < num_cols; index1++) {
				p = p->east;
			}
			tail->south = p;
			tail = p;
		}
		if (index == num_cols - 1) {
			tail->south = head;
		}
		else {
			tail->south = next_head;
			tail = next_head;
		}
	}
}

ring::ring(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	shared_ptr<node> r_p = r.head;
	for (int index = 0; index < num_rows * num_cols; index++) {
		shared_ptr<node> p = make_shared<node>(r_p->value);
		if (!head) { head = tail = p; p->east = p; }
		else {
			tail->east = p;
			tail = p;
			p->east = head;
		}
		r_p = r_p->east;
	}
	tail = head;
	shared_ptr<node> next_head;
	for (int index = 0; index < num_cols; index++) {
		next_head = tail->east;
		for (int index1 = 0; index1 < num_rows - 1; index1++) {
			shared_ptr<node> p = tail;
			for (int index1 = 0; index1 < num_cols; index1++) {
				p = p->east;
			}
			tail->south = p;
			tail = p;
		}
		if (index == num_cols - 1) {
			tail->south = head;
		}
		else {
			tail->south = next_head;
			tail = next_head;
		}
	}

}

ring::ring(ring &&r) {
	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.head.reset();
}

void ring :: operator=(ring &&r) {
	head.reset();
	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.head.reset();
}

void ring :: operator=(const ring &r) {
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	shared_ptr<node> r_p = r.head;
	for (int index = 0; index < num_rows * num_cols; index++) {
		shared_ptr<node> p = make_shared<node>(r_p->value);
		if (!head) { head = tail = p; p->east = p; }
		else {
			tail->east = p;
			tail = p;
			p->east = head;
		}
		r_p = r_p->east;
	}
	tail = head;
	shared_ptr<node> next_head;
	for (int index = 0; index < num_cols; index++) {
		next_head = tail->east;
		for (int index1 = 0; index1 < num_rows - 1; index1++) {
			shared_ptr<node> p = tail;
			for (int index1 = 0; index1 < num_cols; index1++) {
				p = p->east;
			}
			tail->south = p;
			tail = p;
		}
		if (index == num_cols - 1) {
			tail->south = head;
		}
		else {
			tail->south = next_head;
			tail = next_head;
		}
	}
}

ring ring::Threetimes() {
	ring r1(num_rows, num_cols);
	shared_ptr<node> p = r1.head;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_rows * num_cols; i++) {
		p->value = 3 * p1->value;
		p = p->east;
		p1 = p1->east;
	}
	return r1;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}