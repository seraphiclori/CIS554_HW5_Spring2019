//HW5 Due: April 7 (Sunday) at 11:59PM
//Kai Bernstein
//kdbernst@syr.edu
//856374087
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() { }
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() { }
	ring(int i, int j) {
		num_rows = i;
		num_cols = j;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		for (int k = 0; k < i; k++) {
			for (int l = 0; l < j; l++) {
				if (k == 0 && l == 0) {
					temp = make_shared<node>(0);
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = make_shared<node>(k*j);
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = make_shared<node>(k*j + l);
					temp = temp->east;
				}
			}
			back = temp;
			if (k != 0 && k != i - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == i - 1) {
				back->east = head;
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
		}
	}//constructor
	 //i rows and j cols
	 //values from 0 to i*j-1
	 //See the photo for ring structures.

	~ring() {
		shared_ptr<node> temp = head;
		shared_ptr<node> temp2;
		for (int k = 0; k < num_cols; k++) {
			temp2 = temp->east;
			temp.reset();
			temp = temp2;
		}
		head.reset();
	}//destructor; do as little work as possible
	ring(const ring &r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		shared_ptr<node> temp3 = r.head;
		for (int k = 0; k < r.num_rows; k++) {
			for (int l = 0; l < r.num_cols; l++) {
				if (k == 0 && l == 0) {
					temp = make_shared<node>(temp3->value);
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = make_shared<node>(temp3->value);
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = make_shared<node>(temp3->value);
					temp = temp->east;
				}
				temp3 = temp3->east;
			}
			back = temp;
			if (k != 0 && k != r.num_rows - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == r.num_rows - 1) {
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
		}
	}//copy constructor
	ring(ring &&r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		shared_ptr<node> temp3 = r.head;
		for (int k = 0; k < r.num_rows; k++) {
			for (int l = 0; l < r.num_cols; l++) {
				if (k == 0 && l == 0) {
					temp = temp3;
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = temp3;
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = temp3;
					temp = temp->east;
				}
				temp3 = temp3->east;
			}
			back = temp;
			if (k != 0 && k != r.num_rows - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == r.num_rows - 1) {
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
		}
	} //move constructor
	void operator=(ring &&r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		shared_ptr<node> temp3 = r.head;
		for (int k = 0; k < r.num_rows; k++) {
			for (int l = 0; l < r.num_cols; l++) {
				if (k == 0 && l == 0) {
					temp = temp3;
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = temp3;
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = temp3;
					temp = temp->east;
				}
				temp3 = temp3->east;
			}
			back = temp;
			if (k != 0 && k != r.num_rows - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == r.num_rows - 1) {
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
		}
	}//R-value operator=
	void operator=(const ring &r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		shared_ptr<node> temp3 = r.head;
		for (int k = 0; k < r.num_rows; k++) {
			for (int l = 0; l < r.num_cols; l++) {
				if (k == 0 && l == 0) {
					temp = make_shared<node>(temp3->value);
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = make_shared<node>(temp3->value);
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = make_shared<node>(temp3->value);
					temp = temp->east;
				}
				temp3 = temp3->east;
			}
			back = temp;
			if (k != 0 && k != r.num_rows - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == r.num_rows - 1) {
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
		}
	} //L-value operator=
	ring(const initializer_list<int> &V) {
		auto it1 = V.begin();
		int i = *it1;
		it1++;
		int j = *it1;
		if (i == 0 || j == 0)
			return;
		num_rows = i;
		num_cols = j;
		shared_ptr<node> prev;
		shared_ptr<node> front;
		shared_ptr<node> back;
		shared_ptr<node> temp;
		shared_ptr<node> temp2;
		for (int k = 0; k < i; k++) {
			for (int l = 0; l < j; l++) {
				if (k == 0 && l == 0) {
					temp = make_shared<node>(0);
					head = temp;
					front = temp;
					prev = temp;
				}
				else if (l == 0) {
					temp = make_shared<node>(k*j);
					front = temp;
					back->east = temp;
				}
				else {
					temp->east = make_shared<node>(k*j + l);
					back = temp->east;
					temp = temp->east;
				}
			}
			if (k != 0 && k != i - 1) {
				temp = prev;
				temp2 = front;
				while (temp2 != back) {
					temp->south = temp2;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = temp2;
				prev = front;
			}
			else if (k == i - 1) {
				back->east = head;
				temp = front;
				temp2 = head;
				while (temp != back) {
					temp->south = temp2->east;
					temp = temp->east;
					temp2 = temp2->east;
				}
				temp->south = head;
			}
			/*it1++;
			shared_ptr<node> temp3 = head;
			for (int m = 0; m < i*j; m++) {
				temp3->value = *it1;
				temp3 = temp3->east;
				it1++;
			}*/
		}
	}//see the explanation in main function
	int & operator[](int a) {
		shared_ptr<node> temp = head;
		for (int k = 0; k <= a; k++)
			temp = temp->east;
		return temp->value;
	}
	int & operator[](pair<int, int> p) {
		int x = (p.first * num_cols) + p.second;
		shared_ptr<node> temp = head;
		for (int k = 0; k <= x; k++)
			temp = temp->east;
		return temp->value;
	}//first is row number and second is col number

	void DelCol(int i) {
		shared_ptr<node> temp = head;
		shared_ptr<node> temp2 = head;
		for (int l = 0; l < num_rows; l++) {
			for (int j = 0; j < num_cols; j++)
				temp2 = temp->east;
			for (int k = 0; k < i; k++) {
				temp2 = temp;
				temp = temp->east;
			}
			temp2->east = temp->east;
		}
		for (int m = 0; m < i; m++)
			temp = temp->east;
		temp2->south = temp;
	}//delete col i of *this
	ring Threetimes() {
		ring r = ring(num_rows, num_cols);
		int x = (num_rows * num_cols);
		shared_ptr<node> temp = r.head;
		shared_ptr<node> temp2 = head;
		for (int k = 0; k < x; k++) {
			temp->value = 3 * (temp2->value);
			temp = temp->east;
			temp2 = temp2->east;
		}
		return r;
	}
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream & operator<< (ostream &str, const ring &r) {
	int count = 0;
	int x = (r.num_rows * r.num_cols);
	shared_ptr<node> temp = r.head;
	for (int k = 0; k < x; k++) {
		count++;
		if (count < r.num_cols) {
			str << temp->value;
			str << " ";
		}
		else {
			str << temp->value << endl;
			count = 0;
		}
		temp = temp->east;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
																							  //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}