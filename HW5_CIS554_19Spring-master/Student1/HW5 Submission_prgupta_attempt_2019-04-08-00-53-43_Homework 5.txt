//HW5 Due: April 7 (Sunday) at 11:59PM
//Name: PREKSHA GUPTA
//SUID: 264406529
//Email: prgupta@syr.edu



#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(int i, int j) {
	shared_ptr<node> p, p1, p2;
	num_rows = i;
	num_cols = j;
	head = make_shared<node>(0);
	p = head;
	for (int a = 1; a < i*j; a++) {
		p1 = make_shared<node>(a);
		p->east = p1;
		p = p1;
	}
	p->east = head;
	
	//south
	p1 = head;
	p2 = head;
	for (int b = 0; b < j; b++)
		p2 = p2->east;
	
	while (p1->east != head) {
		p1->south = p2;
		p1 = p1->east;
		p2 = p2->east;
		if (p2 == head)
			p2 = head->east;
	}
	if (p1->east == head)
		p1->south = head;

}

ring::~ring() {
	shared_ptr<node> p = head, p1, p2, s;

	while (p && s) {
		p1 = p->east;
		p2 = p->south;
		p.reset();
		p = p1;
		s = p2;
	}
	p.reset();
	s.reset();
}

//copy
ring::ring(const ring &r): ring() {
	//cout << "\nin copy" << endl;
	shared_ptr<node> p, p1, p2;
	head = make_shared<node>(r.head->value);
	p = head;
	for (int a = 1; a < r.num_rows * r.num_cols; a++) {
		p1 = make_shared<node>();
		p->east = p1;
		p = p1;
	}
	p->east = head;	
	p1 = head;
	p2 = head;
	for (int b = 0; b < num_cols; b++)
		p2 = p2->east;

	while (p1->east != head) {
		p1->south = p2;
		p1 = p1->east;
		p2 = p2->east;
		if (p2 == head)
			p2 = head->east;
	}
	if (p1->east == head)
		p1->south = head;

	num_rows = r.num_rows;
	num_cols = r.num_cols;

	p1 = head;
	p2 = r.head;
	for (int i = 0; i < num_rows * num_cols; i++) {
		p1->value = p2->value;
		p1 = p1->east;
		p2 = p2->east;
	}
	
}

//move
ring::ring(ring &&r): ring() {
	//cout << "\nin move" << endl;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.num_rows = 0;
	r.num_cols = 0;
	r.head.reset();
}

//L-value
void ring::operator=(const ring &r) {	
	//cout << "\nin L-value" << endl;
	shared_ptr<node> p, s, p1, p2;
	p = head;
	while (p && s) {
		p1 = p->east;
		p2 = p->south;
		p.reset();
		p = p1;
		s = p2;
	}
	p.reset();
	s.reset();
	if (head) head.reset();
	num_rows = 0;
	num_cols = 0;
	head = make_shared<node>(r.head->value);
	p = head;
	for (int a = 1; a < r.num_rows * r.num_cols; a++) {
		p1 = make_shared<node>();
		p->east = p1;
		p = p1;
	}
	p->east = head;
	p1 = head;
	p2 = head;
	for (int b = 0; b < num_cols; b++)
		p2 = p2->east;

	while (p1->east != head) {
		p1->south = p2;
		p1 = p1->east;
		p2 = p2->east;
		if (p2 == head)
			p2 = head->east;
	}
	if (p1->east == head)
		p1->south = head;

	num_rows = r.num_rows;
	num_cols = r.num_cols;

	p1 = head;
	p2 = r.head;
	for (int i = 0; i < num_rows * num_cols; i++) {
		p1->value = p2->value;
		p1 = p1->east;
		p2 = p2->east;
	}
}

//R-value
void ring::operator=(ring &&r) {
	//cout << "\nin R-value" << endl;

	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;

	r.num_rows = 0;
	r.num_cols = 0;
	r.head.reset();
}


ring::ring(const initializer_list<int> &V) {
	shared_ptr<node> p, p1, p2;
	auto it = V.begin();
	num_rows = *it;
	num_cols = *(++it);

	it++;
	//creating ring with only east
	head = make_shared<node>(*it);
	p = head;
	it++;
	while (it != V.end()) {
			p1 = make_shared<node>(*it);
			p->east = p1;
			p = p1;
			it++;
	}
	p->east = head;

	//south
	p1 = head;
	p2 = head;
	for (int b = 0; b < num_cols; b++)
		p2 = p2->east;
	
	while (p1->east != head) {
		p1->south = p2;
		p1 = p1->east;
		p2 = p2->east;
		if (p2 == head)
			p2 = head->east;
	}
	if (p1->east == head)
		p1->south = head;
	
}

ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p;
	p = R.head;
	int i = 1;

	if (p) {
		while (p->east != R.head) {
			str << p->value << "\t";
			if ((i) % R.num_cols == 0)
				str << endl;
			i++;
			p = p->east;
		}
		str << p->value;
		str << endl;
	}
	return str;
}

int & ring::operator[](int a) {
	shared_ptr<node> p;
	p = head;
	for (int i = 0; i < a; i++) {
		p = p->east;
	}
	return p->value;
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> p1;
	p1 = head;
	int r = p.first, c = p.second;
	for (int i = 0; i <= r * c; i++) {
		p1 = p1->east;
	}
	return p1->value;
}

void ring::DelCol(int i) {
	if (i > num_cols-1) exit(0);
	else if (i == 0) {
		shared_ptr<node> p1;
		head = head->east;
		p1 = head;
		for (int a = 1; a < num_cols-1; a++) 
			p1 = p1->east;
		for (int a = 1; a <= num_rows; a++) {
			p1->east = p1->east->east;
			p1 = p1->south;
		}
	}
	else {
		shared_ptr<node> p1 = head;
		for (int a = 0; a < i - 1; a++) 
			p1 = p1->east;

		for (int a = 0; a < num_rows; a++) {
			p1->east = p1->east->east;
			p1 = p1->south;
		}
	}
	//updating number of columns
	num_cols -= 1;
	//updating all the south values
	shared_ptr<node> p1, p2;
	p1 = head;
	p2 = head;
	for (int b = 0; b < num_cols; b++)
		p2 = p2->east;

	while (p1->east != head) {
		p1->south = p2;
		p1 = p1->east;
		p2 = p2->east;
		if (p2 == head)
			p2 = head->east;
	}
	if (p1->east == head)
		p1->south = head;

}

ring ring::Threetimes() {
	shared_ptr<node> p = head;
	while (p->east != head)
	{
		p->value *= 3;
		p = p->east;
	}
	p->value *= 3;
	return *this;
}

int main() {

	ring R1(4,6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	cout << R1 << endl;;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	// //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}