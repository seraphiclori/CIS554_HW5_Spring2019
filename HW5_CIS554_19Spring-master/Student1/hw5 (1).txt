//CIS554 HW5
//Ryland Arbour
//rjarbour@syr.edu
//982569238
//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//init list
ring::ring(const initializer_list<int> &V) : ring() {
	auto it = V.begin();
	int i, j, n;
	if (it != V.end()) { i = *it; it++; }
	else { return; }
	if (it != V.end()) { j = *it; it++; }
	else { return; }

	// corner case, jerk input
	if (i < 1 || j < 1) { return; }
	num_cols = j; num_rows = i;
	shared_ptr<node> cur_ring, idx, prev, prev_ring, temp_cur, temp_prev;
	for (auto y = 0; y < i; y++) {
		for (auto x = 0; x < j; x++) {
			if (it != V.end()) { n = *it; it++; }
			else { n = -1; }
			if (!cur_ring) {
				cur_ring = make_shared<node>(n);
				prev = cur_ring;
				if (y == 0 && x == 0) {
					head = cur_ring;
				}
			}
			else {
				idx = make_shared<node>(n);
				prev->east = idx;
				prev = idx;
			}
		}
		// hold ring in storage
		if (!prev_ring) {
			// check corner case...
			// only one row.
			if (i == 1) {
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_cur->east;
					temp_cur = temp_cur->east;
				}
				temp_cur->east = head;
				temp_cur->south = head;
				return;
			}

			// just do normal behavior
			prev_ring = cur_ring;
			cur_ring.reset();
		}
		// connect 2 rings together.
		else {
			// normal ring connection

			// remember the first position of the second ring
			temp_prev = prev_ring;
			temp_cur = cur_ring;
			// connect southern connections for first ring
			while (temp_prev->east) {
				temp_prev->south = temp_cur;
				temp_cur = temp_cur->east;
				temp_prev = temp_prev->east;
			}
			temp_prev->south = temp_cur;
			// connect back around
			temp_prev->east = cur_ring;

			// final ring connection
			if ((y + 1) == i) {
				// go back to the top
				prev_ring = head;
				// remember the first position of the second ring
				temp_prev = prev_ring->east;
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_prev;
					temp_cur = temp_cur->east;
					temp_prev = temp_prev->east;
				}
				temp_cur->south = head;
				temp_cur->east = head;

			}
			prev_ring = cur_ring;
			cur_ring.reset();
		}
	}
}

//public methods
void ring::DelCol(int c) {
	shared_ptr<node> prev, next, temp, temporal;
	if (c < 0 || c > num_cols || !head) { return; }
	if (num_cols == 1) {
		if (c != 0) { return; }
		prev = head;
		for (auto idx = 0; idx < num_rows; idx++) { prev = prev->east; }
		prev->east.reset();
		prev->south.reset();
		head.reset();
		num_cols = num_rows = 0;
		return;
	}
	// case 1, removed column is head column.
	if (c == 0) {
		int n = num_cols - 1;
		next = head->east;
		temporal = prev = head;
		for (auto idx = 0; idx < n; idx++) { prev = prev->east; }
		temp = prev->east->east;
		for (auto idx = 0; idx < num_rows-1; idx++) {
			prev->east = temp;
			prev = prev->south;
			temp = temp->south;
		}
		prev->east = prev->south = next;
		this->head = next;
	}
	// case 2, removed column is the last column
	else if (c+1 == num_cols) {
		int n = c - 1;
		prev = next = head;
		for (auto idx = 0; idx < n; idx++) { prev = prev->east; }
		temp = prev->east->east;
		for (auto idx = 0; idx < num_rows-1; idx++) {
			prev->east = temp;
			prev = prev->south;
			temp = temp->south;
		}
		prev->east = prev->south = next;
		head = next;
	}
	// case 3, column is in the middle.
	else {
		int n = c - 1;
		prev = head;
		for (auto idx = 0; idx < n; idx++) { prev = prev->east; }
		temp = next = prev->east->east;
		for (auto idx = 0; idx < num_rows-1; idx++) {
			prev->east = temp;
			prev = prev->south;
			temp = temp->south;
		}
		prev->east = temp;
		prev->south = next;
	}
	num_cols--;
}

ring ring::Threetimes() {
	ring r = *this;
	if (!r.head) { return r; }
	shared_ptr<node> idx = r.head;
	idx->value *= 3;
	if (idx->east != r.head) {
		idx = idx->east;
		while (idx != r.head) {
			idx->value *= 3;
			idx = idx->east;
		}
	}
	return r;
}

//constructors
ring::ring(int i, int j) {
	// corner case, jerk input
	if (i < 1 || j < 1) {return;}
	num_cols = j; num_rows = i;
	shared_ptr<node> cur_ring, idx, prev, prev_ring, temp_cur, temp_prev;
	for (auto y = 0; y < i; y++) {
		for (auto x = 0; x < j; x++) {
			if (!cur_ring) {
				cur_ring = make_shared<node>((j*y) + x);
				prev = cur_ring;
				if (y == 0 && x == 0) {
					head = cur_ring;
				}
			}
			else {
				idx = make_shared<node>((j*y) + x);
				prev->east = idx;
				prev = idx;
			}
		}
		// hold ring in storage
		if (!prev_ring) {
			// check corner case...
			// only one row.
			if (i == 1) {
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_cur->east;
					temp_cur = temp_cur->east;
				}
				temp_cur->east = head;
				temp_cur->south = head;
				return;
			}

			// just do normal behavior
			prev_ring = cur_ring;
			cur_ring.reset();
		}
		// connect 2 rings together.
		else {
			// normal ring connection
			
			// remember the first position of the second ring
			temp_prev = prev_ring;
			temp_cur = cur_ring;
			// connect southern connections for first ring
			while (temp_prev->east) {
				temp_prev->south = temp_cur;
				temp_cur = temp_cur->east;
				temp_prev = temp_prev->east;
			}
			temp_prev->south = temp_cur;
			// connect back around
			temp_prev->east = cur_ring;

			// final ring connection
			if ((y + 1) == i) {
				// go back to the top
				prev_ring = head;
				// remember the first position of the second ring
				temp_prev = prev_ring->east;
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_prev;
					temp_cur = temp_cur->east;
					temp_prev = temp_prev->east;
				}
				temp_cur->south = head;
				temp_cur->east = head;

			}
			prev_ring = cur_ring;
			cur_ring.reset();
		}
	}
}

ring::ring(const ring &r) : ring() {
	// corner case, jerk input
	if (r.num_rows < 1 || r.num_cols < 1) { return; }
	int i = num_rows = r.num_rows, j = num_cols = r.num_cols;
	shared_ptr<node> cur_ring, idx, prev, prev_ring, temp_cur, temp_prev, cpy_idx;
	cpy_idx = r.head;
	for (auto y = 0; y < i; y++) {
		for (auto x = 0; x < j; x++) {
			if (!cur_ring) {
				cur_ring = make_shared<node>(cpy_idx->value);
				cpy_idx = cpy_idx->east;
				prev = cur_ring;
				if (y == 0 && x == 0) {
					head = cur_ring;
				}
			}
			else {
				idx = make_shared<node>(cpy_idx->value);
				cpy_idx = cpy_idx->east;
				prev->east = idx;
				prev = idx;
			}
		}
		// hold ring in storage
		if (!prev_ring) {
			// check corner case...
			// only one row.
			if (i == 1) {
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_cur->east;
					temp_cur = temp_cur->east;
				}
				temp_cur->east = head;
				temp_cur->south = head;
				return;
			}

			// just do normal behavior
			prev_ring = cur_ring;
			cur_ring.reset();
		}
		// connect 2 rings together.
		else {
			// normal ring connection

			// remember the first position of the second ring
			temp_prev = prev_ring;
			temp_cur = cur_ring;
			// connect southern connections for first ring
			while (temp_prev->east) {
				temp_prev->south = temp_cur;
				temp_cur = temp_cur->east;
				temp_prev = temp_prev->east;
			}
			temp_prev->south = temp_cur;
			// connect back around
			temp_prev->east = cur_ring;

			// final ring connection
			if ((y + 1) == i) {
				// go back to the top
				prev_ring = head;
				// remember the first position of the second ring
				temp_prev = prev_ring->east;
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_prev;
					temp_cur = temp_cur->east;
					temp_prev = temp_prev->east;
				}
				temp_cur->south = head;
				temp_cur->east = head;

			}
			prev_ring = cur_ring;
			cur_ring.reset();
		}
	}
}

ring::ring(ring &&r) {
	head = r.head;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	r.head.reset();
}

//operator[]
int & ring::operator[](int n) {
	int j = n / num_cols;
	int i = n % num_cols;
	shared_ptr<node> p = head;
	for (auto idx = 0; idx < j; idx++) { p = p->south; }
	for (auto idx = 0; idx < i; idx++) { p = p->east; }
	return p->value;
}

int & ring::operator[](pair<int, int> n) {
	shared_ptr<node> p = head;
	for (auto idx = 0; idx < n.first; idx++) { p = p->south; }
	for (auto idx = 0; idx < n.second; idx++) { p = p->east; }
	return p->value;
}

//operator=
void ring::operator=(const ring &r) {
	// clear current ring
	shared_ptr<node> idx = head;
	for (auto n = 0; n < num_cols; n++) { idx = idx->east; }
	for (auto n = 0; n < num_rows; n++) { idx->south.reset(); idx = idx->south; }
	idx.reset(); head.reset();
	// now copy constructor
	// corner case, jerk input
	if (r.num_rows < 1 || r.num_cols < 1) { return; }
	int i = num_rows = r.num_rows, j = num_cols = r.num_cols;
	shared_ptr<node> cur_ring, prev, prev_ring, temp_cur, temp_prev, cpy_idx;
	cpy_idx = r.head;
	for (auto y = 0; y < i; y++) {
		for (auto x = 0; x < j; x++) {
			if (!cur_ring) {
				cur_ring = make_shared<node>(cpy_idx->value);
				cpy_idx = cpy_idx->east;
				prev = cur_ring;
				if (y == 0 && x == 0) {
					head = cur_ring;
				}
			}
			else {
				idx = make_shared<node>(cpy_idx->value);
				cpy_idx = cpy_idx->east;
				prev->east = idx;
				prev = idx;
			}
		}
		// hold ring in storage
		if (!prev_ring) {
			// check corner case...
			// only one row.
			if (i == 1) {
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_cur->east;
					temp_cur = temp_cur->east;
				}
				temp_cur->east = head;
				temp_cur->south = head;
				return;
			}

			// just do normal behavior
			prev_ring = cur_ring;
			cur_ring.reset();
		}
		// connect 2 rings together.
		else {
			// normal ring connection

			// remember the first position of the second ring
			temp_prev = prev_ring;
			temp_cur = cur_ring;
			// connect southern connections for first ring
			while (temp_prev->east) {
				temp_prev->south = temp_cur;
				temp_cur = temp_cur->east;
				temp_prev = temp_prev->east;
			}
			temp_prev->south = temp_cur;
			// connect back around
			temp_prev->east = cur_ring;

			// final ring connection
			if ((y + 1) == i) {
				// go back to the top
				prev_ring = head;
				// remember the first position of the second ring
				temp_prev = prev_ring->east;
				temp_cur = cur_ring;
				// connect southern connections for first ring
				while (temp_cur->east) {
					temp_cur->south = temp_prev;
					temp_cur = temp_cur->east;
					temp_prev = temp_prev->east;
				}
				temp_cur->south = head;
				temp_cur->east = head;

			}
			prev_ring = cur_ring;
			cur_ring.reset();
		}
	}
}

void ring::operator=(ring &&r) {
	head = r.head;
	num_cols = r.num_cols;
	num_rows = r.num_rows;
	r.head.reset();
}

ring::~ring() {
	if (head) {
		shared_ptr<node> idx = head;
		if (idx->east == head) {
			idx->east.reset();
			idx->south.reset();
		}
		else {
			idx = idx->east;
			while (idx->east != head && idx->east) {
				idx = idx->east;
			}
			while (idx->south != head && idx->south) {
				idx = idx->south;
			}
			idx->south.reset();
			idx->east.reset();
		}
		head.reset();
	}
}

//operator<<
ostream & operator<<(ostream & str, ring r) {
	if (!r.head) { str << "{}"; return str; }
	shared_ptr<node> idx = r.head;
	str << "{" << idx->value;
	idx = idx->east;
	while (idx != r.head) {
		str << ", " << idx->value;
		idx = idx->east;
	}
	str << "}";
	/*
	idx = r.head;
	str << "{" << idx->value;
	idx = idx->south;
	while (idx != r.head) {
		str << ", " << idx->value;
		idx = idx->south;
	}
	str << "}";
	*/
	return str;
}

int main() {
	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	cout << R1.Threetimes() << endl;
	cout << R1 << endl;
	
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;

	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	
	cout << *p1 << endl;
	p1.reset();
	
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R4 << endl;
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}