/*HW5
 *Name: XIN GAO
 *Email: xgao27@syr.edu
 *SUID: 783868185
*/
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions

	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() { head = nullptr;  num_rows = 0; num_cols = 0; }
	ring(int i, int j);//constructor
	//i rows and j cols
	//values from 0 to i*j-1
	//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	friend ostream & operator<< (ostream &s, const ring &r);
	//friend ostream & operator<< (ostream &s, const ring *r);
};

//overload operator<<
ostream & operator<< (ostream &s, const ring &r)
{
	shared_ptr<node> _print = r.head;
	s << _print->value << " ";
	_print = _print->east;
	int count = 1;
	while (_print != r.head)
	{
		count++;
		s << _print->value << " ";
		_print = _print->east;
		if (count == r.num_cols)
		{
			s << endl;
			count = 0;
		}
	}
	s << endl;
	_print.reset();
	return s;
}

/*
//overload operator<<
ostream & operator<< (ostream &s, const ring *r)
{
	shared_ptr<node> _print = r->head;
	s << _print->value << " ";
	_print = _print->east;
	int count = 1;
	while (_print != r->head)
	{
		count++;
		s << _print->value << " ";
		_print = _print->east;
		if (count == r->num_cols)
		{
			s << endl;
			count = 0;
		}
	}
	s << endl;
	_print.reset();
	return s;
}
*/

ring::ring(int i, int j):ring()
{
	//head = make_shared<node>(rand()%100);
	num_rows = i;
	num_cols = j;
	shared_ptr<node> temp;
	for (int k = 0; k < i*j-1; ++k) 
	{
		if (k == 0)
		{
			head = make_shared<node>(rand()%100);
			temp = head;
		}
		temp->east = make_shared<node>(rand() % 100);
		temp = temp->east;
	}
	temp->east = head;
	temp = head;
	
	int count = 0;
	shared_ptr<node> search;
	while(temp->east != head)
	{
		if (count < (num_rows-1) * num_cols)
		{
			search = temp;
			for (int i = 0; i < num_cols; i++)
			{
				search = search->east;
			}
			temp->south = search;
		}
		else 
		{
			search = temp;
			for (int i = 0; i < num_cols + 1; i++)
			{
				search = search->east;
			}
			temp->south = search;
		}
		count++;
		temp = temp->east;
	}
	if (temp->east == head) temp->south = head;
	temp.reset();
	search.reset();
}

ring::~ring()
{
	shared_ptr<node> _delete = head;
	shared_ptr<node> next;
	if (head != nullptr)
	{
		for (int i = 0; i < num_cols; i++)
		{
			next = _delete->east;
			_delete->east.reset();
			_delete->south.reset();
			_delete = next;
		}
		_delete.reset();
		head.reset();
		next.reset();
	}
}

void
ring::operator=(const ring &b) // L-value
{
	shared_ptr<node> _delete = head;
	if (head != nullptr)
	{
		
		for (int i = 0; i < num_cols; i++)
		{
			_delete->east.reset();
			_delete->south.reset();
			_delete = _delete->east;
		}
	}
	_delete.reset();
	head.reset();
	
	num_rows = b.num_rows;
	num_cols = b.num_cols;

	shared_ptr<node> _copy;
	shared_ptr<node> temp = b.head;
	for (int i = 0; i < (b.num_cols * b.num_rows)-1; i++)
	{
		if (0 == i)
		{
			_copy = make_shared<node>(temp->value);
			head = _copy;
		}
		_copy->east = make_shared<node>(temp->east->value);
		temp = temp->east;
		_copy = _copy->east;
	}
	_copy->east = head;

	int count = 0;
	temp = head;
	shared_ptr<node> searchC;
	while (temp->east != head)
	{
		if (count < (num_rows - 1) * num_cols)
		{
			searchC = temp;
			for (int i = 0; i < num_cols; i++)
			{
				searchC = searchC->east;
			}
			temp->south = searchC;
		}
		else
		{
			searchC = temp;
			for (int i = 0; i < num_cols + 1; i++)
			{
				searchC = searchC->east;
			}
			temp->south = searchC;
		}
		count++;
		temp = temp->east;
	}
	if (temp->east == head) temp->south = head;

	_copy.reset();
	temp.reset();
	searchC.reset();
}

void
ring::operator=(ring &&b)// L-value
{
	num_rows = b.num_rows;
	num_cols = b.num_cols;
	head = b.head;
	b.head.reset();
}

ring::ring(const ring &r):ring()
{
	shared_ptr<node> _delete = head;
	if (head != nullptr)
	{
		for (int i = 0; i < num_cols; i++)
		{
			_delete->east.reset();
			_delete->south.reset();
			_delete = _delete->east;
		}
	}
	_delete.reset();
	head.reset();

	num_rows = r.num_rows;
	num_cols = r.num_cols;

	shared_ptr<node> _copy;
	shared_ptr<node> temp = r.head;
	for (int i = 0; i < (r.num_cols * r.num_rows) - 1; i++)
	{
		if (0 == i)
		{
			_copy = make_shared<node>(temp->value);
			head = _copy;
		}
		_copy->east = make_shared<node>(temp->east->value);
		temp = temp->east;
		_copy = _copy->east;
	}
	_copy->east = head;

	int count = 0;
	temp = head;
	shared_ptr<node> searchC;
	while (temp->east != head)
	{
		if (count < (num_rows - 1) * num_cols)
		{
			searchC = temp;
			for (int i = 0; i < num_cols; i++)
			{
				searchC = searchC->east;
			}
			temp->south = searchC;
		}
		else
		{
			searchC = temp;
			for (int i = 0; i < num_cols + 1; i++)
			{
				searchC = searchC->east;
			}
			temp->south = searchC;
		}
		count++;
		temp = temp->east;
	}
	if (temp->east == head) temp->south = head;

	_copy.reset();
	temp.reset();
	searchC.reset();
}

ring::ring(ring &&r) :ring() //move construtor
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
}

ring::ring(const initializer_list<int> &V) :ring()
{
	auto r = V.begin();
	num_rows = *r;
	r++;
	num_cols = *r;
	r++;
	shared_ptr<node> initializer;
	for (int in = 0; in < (num_cols * num_rows) - 1; in++)
	{
		if (in == 0)
		{
			initializer = make_shared<node>(*r);
			head = initializer;
			r++;
		}
		initializer->east = make_shared<node>(*r);
		initializer = initializer->east;
		if (r != V.end())
		{
			r++;
		}
	}
	initializer->east = head;


	int count = 0;
	initializer = head;
	shared_ptr<node> searchS;
	while (initializer->east != head)
	{
		if (count < (num_rows - 1) * num_cols)
		{
			searchS = initializer;
			for (int i = 0; i < num_cols; i++)
			{
				searchS = searchS->east;
			}
			initializer->south = searchS;
		}
		else
		{
			searchS = initializer;
			for (int i = 0; i < num_cols + 1; i++)
			{
				searchS = searchS->east;
			}
			initializer->south = searchS;
		}
		count++;
		initializer = initializer->east;
	}
	if (initializer->east == head) initializer->south = head;

	searchS.reset();
	initializer.reset();

}

int& 
ring ::operator[](int a)
{
	shared_ptr<node> find = head;
	for (int i = 0; i < a - 1; i++)
	{
		find = find->east;
	}
	return find->value;
	find.reset();
}

int & 
ring::operator[](pair<int, int> p)
{
	shared_ptr<node> findPair = head;
	int _find = 0;
	if (p.first == 1)_find = 1 * num_cols + p.second;
	else if (p.first > 1) _find = (p.first - 1)* num_cols + p.second;
	for (int i = 0; i < _find - 1; i++)
	{
		findPair = findPair->east;
	}
	return findPair->value;
	findPair.reset();
}

void
ring::DelCol(int d)
{
	//delete the #1 col
	shared_ptr<node> temp = head;
	if (0 == d)
	{
		//clean east
		for (int i = 0; i < num_cols - 1; i++)
		{
			temp = temp->east;
		}
		while (temp->east != head)
		{
			temp->east = temp->east->east;
			temp = temp->south;
		}
		temp->east = head->east;
		temp->south = head->east;

		//clean south
		head = head->east;
		temp.reset();
	}
	else
	{
		for (size_t i = 0; i < d - 1; i++)
		{
			temp = temp->east;
		}
		for (int d = 0; d < num_rows; d++)
		{
			temp->east = temp->east->east;
			temp = temp->south;
		}
		temp->south.reset(); //first item of the target col;
		temp.reset();
	}
	num_cols--;
}

ring
ring::Threetimes()
{
	ring temp;
	temp.num_cols = num_cols;
	temp.num_rows = num_rows;
	shared_ptr<node> _copy;
	shared_ptr<node> source = head;
	for (size_t i = 0; i < (temp.num_cols * temp.num_rows) - 1; i++)
	{
		if (0 == i)
		{
			_copy = make_shared<node>(3*(source->value));
			temp.head = _copy;
		}
		_copy->east = make_shared<node>(3*(source->east->value));
		source = source->east;
		_copy = _copy->east;
	}
	_copy->east = temp.head;

	int count = 0;
	_copy = temp.head;
	shared_ptr<node> searchC;
	while (_copy->east != temp.head)
	{
		if (count < (num_rows - 1) * num_cols)
		{
			searchC = _copy;
			for (int i = 0; i < num_cols; i++)
			{
				searchC = searchC->east;
			}
			_copy->south = searchC;
		}
		else
		{
			searchC = _copy;
			for (int i = 0; i < num_cols + 1; i++)
			{
				searchC = searchC->east;
			}
			_copy->south = searchC;
		}
		count++;
		_copy = _copy->east;
	}
	if (_copy->east == head) _copy->south = head;

	_copy.reset();
	source.reset();
	searchC.reset();
	return move(temp);
}
int main() 
{

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}