/*
 HW5
 Vishnupriya Bakthisaran
 vbakthis@syr.edu
 920955925
 
 Works Cited:
    https://www.linkedin.com/learning/c-plus-plus-smart-pointers
    https://www.geeksforgeeks.org/construct-linked-list-2d-matrix/
    Consulted professor's lecture notes.
    Consulted Karthik Sama.
*/

#include <iostream>
#include <memory>
using namespace std;

class node {
public:
    shared_ptr<node> east;
    shared_ptr<node> south;
    int value;
    node() {}
    node(int i) { value = i; }
};

class ring {
public:
    //Implement all functions described below
    //function operator[] can be invoked by other functions
    shared_ptr<node> head;
    int num_rows;
    int num_cols;
    ring() {}
    ring(int i, int j);//constructor
    //i rows and j cols
    //values from 0 to i*j-1
    //See the photo for ring structures.
    
    ~ring();//destructor; do as little work as possible
    ring(const ring &r); //copy constructor
    ring(ring &&r); //move constructor
    void operator=(ring &&r);//R-value operator=
    void operator=(const ring &r); //L-value operator=
    ring(const initializer_list<int> &V);//see the explanation in main function
    int & operator[](int a);
    int & operator[](pair<int, int> p); //first is row number and second is col number
    
    void DelCol(int i);//delete col i of *this
    ring Threetimes();
    //return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
    friend ostream & operator<<(ostream & str, const ring &R);
};
//overload operator<<
ostream & operator<<(ostream & s, const ring &P){
    if (P.head != nullptr){
        shared_ptr<node> curr = P.head;
        s << curr->value<<" ";
        curr = curr->east;
        
        if (curr != nullptr){
            int count = 0;
            count++;
            count++;
            while (curr != P.head){
                s << curr->value << " ";
                if (count % P.num_cols == 0)
                    s << endl;
                curr = curr->east;
                count++;
            }
        }
    }
    return s;
}

ring::ring(int i, int j){
    num_rows = i;
    num_cols = j;
    
    if (!(num_rows == 0 || num_cols == 0)){
        shared_ptr<node> curr = head,currSouth;
        for (int val = 0; val < (num_rows*num_cols); val++){
            if (!curr){
                curr = make_shared<node>(val);
                head = curr;
            }
            else{
                curr->east = make_shared<node>(val);
                curr = curr->east;
            }
        }
        curr->east = head;
        currSouth = head;
        
        if (num_rows == 1){
            currSouth = head->east;
        }
        else{
            
            for (int z = 1; z <= num_cols; z++){
                currSouth = currSouth->east;
            }
        }
        curr = head;
        
        while (currSouth->east != head){
            curr->south = currSouth;
            curr = curr->east;
            currSouth = currSouth->east;
        }
        
        curr->south = currSouth;
        currSouth = head->east;
        curr = curr->east;
        
        while (curr->east != head){
            
            curr->south = currSouth;
            curr = curr->east;
            currSouth = currSouth->east;
        }
        curr->south = head;
    }
}

//Copy constructor
ring::ring(const ring & P) :ring(){
    if (P.head!=nullptr){
        
        num_rows = P.num_rows;
        num_cols = P.num_cols;
        
        if (num_rows > 1 && num_cols > 1){

            shared_ptr<node> curr = head, currSouth, currP = P.head;
            for (int val = 0; val < (num_rows*num_cols); val++){
                
                if (!curr){
                    curr = make_shared<node>(currP->value);
                    head = curr;
                    currP = currP->east;
                }
                else{
                    curr->east = make_shared<node>(currP->value);
                    curr = curr->east;
                    currP = currP->east;
                }
            }
            
            curr->east = head;
            currSouth = head;
            
            if (num_rows == 1){
                currSouth = head->east;
            }
            else{
                
                for (int z = 1; z <= num_cols; z++){
                    currSouth = currSouth->east;
                }
            }
            
            curr = head;
           
            while (currSouth->east != head){
                curr->south = currSouth;
                curr = curr->east;
                currSouth = currSouth->east;
            }
            
            curr->south = currSouth;
            currSouth = head->east;
            curr = curr->east;
            
            while (curr->east != head){
                curr->south = currSouth;
                curr = curr->east;
                currSouth = currSouth->east;
            }
            curr->south = head;
        }
    }
}
//Initializer
ring::ring(const initializer_list<int>& list) :ring(){
    if (list.size() != 0){
        
        num_rows = *(list.begin());
        num_cols = *(list.begin() + 1);
        auto list_val = list.begin() + 2;
        
        shared_ptr<node> curr = head, currSouth;
        for (int val = 0; val < list.size() - 2; val++){
            
            if (!curr){

                curr = make_shared<node>(*list_val);
                list_val++;
                head = curr;
            }
            else{

                curr->east = make_shared<node>(*list_val);
                curr = curr->east;
                list_val++;
            }
        }
        curr->east = head;
        currSouth = head;
        
        if (num_rows == 1){
            currSouth = head->east;
        }
        else{
            
            for (int z = 1; z <= num_cols; z++){
                currSouth = currSouth->east;
            }
        }
        curr = head;

        while (currSouth->east != head){

            curr->south = currSouth;
            curr = curr->east;
            currSouth = currSouth->east;
        }

        curr->south = currSouth;
        currSouth = head->east;
        curr = curr->east;

        while (curr->east != head){

            curr->south = currSouth;
            curr = curr->east;
            currSouth = currSouth->east;
        }
        curr->south = head;
    }
}

//Move constructor
ring::ring(ring && P):ring() {
    num_rows = P.num_rows;
    num_cols = P.num_cols;
    head = P.head;
    P.head = nullptr;
}

ring::~ring(){
    if (head != nullptr){
        shared_ptr<node> curr = head;
        if (num_rows == 1){
            head->east.reset();
            head->south.reset();
        }
        else{
            
            for (int i = 1; i < num_rows; i++){
                curr->east->south = nullptr;
                curr->east = nullptr;
                curr = curr->south;
            }
            curr->south = nullptr;
            curr->east = nullptr;
        }
    }
}



int &ring::operator[](pair<int, int> index){
    if (head != nullptr){
        if (!(index.first > num_rows || index.second > num_cols || index.first < 0 || index.second < 0)){
            
            shared_ptr<node> curr = head;
            for (int i = 0; i < index.second; i++){
                curr = curr->east;
            }
            for (int j = 0; j < index.first; j++){
                curr = curr->south;
            }
            return curr->value;
        }
    }
    
    //return index.first;
    //return index.second;
}

int & ring::operator[](int index){
    if (head != nullptr)
    {
        shared_ptr<node> curr = head;

        if (index >= 0 && index < (num_rows*num_cols))
        {
            int count = 0;
            while (count < index)
            {
                curr = curr->east;
                count++;
            }
            return curr->value;
        }
    }
    
    //return index;
}
void ring::DelCol(int column){
    if (head !=nullptr)
    {
        shared_ptr<node> curr = head;

        if (!(column < 0 || column >= num_cols))
        {
            
            for (int i = 1; i < column; i++){
                curr = curr->east;
            }
            if (column == 0) {
                curr = head;
                for (int i = 1; i < num_cols; i++){
                    curr = curr->east;
                }
            }
            
            for (int i = 1; i < num_rows; i++){
                curr->east->south.reset();
                curr->east = curr->east->east;
                curr = curr->south;
            }
            
            curr->east = curr->east->east;
            if (column == 0) {
                head = curr->east;
            }
            if (column == num_cols - 1) {
                curr->south = head;
            }
            else {
                curr->south = curr->south->east;
            }

            num_cols--;
        }
    }
}

//L value
void ring::operator=(const ring & P){
    if (head!=nullptr)
    {
        shared_ptr<node> curr = head;
        if (num_rows == 1)
        {
            head->east.reset();
            head->south.reset();
        }
        else
        {
            for (int i = 1; i < num_rows; i++)
            {
                curr->east->south = nullptr;
                curr->east = nullptr;
                curr = curr->south;
            }
            curr->south = nullptr;
            curr->east = nullptr;
        }
    }
    
    if (P.head != nullptr)
    {
        num_rows = P.num_rows;
        num_cols = P.num_cols;
        
        if (num_rows > 1 && num_cols > 1)
        {
            shared_ptr<node> curr = head, currSouth, currP = P.head;
            for (int val = 0; val < (num_rows*num_cols); val++)
            {
                if (!curr)
                {
                    curr = make_shared<node>(currP->value);
                    head = curr;
                    currP = currP->east;
                }
                else
                {
                    curr->east = make_shared<node>(currP->value);
                    curr = curr->east;
                    currP = currP->east;
                }
            }
            curr->east = head;
            
            currSouth = head;
            if (num_rows == 1)
            {
                currSouth = head->east;
            }
            else
            {
                for (int z = 1; z <= num_cols; z++)
                {
                    currSouth = currSouth->east;
                }
            }
            curr = head;
            while (currSouth->east != head)
            {
                curr->south = currSouth;
                curr = curr->east;
                currSouth = currSouth->east;
            }
            curr->south = currSouth;
            currSouth = head->east;
            curr = curr->east;
            while (curr->east != head)
            {
                curr->south = currSouth;
                curr = curr->east;
                currSouth = currSouth->east;
            }
            curr->south = head;
        }
    }
    
}

//R value
void ring::operator=(ring &&P){
    if (head!=nullptr)
    {
        shared_ptr<node> curr = head;
        
        for (int i = 1; i < num_rows; i++){
            curr->east->south = nullptr;
            curr->east = nullptr;
            curr = curr->south;
        }
        head = nullptr;
    }
    
    head = P.head;
    num_rows = P.num_rows;
    num_cols = P.num_cols;
    P.head = nullptr;
}

ring ring::Threetimes(){
    ring temp = *this;
    shared_ptr<node> curr = temp.head;
    if (temp.head!=nullptr)
    {
        temp.head->value = 3 * temp.head->value;
        curr = curr->east;
        while (curr != temp.head)
        {
            curr->value = 3*curr->value;
            curr = curr->east;
        }
    }
    return temp;
    
}

int main(){

    ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
    cout << R1 << endl;
    R1[14] = 1000;
    R1[{2, 4}] = 2000;
    cout << R1[14] << " " << R1[{2, 4}] << endl;
    R1.DelCol(3);
    cout << R1 << endl;
    R1.DelCol(4);
    cout << R1 << endl;
    R1.DelCol(0);
    cout << R1 << endl;
    shared_ptr<ring> p1 = make_shared<ring>(3, 5);
    cout << *p1 << endl;
    p1.reset();
    ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
    //first two numbers are num_rows and num_cols; followed by values of nodes of ring
    cout << R2 << endl;
    ring R3(R2);
    cout << R3 << endl;
    ring R4;
    R4 = R3;
    cout << R4 << endl;
    ring R5;
    R5 = R4.Threetimes();
    cout << R5 << endl;
    
    getchar();
    getchar();
    return 0;
}
