// CIS554 Spring 19
// Homework 5
// Samuel Haws (sahaws@syr.edu)

//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

ring::ring(int i, int j){
	num_rows = i;
	num_cols = j;
	shared_ptr<node> p1, p2;
	p1 = make_shared<node>(0);
	head = p1;
	int newVal = 0; //will keep track of numerical value of next node to be created
	while (p1->value < (i*j - 1)) { //create ring nodes with east ptrs
		p2 = make_shared<node>(++newVal);
		p1->east = p2;
		p1 = p1->east;
	}
	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1; 
		//while (p2->value % j != 0)
		for (int m = 0; m < j; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (i - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1; 
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break; 
		}
	}
	

	//shared_ptr<node> p1 = make_shared<node>(rand() % 24);
}

void ring::operator=(ring && r){
	shared_ptr<node> p1, p2;
	shared_ptr<node> rp1, rp2;
	rp1 = r.head;
	head = make_shared<node>(rp1->value);
	p1 = head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	if (r.head->east == r.head || !r.head->east)
		return;
	rp1 = rp1->east;
	do {//create ring nodes with east ptrs
		p2 = make_shared<node>(rp1->value);
		p1->east = p2;
		p1 = p1->east;
		rp1 = rp1->east;
	} while (rp1 != r.head);

	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}
}

void ring::operator=(const ring & r){
	shared_ptr<node> p1, p2;
	shared_ptr<node> rp1, rp2;
	rp1 = r.head;
	head = make_shared<node>(rp1->value);
	p1 = head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	if (r.head->east == r.head || !r.head->east)
		return;
	rp1 = rp1->east;
	do {//create ring nodes with east ptrs
		p2 = make_shared<node>(rp1->value);
		p1->east = p2;
		p1 = p1->east;
		rp1 = rp1->east;
	} while (rp1 != r.head);

	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}
}

ring::ring(const initializer_list<int>& V){
	if (V.begin() == V.end() || V.size() < 2)
		return;
	auto it = V.begin();
	int itcounter = 0;
	shared_ptr<node> p1, p2;
	while (it != V.end()) {
		if (itcounter == 0)
			num_rows = *it;
		else if (itcounter == 1)
			num_cols = *it;
		else if (itcounter == 2) {
			p1 = make_shared<node>(*it);
			head = p1;
		}
		else {//create ring nodes with east ptrs
			p2 = make_shared<node>(*it);
			p1->east = p2;
			p1 = p1->east;
		}
		itcounter++;
		it++;
	}
	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}

}

int & ring::operator[](int a){
	if (head) {
		shared_ptr<node> p1 = head;
		for (int i = 0; i < a; i++)
			p1 = p1->east;
		return p1->value;
	}
}


int & ring::operator[](pair<int, int> p){ //row, column
	if (head) {
		shared_ptr<node> p1 = head;
		for (int i = 0; i < p.first; i++)
			p1 = p1->south;
		for (int j = 0; j < p.second; j++)
			p1 = p1->east;
		return p1->value;
	}
}

void ring::DelCol(int i) {
	shared_ptr<node> p1, p2, p3;
	p3 = head;
	if (i != 0)
		for (int z = 0; z < i+1; z++)
			p3 = p3->east; //p2 moves across top row to be now bottom to top south ptr loop across col i-1 to col i+1
	for (int x = num_rows-1; x >= 0; x--) { //fix east ptrs
		p1 = head;
		if (i == 0)
			for (int m = 0; m < num_cols-1; m++) //go to column left of delete column (to grab element directly west of node in each row to be deleted)
				p1 = p1->east;
		else
			for (int m = 0; m < i-1; m++) //go to column left of delete column (to grab element directly west of node in each row to be deleted)
				p1 = p1->east;
		for (int n = 0; n < x; n++) //go to row with element to be deleted
			p1 = p1->south;
		p2 = p1->east;
		p1->east = p2->east;
		p2.reset();
	}
	//fix south ptr
	p1 = head;
	p2 = head;
	if (i == 0) {
		for (int m = 0; m < num_cols-1; m++) //go to column left of delete column (to grab element directly west of node in each row to be deleted)
			p1 = p1->east;
	}
	else
		for (int m = 0; m < i - 1; m++) 
			p1 = p1->east;
	for (int n = 0; n < num_rows - 1; n++) 
		p1 = p1->south;
	if (i == num_cols - 1)
		p3 = head;
	if (i == 0)
		p3 = p3->east;
	p1->south = p3;
	if (i == 0)
		head = p3;

	num_cols--;
}

ring ring::Threetimes()
{
	shared_ptr<node> p1, p2, p3;
	p1 = head;
	p3 = head;
	head = make_shared<node>(p1->value * 3);
	p1 = p1->east;
	p3 = head;
	int i = 0;
	do {//create ring nodes with east ptrs
		p2 = make_shared<node>(p1->value * 3);
		p1 = p1->east;
		p3->east = p2;
		p3 = p3->east;
		i++;
	} while (head != p3 && i < num_rows * num_cols - 1);

	p3->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p3->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}
	return *this;
}


ring::~ring() {
}

ring::ring(const ring & r){ //copy constructor def
	shared_ptr<node> p1, p2;
	shared_ptr<node> rp1, rp2;
	rp1 = r.head;
	head = make_shared<node>(rp1->value);
	p1 = head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	if (r.head->east == r.head || !r.head->east)
		return;
	rp1 = rp1->east;
	do {//create ring nodes with east ptrs
		p2 = make_shared<node>(rp1->value);
		p1->east = p2;
		p1 = p1->east;
		rp1 = rp1->east;
	} while (rp1 != r.head);

	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}
}

ring::ring(ring && r){
	shared_ptr<node> p1, p2;
	shared_ptr<node> rp1, rp2;
	rp1 = r.head;
	head = make_shared<node>(rp1->value);
	p1 = head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	if (r.head->east == r.head || !r.head->east)
		return;
	rp1 = rp1->east;
	do {//create ring nodes with east ptrs
		p2 = make_shared<node>(rp1->value);
		p1->east = p2;
		p1 = p1->east;
		rp1 = rp1->east;
	} while (rp1 != r.head);

	p1->east = head; //wrap it up, creates east-ptr cycle in graph
	p1 = p1->east; //p1 == head
	int rowCount = 0; //used in counting south ptrs assigned (in order to effectively jump to next column)
	while (true) { //assign south ptrs
		p2 = p1;
		//while (p2->value % j != 0)
		for (int m = 0; m < num_cols; m++) //j, j, j then up to first row is j + 1
			p2 = p2->east;
		if (rowCount == (num_rows - 1)) {
			p2 = p2->east;//jump to next column top
			rowCount = -1;
		}
		p1->south = p2;
		rowCount++;
		p1 = p2;
		if (p1->east == head) {
			p1->south = head; //create south-ptr cycle
			break;
		}
	}
}

//overload operator<<
ostream & operator<<(ostream &str, const ring &r) {
	shared_ptr<node> p1 = r.head;
	int i = 0;
	while (p1 != nullptr) {
		str << p1->value << " ";
		p1 = p1->east;
		i++;
		if (i == r.num_cols) {
			i = 0;
			str << "\n";
		}
		if (p1 == r.head) 
			return str;	
	}
	return str;
}

int main() {

	
	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	
	ring R3(R2);
	cout << R3 << endl;
	
	ring R4;
	R4 = R3;
	cout << R4 << endl;

	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}