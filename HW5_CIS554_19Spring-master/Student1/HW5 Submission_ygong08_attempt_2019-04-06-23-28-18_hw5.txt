//HW5 Due: April 7 (Sunday) at 11:59PM
//Yichun Gong
//514960684
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring& r); //copy constructor
	ring(ring&& r); //move constructor
	void operator=(ring&& r);//R-value operator=
	void operator=(const ring& r); //L-value operator=
	ring(const initializer_list<int>& V);//see the explanation in main function
	int& operator[](int a);
	int& operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

	ring::ring(int i, int j) {
		num_rows = i;
		num_cols = j;
		head = shared_ptr<node>(new node(0));
		auto ptr = head;
		for (int k = 1; k < i * j; k++) {
			ptr->east = shared_ptr<node>(new node(k));
			ptr = ptr->east;
		}
		ptr->east = head;
		ptr = head;
		auto ptc = head;
		auto temp = head->east;
		for (int l = 0; l < i * j - 1; l++) {
			for (int k = 0; k < j; k++) {
				ptr = ptr->east;
			}
			ptc->south = ptr;
			ptc = temp;
			ptr = temp;
			temp = ptr->east;
		}
		ptc->south = head;
	}
	
	ring::ring(const ring& r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		auto p1 = r.head;
		head = shared_ptr<node>(new node(p1->value));
		auto p2 = head;
		p1 = p1->east;
		while (p1 != r.head) {
			p2->east = shared_ptr<node>(new node(p1->value));
			p1 = p1->east;
			p2 = p2->east;
		}
		p2->east = head;
		auto ptr = head;
		auto ptc = head;
		auto temp = head->east;
		for (int l = 0; l < num_rows * num_cols - 1; l++) {
			for (int k = 0; k < num_cols; k++) {
				ptr = ptr->east;
			}
			ptc->south = ptr;
			ptc = temp;
			ptr = temp;
			temp = ptr->east;
		}
		ptc->south = head;
	}

	ring::ring(ring&& r) {
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;
		r.head.reset();
	}

	ring::~ring() {
		if (!head) return;
		auto temp = head;
		auto ptr = head->east;
		auto ptc = head->south;
		temp->east.reset();
		temp->south.reset();
		for (int i = 0; i < num_cols - 1; i++) {
			temp = ptr;
			ptr = temp->east;
			temp->east.reset();
			temp->south.reset();
		}

		for (int j = 0; j < num_rows - 1; j++) {
			temp = ptc;
			ptc = temp->south;
			temp->south.reset();
			temp->east.reset();
		}
	}

	ring::ring(const initializer_list<int>& V) {
		auto it = V.begin();
		num_rows = *it;
		it++;
		num_cols = *it;
		it++;
		head = shared_ptr<node>(new node(*it));
		auto ptr = head;
		for (int k = 1; k < num_rows * num_cols; k++) {
			ptr->east = shared_ptr<node>(new node(*it));
			ptr = ptr->east;
			it++;
		}
		ptr->east = head;
		ptr = head;
		auto ptc = head;
		auto temp = head->east;
		for (int l = 0; l < num_rows * num_cols - 1; l++) {
			for (int k = 0; k < num_cols; k++) {
				ptr = ptr->east;
			}
			ptc->south = ptr;
			ptc = temp;
			ptr = temp;
			temp = ptr->east;
		}
		ptc->south = head;
	}
//overload operator<<
	ostream & operator<<(ostream& str, const ring& R) {
		shared_ptr<node> p = R.head;
		if (!R.head) { return str; }
		for(int i = 0; i < R.num_rows; i++){
			for (int j = 0; j < R.num_cols; j++) {
				str << p->value << " ";
				p = p->east;
			}
			str << endl;
		}
		return str;
	}

	void ring::operator=(ring&& r) {
		if (head) {
			auto temp = head;
			auto ptr = head->east;
			auto ptc = head->south;
			temp->east.reset();
			temp->south.reset();
			for (int i = 0; i < num_cols - 1; i++) {
				temp = ptr;
				ptr = temp->east;
				temp->east.reset();
				temp->south.reset();
			}

			for (int j = 0; j < num_rows - 1; j++) {
				temp = ptc;
				ptc = temp->south;
				temp->south.reset();
				temp->east.reset();
			}
		}
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		head = r.head;
		r.head.reset();
	}

	void ring::operator=(const ring& r) {
		if (head) {
			auto temp = head;
			auto ptr = head->east;
			auto ptc = head->south;
			temp->east.reset();
			temp->south.reset();
			for (int i = 0; i < num_cols - 1; i++) {
				temp = ptr;
				ptr = temp->east;
				temp->east.reset();
				temp->south.reset();
			}

			for (int j = 0; j < num_rows - 1; j++) {
				temp = ptc;
				ptc = temp->south;
				temp->south.reset();
				temp->east.reset();
			}
		}
		num_rows = r.num_rows;
		num_cols = r.num_cols;
		auto p1 = r.head;
		head = shared_ptr<node>(new node(p1->value));
		auto p2 = head;
		p1 = p1->east;
		while (p1 != r.head) {
			p2->east = shared_ptr<node>(new node(p1->value));
			p1 = p1->east;
			p2 = p2->east;
		}
		p2->east = head;
		auto ptr = head;
		auto ptc = head;
		auto temp = head->east;
		for (int l = 0; l < num_rows * num_cols - 1; l++) {
			for (int k = 0; k < num_cols; k++) {
				ptr = ptr->east;
			}
			ptc->south = ptr;
			ptc = temp;
			ptr = temp;
			temp = ptr->east;
		}
		ptc->south = head;
	}

	int& ring::operator[](int a) {
		auto ptr = head;
		for (int i = 0; i < a; i++) { ptr = ptr->east; }
		return ptr->value;
	}

	int& ring::operator[](pair<int, int> p) {
		auto ptr = head;
		for (int i = 0; i < p.first; i++) { ptr = ptr->south; }
		for (int j = 0; j < p.second; j++) { ptr = ptr->east; }
		return ptr->value;
	}

	void ring::DelCol(int i) {
		num_cols--;
		auto ptr = head;
		if (i == 0) {
			head = head->east; 
			auto temp = head->south;
			for (int j = 0; j < num_cols; j++) { ptr = ptr->east; }
			ptr->east = temp;
			for (int k = 0; k < num_rows - 1; k++) {
				ptr = ptr->south;
				temp = temp->south;
				ptr->east = temp;
			}
			ptr->south = head;
		}
		else {
			for (int j = 0; j < i - 1; j++) { ptr = ptr->east; }
			auto temp = ptr->east;
			auto mark = ptr->east;
			ptr->east = temp->east;
			for (int k = 0; k < num_rows - 1; k++) {
				ptr = ptr->south;
				temp = temp->south;
				ptr->east = temp->east;
			}
			ptr->south = mark;
		}
	}

	ring ring::Threetimes() {
		ring r(*this);
		auto ptr = r.head;
		ptr->value = 3 * ptr->value;
		ptr = ptr->east;
		while (ptr != r.head) {
			ptr->value = 3 * ptr->value;
			ptr = ptr->east;
		}
		return r;
	}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}