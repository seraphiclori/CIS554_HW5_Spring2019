//Name: Sakshi Sanjay Salokhe
//Email: ssalokhe@syr.edu
//SUID: 201026946
//Date: April 07, 2019

//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};


//implementation
//constructor
ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;

	shared_ptr<node> last; //to keep track of the last node
	int last_elem = i * j;

	for (int val = 0; val < last_elem; val++) //create all nodes and assign them values from 0 to i*j-1
	{
		shared_ptr<node> p;
		p = make_shared<node>(val);
		if (!head)
		{
			head = last = p;
			p->east = p;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
		}
	}

	shared_ptr<node> p1, p2, temp;
	p1 = head;
	p2 = head;
	temp = head;
	int last_elem1 = num_rows * num_cols;
	for (int k = 0; k < last_elem1; k++)
	{
		int x = 0;
		while (x < num_cols) //to make nodes for given column number
		{
			p1 = p1->east;
			x++;
		}

		if (p1 == head)//to keep a track with south nodes, we keep moving temp node with p
		{
			p1 = p1->east;
			temp = p1;
		}

		p2->south = p1;
		p2 = p1; //connect last element to head

		if (p2->south == head) //last element should be connected to head
		{
			last = p1;
			p1->east = head;
			break;
		}
	}
}
//end of constructor

//destructor
ring::~ring()
{
	head.reset(); //after all nodes are deleted, remove the head
	num_rows = 0; //reset the number of rows and columns
	num_cols = 0;

	/*
	shared_ptr<node> p, temp; // delete p and temp is to move to east of p
	p = head;
	temp = head;

	shared_ptr<node> p1, temp1; // delete p1 and temp1 is to move to south of p1
	p1 = head;
	temp1 = head;

	int last_elem = num_rows * num_cols;

	for (int count1 = 0; count1 < (last_elem - 1); count1++) //delete all nodes and all the linkes i.e. east and south
	{
		temp = p->east;
		p.reset();

		temp1 = p1->south;
		p1.reset();

		p = temp;
		p1 = temp1;
		
	}*/
	//p->east.reset();
	//p1->south.reset();
	//head->east.reset();
	//head->south.reset();
}
//end of destructor

//copy constructor
ring::ring(const ring &r) : ring()
{
	//cout << "entering copy const " << endl;
	shared_ptr<node> temp;
	temp = r.head; // copy head to the new ring
	num_rows = r.num_rows; //copy number of rows
	num_cols = r.num_cols; //copy number of columns

	shared_ptr<node> last;
	int last_elem = num_rows * num_cols;

	for (int val = 0; val < last_elem; val++) //copy all other nodes to new ring and make east links
	{
		shared_ptr<node> p;
		p = make_shared<node>(temp->value);

		if (!head)
		{
			head = last = p;
			p->east = p;
			temp = temp->east;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
			temp = temp->east;
		}
	}

	shared_ptr<node> p1, p2, temp1;
	p1 = head;
	p2 = head;
	temp1 = head;

	for (int k = 0; k < last_elem; k++) //making south links
	{
		int x = 0;
		while (x < num_cols)
		{
			p1 = p1->east;
			x++;
		}

		if (p1 == head)
		{
			p1 = p1->east;
			temp1 = p1;
		}

		p2->south = p1;
		p2 = p1;

		if (p2->south == head)
		{
			p1->east = head;
			break;
		}
	}

}
//end of copy constructor

//L-value operator
void ring::operator=(const ring &r)
{
	shared_ptr<node> temp;
	temp = r.head; // copy head to the new ring
	num_rows = r.num_rows; //copy number of rows
	num_cols = r.num_cols; //copy number of columns

	shared_ptr<node> last;
	int last_elem = num_rows * num_cols;

	for (int val = 0; val < last_elem; val++) //copy all other nodes to new ring and make east links
	{
		shared_ptr<node> p;
		p = make_shared<node>(temp->value);

		if (!head)
		{
			head = last = p;
			p->east = p;
			temp = temp->east;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
			temp = temp->east;
		}
	}

	shared_ptr<node> p1, p2, temp1;
	p1 = head;
	p2 = head;
	temp1 = head;

	for (int k = 0; k < last_elem; k++) //making south links
	{
		int x = 0;
		while (x < num_cols)
		{
			p1 = p1->east;
			x++;
		}

		if (p1 == head)
		{
			p1 = p1->east;
			temp1 = p1;
		}

		p2->south = p1;
		p2 = p1;

		if (p2->south == head)
		{
			p1->east = head;
			break;
		}
	}
}
//end of L-value operator

//move constructor
ring::ring(ring &&r) : ring()//r.num_rows, r.num_cols)
{
	/*
	shared_ptr<node> p = r.head;
	shared_ptr<node> temp;
	while (p->east != r.head)
	{
		value = p->value;
		temp = p->east;
		p.reset();
		p = temp;

	}
	*/
	//cout << "enter Move Opertor" << endl;

	num_rows = r.num_rows; //copy the number of rows
	num_cols = r.num_cols; //copy the number of columns
	head = r.head; //copy head

	//r.head.reset();
	//r.num_cols = 0;
	//r.num_rows = 0;
	//r.~ring();

	//cout << "exit from move operator" << endl;
}
//end of move constructor

//r-value operator
void ring::operator=(ring &&r)
{
	//cout << "\nenter Rvalue operator" << endl;
	num_rows = r.num_rows;  //copy the number of rows
	num_cols = r.num_cols; //copy the number of columns
	head = r.head; //copy head

	//r.head.reset();

	//r.num_cols = 0;
	//r.num_rows = 0;
	//r.~ring();

	//cout << "\n exit Rvalue operator" << endl;
}
//end of R-value operator

//Initializer list
ring::ring(const initializer_list<int> &V) : ring()
{
	initializer_list<int>::iterator it = V.begin();

	num_rows = *it;
	it++;

	num_cols = *it;
	it++;

	shared_ptr<node> last;
	for (initializer_list<int>::iterator i = it; i != V.end(); i++)
	{
		shared_ptr<node> p = make_shared<node>(*i);
		if (!head)
		{
			head = last = p;
			p->east = p;
		}
		else
		{
			last->east = p;
			last = p;
			p->east = head;
		}
	}

	shared_ptr<node> p1, p2, temp;
	p1 = head;
	p2 = head;
	temp = head;
	int last_elem = num_rows * num_cols;

	for (int k = 0; k < last_elem; k++)
	{
		int x = 0;
		while (x < num_cols)
		{
			p1 = p1->east;
			x++;
		}

		if (p1 == head)
		{
			p1 = p1->east;
			temp = p1;
		}
		p2->south = p1;
		p2 = p1;

		if (p2->south == head)
		{
			p1->east = head;
			break;
		}
	}
}
//end of initializer list


//operator[]
int& ring:: operator[](int a)
{
	int last_elem = num_cols * num_rows;
	if (a >= last_elem || a < 0)
	{
		cout << "Index not in range!" << endl;
		shared_ptr<node> p1 = make_shared<node>(-1);
		return p1->value;
	}

	if (a == 0)
	{
		return head->value;
	}

	shared_ptr<node> p;
	p = head;

	for(int x = 0; x < a; x++)
	{
		p = p->east;	
	}
	//return p.get();
	return p->value;
}
//operator [] end

//pair operator[]
int& ring::operator[](pair<int, int> p)
{
	shared_ptr<node> temp;//, temp2;
	temp = head;

	for (int i = 0; i < p.first - 1; i++) //move south i rows
	{
		temp = temp->south;
	}
	for (int j = 0; j < p.second - 1; j++) //move east j columns
	{
		temp = temp->east;
	}

	return temp->value; //return value of final temp position
}
//pair operator [] end

//Delete Column
void ring::DelCol(int i)
{
	shared_ptr<node> p, p1;
	p = head;
	p1 = head->east;

	if (i > num_cols)
	{
		return;
	}

	if (i == 0)
	{
		return;
	}

	if (i == 1) //condition to be handled for the east connections coming from the last column
	{
		for (int j = 0; j != num_cols - 1; j++)
		{
			p = p->east;
			p1 = p1->east;
		}
	}

	if (i > 1 && i < num_cols && i != 0)
	{
		for (int k = 0; k > (i - 2); k++)
		{
			p = p->east;
			p1 = p1->east;
		}
	}

	for (int l = 0; l < num_rows - 1; l++)
	{
		p->east = p1->east;
		p1.reset(); //delete smart pointer

		p = p->south; //move ahead
		p1 = p->east;
	}

	p->east = p1->east;
	if (i == 1)
	{
		p->south = p1->east;
		head = p1->east;
	}
	else if (i > 1 && i < num_cols && i != 0)
	{
		p->south = p1->south;
	}

	p1.reset();
	num_cols--; //adjust the new number of columns
}
//end of Delete Column

//Three times
ring ring::Threetimes()
{
	shared_ptr<node> p;
	p = head;

	ring three_ring(num_rows, num_cols); //new ring
	//cout << "??" << endl;

	shared_ptr<node> three_node;
	three_node = three_ring.head;

	int last_elem = num_rows * num_cols;
	//cout << "1" << endl;

	for (int i = 0; i < last_elem; i++)
	{
		three_node->value = 3 * (p->value);
		p = p->east;
		three_node = three_node->east;
	}

	//cout << "2" << endl;
	return move(three_ring); //move to L-value operator // calls destructor later
	//cout << "here end test" << endl;
}
//end of Three Times

//overload operator<<
ostream & operator<<(ostream &str, const ring &R)
{
	str << "\n";
	shared_ptr<node> p;
	p = R.head;

	if (!R.head)
	{
		return str;
	}

	str << p->value << "\t \t";
	p = p->east;

	int count1 = 1;
	while (p != R.head)
	{
		str << p->value << "\t \t";


		p = p->east;
		count1++;

		int columns_in_R = R.num_cols;

		//if (count1 == (columns_in_R)) //last column 
		if (count1 % columns_in_R == 0)
		{
			str << "\n";
		}
	}
	return str;
}
//operator overload << end

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	//cout << "check this" << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	//cout << "done" << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	//cout << R2 << endl;
	//ring R3(R2);
	//R2.~ring();
	//cout << " testing destructor \n" << R2 << endl;
	//cout << "end test" << endl;
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}