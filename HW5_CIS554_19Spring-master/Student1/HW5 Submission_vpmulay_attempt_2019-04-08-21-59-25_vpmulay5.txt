//HW5 Due: April 7 (Sunday) at 11:59PM
//Name: Varun Prakash Mulay
//SUID: 721214633
//email: vpmulay@syr.edu
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	//ring() { value = new int; }

	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//The constrcutor is below
ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;
	shared_ptr<node> tail;

	int k=0;
	int m = 0;
	int mat = num_rows * num_cols;

	while (k < i*j){
		shared_ptr<node> p = make_shared<node>(k);
		if (!head) {
			head = tail = p;
			p->east = p;
		}
		else {
			tail->east = p;
			tail = p;
			p->east = head;
		}
	k++;
	}
	
	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> h3 = head;
	while (m != mat){
		int i = 0;
		while(i<num_cols){
			h = h->east;
			i++;
		}

		if (h == h3){
			h = h->east;
			h3 = h;
		}

		h2->south = h;
		h2 = h;
		
		if (h->east == head){
			tail = h2;
			h2->south = head;
			break;
		}
		m++;
	}
}

// The little destructor below
ring::~ring(){
	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> a = head;
	shared_ptr<node> b = head;
	int count = 1;
	int mat = num_rows * num_cols;
	while (count != (mat-1)){
		a = h->east;
		b = h2->south;
		h.reset();
		h2.reset();
		h = a;
		h2 = b;
		count++;
	}
	head.reset();
	num_rows = 0;
	num_cols = 0;
}


// The copy constructor is below
ring::ring(const ring &r) : ring(){
	shared_ptr<node> temp = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	int k = 0;
	int m =0;
	int mat = num_rows * num_cols;

	while (k < num_rows*num_cols){
		shared_ptr<node> p = make_shared<node>(temp->value);
		if (!head) {
			head = tail = p;
			p->east = p;
			temp = temp->east;
		}
		else {
			tail->east = p;
			tail = p;
			p->east = head;
			temp = temp->east;
		}
	k++;
	}

	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> h3 = head;
	while (m != mat){
		int i = 0;
		while(i<num_cols){
			h = h->east;
			i++;
		}

		if (h == h3){
			h = h->east;
			h3 = h;
		}

		h2->south = h;
		h2 = h;
		
		if (h->east == head){
			tail = h2;
			h2->south = head;
			break;
		}
		m++;
	}
}

//The move constructor is below
ring::ring(ring &&r) : ring(){
	cout << "Entering the move operator section" << endl;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	cout << "Exiting the move operator section" << endl;
}

//The R-value operator is below
void ring::operator=(ring &&r){
	cout << "Entering the R-value section" << endl;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	cout << "Exiting the R-value section" << endl;
}



//The L-value below
void ring::operator=(const ring &r)
{
	shared_ptr<node> temp = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	int m = 0;
	int mat = num_rows * num_cols;

	for (int k = 0; k < mat; k++)
	{
		shared_ptr<node> p = make_shared<node>(temp->value);
		if (!head)
		{
			head = tail = p;
			p->east = p;
			temp = temp->east;
		}
		else
		{
			tail->east = p;
			tail = p;
			p->east = head;
			temp = temp->east;
		}
	}


	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> h3 = head;
	while (m != mat){
		int i = 0;
		while(i<num_cols){
			h = h->east;
			i++;
		}

		if (h == h3){
			h = h->east;
			h3 = h;
		}

		h2->south = h;
		h2 = h;
		
		if (h->east == head){
			tail = h2;
			h2->south = head;
			break;
		}
		m++;
	}
}

//The initializer is below
ring::ring(const initializer_list<int> &V) : ring()
{
	auto i = V.begin();
	num_rows = *i; i++;
	num_cols = *i; i++;
	shared_ptr<node> tail;
	int m =0;
	int mat = num_rows * num_cols;
	
	while (i != V.end()){
		shared_ptr<node> p = make_shared<node>(*i);
		if (!head)
		{
			head = tail = p;
			p->east = p;
		}
		else
		{
			tail->east = p;
			tail = p;
			p->east = head;
		}
		i++;
	}

	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head;
	shared_ptr<node> h3 = head;
	while (m != mat){
		int i = 0;
		while(i<num_cols){
			h = h->east;
			i++;
		}

		if (h == h3){
			h = h->east;
			h3 = h;
		}

		h2->south = h;
		h2 = h;
		
		if (h->east == head){
			tail = h2;
			h2->south = head;
			break;
		}
		m++;
	}
}

//The operator [] is below
int& ring:: operator[](int a)
{
	if (a == 0)
		return head->value;
	shared_ptr<node> h = head;
	for(int i = a; i!=0; i--){
		h=h->east;
	}
	return h->value;
}

//The pair operator [] is below
int& ring::operator[](pair<int, int> p)
{
	shared_ptr<node> h = head;
	for (int i = 0; i < p.first - 1; i++){
		h = h->south;
	}
	for (int i = 0; i < p.second - 1; i++){
		h = h->east;
	}
	return h->value;
}


//Delete function implemented below
void ring::DelCol(int i)
{
	shared_ptr<node> h = head;
	shared_ptr<node> h2 = head->east;

	if (i > num_cols or i==0)
		return;

	int j = 0;
	if(i != 1){
		for(j != (i-2); j++;){
			h = h->east;
			h2 = h2->east;
		}
	}

	else{
		for(j != num_cols-1; j++;){
			h = h->east;
			h2 = h2->east;
		}
	}

	for (int k = 0; k < num_rows - 1; k++)
	{
		h->east = h2->east;
		cout << "Now Removing " << h2->value<<endl;
		h2.reset();
		h = h->south;
		h2 = h->east;
	}
	h->east = h2->east;
	if (i != 1)
	{
		h->south = h2->south;
		cout << "Now Removing " << h2->value<<endl;
		h2.reset();
		num_cols--;
		cout << endl;
	}
	else{
		h->south = h2->east;
		head = h2->east;
	}
	
}

//Ring three times below
ring ring::Threetimes()
{
	shared_ptr<node> p = head;
	ring temp(num_rows, num_cols);
	shared_ptr<node> T = temp.head;
	int mat = num_rows * num_cols;

	for (size_t i = 0; i < mat; i++)
	{
		T->value = 3 * p->value;
		p = p->east;
		T = T->east;
	}
	return move(temp);
}

//The overload operator << implemented
ostream & operator<<(ostream &str, const ring &R)
{
	shared_ptr<node> p = R.head;
	if (!R.head) { 
		return str; 
	}
	str << p->value << " ";
	p = p->east;
	int count = 1;
	while (p != R.head) {
		if (p->value < 10)
			str << p->value << " ";
		else if (p->value >= 100 && p->value < 999)
			str << p->value << " ";
		else if (p->value >= 1000)
			str << p->value << " ";
		else
			str << p->value << " ";
		p = p->east;
		count++;
		if ((count % R.num_cols) == 0)
			str << endl;
	}
	return str;
}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;
	
	getchar();
	getchar();
	return 0;
}