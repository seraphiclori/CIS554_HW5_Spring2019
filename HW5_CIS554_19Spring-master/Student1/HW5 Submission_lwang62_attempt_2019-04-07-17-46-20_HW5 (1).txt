//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.
	~ring();//destructor; do as little work as possible

	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number
	friend ostream& operator <<(ostream& os, const ring &pt);
	void DelCol(int i);//delete col i of *this

	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
};
ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;

	int total = num_rows * num_cols;

	// deal with east
	shared_ptr<node> front(new node(0));
	head = front;
	for (int i = 1; i < num_rows * num_cols; i++)
	{
		shared_ptr<node> no(new node(i));
		front->east = no;

		front = no;
	}
	front->east = head;

	// deal with south
	shared_ptr<node> start = head;
	for (int i = 0; i < num_cols; i++)
	{

		for (int j = 0; j < i; j++)
		{
			start = start->east;
		}
		shared_ptr<node> tag = start;

		for (int j = 0; j < num_rows - 1; j++)
		{
			shared_ptr<node> end = start;
			for (int m = 0; m < num_cols; m++)
			{
				end = end->east;
			}

			start->south = end;

			start = end;
		}

		if (i != num_cols - 1)
			start->south = tag->east;
		else
			start->south = head;

		start = head;
	}
}

ring::~ring()
{

}

ring::ring(const ring & r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}

ring::ring(ring && r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}

void ring::operator=(ring && r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}

void ring::operator=(const ring & r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
}

ring::ring(const initializer_list<int>& V)
{
	int idx = 0;
	int total = 0;
	shared_ptr<node> front;
	for (auto beg = V.begin(); beg != V.end(); ++beg)
	{
		if (idx == 0)
		{
			num_rows = *beg;
		}
		else if (idx == 1)
		{
			num_cols = *beg;
			total = num_rows * num_cols;
		}
		else
		{

			if (idx == 2)
			{
				shared_ptr<node> no(new node(*beg));
				front = no;
				head = front;
			}
			else
			{
				shared_ptr<node> no(new node(*beg));
				front->east = no;

				front = no;
			}
		}
		idx++;
	}

	// Then deal with south
	shared_ptr<node> start = head;
	for (int i = 0; i < num_cols; i++)
	{

		for (int j = 0; j < i; j++)
		{
			start = start->east;
		}
		shared_ptr<node> tag = start;

		for (int j = 0; j < num_rows - 1; j++)
		{
			shared_ptr<node> end = start;
			for (int m = 0; m < num_cols; m++)
			{
				end = end->east;
			}

			start->south = end;

			start = end;
		}

		if (i != num_cols - 1)
			start->south = tag->east;
		else
			start->south = head;

		start = head;
	}
}

int & ring::operator[](int a)
{
	shared_ptr<node> ptr = head;	// Iterator from head
	int cnt = 0;
	while (cnt < a)
	{
		cnt++;
		ptr = ptr->east;
	}
	return ptr->value;
}

int & ring::operator[](pair<int, int> p)
{
	int index = (p.first - 1) * num_cols + p.second - 1;
	shared_ptr<node> ptr = head;
	int cnt = 0;
	while (cnt < index)
	{
		cnt++;
		ptr = ptr->east;
	}
	return ptr->value;
}

void ring::DelCol(int i)
{
	if (i == 0)
	{
		// last one node
		int index = num_rows * num_cols - 1;
		shared_ptr<node> ptr = head;
		int cnt = 0;
		while (cnt < index)
		{
			cnt++;
			ptr = ptr->east;
		}
		ptr->east = head->east;

		for (int m = 1; m < num_rows; m++)
		{
			index = m * num_cols - 1 - m + 1;
			shared_ptr<node> newptr = head;
			int cnt = 0;
			while (cnt < index)
			{
				cnt++;
				newptr = newptr->east;
			}
			newptr->east = newptr->east->east;
		}

		head = ptr->east;
	}
	else if (i == num_cols - 1)
	{
		shared_ptr<node> ptr;
		for (int m = 0; m < num_rows; m++)
		{
			int index = num_cols * m + (i - 1) - m;
			shared_ptr<node> ptr1 = head;
			int cnt = 0;
			while (cnt < index)
			{
				cnt++;
				ptr1 = ptr1->east;
			}
			shared_ptr<node> ptr2 = ptr1->east->east;

			ptr1->east = ptr2;

			if (m == num_rows - 1)
				ptr1->south = head;
		}
	}
	else
	{
		shared_ptr<node> ptr;
		for (int m = 0; m < num_rows; m++)
		{
			int index = num_cols * m + (i - 1) - m;
			shared_ptr<node> ptr1 = head;
			int cnt = 0;
			while (cnt < index)
			{
				cnt++;
				ptr1 = ptr1->east;
			}

			shared_ptr<node> ptr2 = ptr1->east->east;

			ptr1->east = ptr2;
		}
	}

	num_cols--;
}

ring ring::Threetimes()
{
	ring r;
	r.num_rows = num_rows;
	r.num_cols = num_cols;

	int total = num_rows * num_cols;

	// deal with east
	shared_ptr<node> oldfront = head;
	shared_ptr<node> front(new node(3 * oldfront->value));

	r.head = front;
	for (int i = 1; i < num_rows * num_cols; i++)
	{
		oldfront = oldfront->east;
		shared_ptr<node> no(new node(3 * oldfront->value));
		front->east = no;

		front = no;
	}
	front->east = r.head;

	// deal with south
	shared_ptr<node> start = r.head;
	for (int i = 0; i < num_cols; i++)
	{

		for (int j = 0; j < i; j++)
		{
			start = start->east;
		}
		shared_ptr<node> tag = start;

		for (int j = 0; j < num_rows - 1; j++)
		{
			shared_ptr<node> end = start;
			for (int m = 0; m < num_cols; m++)
			{
				end = end->east;
			}

			start->south = end;

			start = end;
		}

		if (i != num_cols - 1)
			start->south = tag->east;
		else
			start->south = r.head;

		start = r.head;
	}

	return r;
}


int main()
{

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	//first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}

ostream & operator<<(ostream & os, const ring & r)
{
	shared_ptr<node> ptr = r.head;
	int cnt = 0;
	while (ptr)
	{
		os << ptr->value << " ";
		ptr = ptr->east;
		cnt++;

		if (cnt % r.num_cols == 0)
			os << endl;

		if (cnt == r.num_cols * r.num_rows)
			break;
	}
	return os;
}
