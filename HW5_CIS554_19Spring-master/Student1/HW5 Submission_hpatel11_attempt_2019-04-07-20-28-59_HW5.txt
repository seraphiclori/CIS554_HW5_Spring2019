//CIS554 HW3
//Himanshu Patel
//hpatel11@syr.edu
//SUID : 322892520

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring(){}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.
	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number
	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	friend ostream & operator<<(ostream &str, const ring &r);
};
ring::ring(int i, int j)
{
	int val, flag = 0;
	num_rows = i;
	num_cols = j;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1;
	for (int m = 0; m < i; m++)
	{
		for (int n = 0; n < j; n++)
		{
			val = (m*j) + n;
			shared_ptr<node> p = make_shared<node>(val);
			if (n == 0)
			{
				if (m == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (m != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (m == i - 1)
					{
						tmp_col = tmp_col->east;
						if (n == j - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
ring::~ring()
{
	shared_ptr<node> p1 = head, tmp;
	cout << "Destructor" << endl;
	for (int i = 0; i < num_rows * num_cols; i++)
	{
		tmp = p1->east;
		p1.reset();
		p1 = tmp;
	}
}
ring::ring(const ring &r) : ring()
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1, p1 = r.head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(p1->value);
			p1 = p1->east;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
ring::ring(ring &&r)
{
	cout << "Move Constructor" << endl;
	shared_ptr<node> p1 = head, tmp;
	for (int i = 0; i < num_rows * num_cols && p1; i++)
	{
		tmp = p1->east;
		p1.reset();
		p1 = tmp;
	}
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1;
	p1 = r.head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(p1->value);
			p1 = p1->east;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
void ring::operator=(ring &&r)
{
	cout << "R-Value Operator=" << endl;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1, p1 = r.head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(p1->value);
			p1 = p1->east;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
void ring::operator=(const ring &r)
{
	cout << "L-Value Operator=" << endl;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1, p1 = r.head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(p1->value);
			p1 = p1->east;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
ring::ring(const initializer_list<int> &V)
{
	auto it1 = V.begin();
	num_rows = *it1;
	it1++;
	num_cols = *it1;
	it1++;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(*it1);
			it1++;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!head)
				head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = head;
							p->east = head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
}
int & ring::operator[](int a)
{
	int vl = -1;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			if (i * num_cols + j == a)
				return(p1->value);
			p1 = p1->east;
		}
	}
	return(vl);
}
int & ring::operator[](pair<int, int> p)
{
	int vl = -1;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			if (i == p.first && j == p.second)
				return(p1->value);
			p1 = p1->east;
		}
	}
	return(vl);
}
void ring::DelCol(int i)
{
	shared_ptr<node> p1 = head, tmp;
	for (int k = 0; k < num_rows; k++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			if (j + 1 == i)
			{
				tmp = p1->east;
				if (k == num_rows - 1)
				{
					p1->south = (p1->east)->south;
				}
				p1->east = (p1->east)->east;
				tmp.reset();
				j++;
			}
			else if (i == 0 && j == 0)
			{
				tmp = p1->east;
				if (k == 0)
				{
					head = p1->east;					
				}
				else
				{
					p1->east = (p1->east)->east;
				}
				tmp.reset();
				j++;
			}
			p1 = p1->east;
		}
	}
	num_cols--;
}
ring ring::Threetimes()
{
	cout << "Threetimes Function" << endl;
	ring a = ring();
	a.num_cols = num_cols;
	a.num_rows = num_rows;
	shared_ptr<node> tmp_row, tmp_col, tmp_col1;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_rows; i++)
	{
		for (int j = 0; j < num_cols; j++)
		{
			shared_ptr<node> p = make_shared<node>(3 * p1->value);
			p1 = p1->east;
			if (j == 0)
			{
				if (i == 0)
				{
					tmp_col1 = p;
					tmp_col = p;
				}
			}
			if (!a.head)
				a.head = p;
			else
			{
				tmp_row->east = p;
				if (i != 0)
				{
					tmp_col1->south = p;
					tmp_col1 = tmp_col1->east;
					if (i == num_rows - 1)
					{
						tmp_col = tmp_col->east;
						if (j == num_cols - 1)
						{
							tmp_col = tmp_row = a.head;
							p->east = a.head;
						}
						p->south = tmp_col;
					}
				}
			}
			tmp_row = p;
		}
	}
	return move(a);
}

//overload operator<<
ostream & operator<<(ostream &str, const ring &r)
{
	shared_ptr<node> p1 = r.head;

	for (int i = 0; i < r.num_rows; i++)
	{
		for (int j = 0; j < r.num_cols; j++)
		{
			cout << p1->value << " ";
			if (p1->value / 10 == 0)
				cout << " ";
			p1 = p1->east;
		}
		cout << endl;
	}
	cout << endl;
	return str;
}
int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}