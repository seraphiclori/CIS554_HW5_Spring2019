//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions
	shared_ptr<node> head;	
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j) {
		shared_ptr<node> temp;
		shared_ptr<node> temp1;
		shared_ptr<node> temp2;
		shared_ptr<node> temp3;
		num_rows = i;
		num_cols = j;
		int x = 0;
		for (int k = 0; k < i; k++) {
			for (int l = 0; l < j; l++) {
				if (!head) {
					head = make_shared<node>(x);
					x++;
				}
				if (l == 0 && k == 0) {
					temp1 = head;
					temp3 = head;
				}
				else {
					temp = make_shared<node>(x);
					x++;
					head->east = temp;
					head = temp;
					if (l == 1 && k == 0) {
						temp2 = temp;
					}
					if (k != 0) {
						temp1->south = head;
						temp1 = temp1->east;
					}
					if (k == i - 1) {
						head->south = temp2;
						temp2 = temp2->east;
					}
					if ((k == i - 1) && (l == j - 1)) {
						head->south = temp3;
						head->east = temp3;
					}

				}
			}
		}
		head = temp3;
		temp1.reset();
		temp2.reset();
		temp3.reset();
	}//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r);
	//copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i) {
		if (i > num_cols) {
			return;
		}
		i = i + 1;
		shared_ptr<node> temp = head;
		shared_ptr<node> temp1; 
		shared_ptr<node> temp2 = head;
		for (int k = 0; k < num_rows; k++) {
			for (int l = 0; l < num_cols; l++) {
				if (l == i-2) {
					temp->east = temp->east->east;
					if (k == num_rows - 1) {
						temp->south = temp->east->south;
					}
					l++;
				}
				if (i == 1 && l == i - 1) {
					if (k == 0) {
						head = temp->east;
						//cout << head->value<<"\n";
						l++;
					}
					else {
						temp->east = temp->east->east;
						l++;
					}
				}
				if (i == 1 && l == num_cols-1) {
					if (k == num_rows-1) {
						temp = temp->east;

						temp->east = head;
						//cout << temp->value;
						//cout << num_rows << "  " << num_cols<<"    "<<l<<"   "<<k<<"      ";
						temp->south = head;
					}
				}
				temp = temp->east;	
			}
		}
		num_cols--;
		temp1.reset();
		temp2.reset();
	}//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.
	friend ostream & operator<<(ostream &str, const ring &R);
};
ring::~ring() {
	shared_ptr<node> temp = head;
	shared_ptr<node> temp1;
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			temp1 = temp->east;
			temp.reset();
			temp = temp1;
		}
	}
}
ring ring::Threetimes() {
	ring r = ring();
	r.num_cols = num_cols;
	r.num_rows = num_rows;
	//r.head = head;
	shared_ptr<node> temp4 = head;
	shared_ptr<node> temp;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	for (int k = 0; k < num_rows; k++) {
		for (int l = 0; l < num_cols; l++) {
			if (!r.head) {
				r.head = make_shared<node>(3*(temp4->value));
				temp4 = temp4->east;
			}
			if (l == 0 && k == 0) {
				temp1 = r.head;
				temp3 = r.head;
			}
			else {
				temp = make_shared<node>(3*(temp4->value));
				temp4 = temp4->east;

				r.head->east = temp;
				r.head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = r.head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					r.head->south = temp3;
					r.head->east = temp3;
				}
				if (k == num_rows - 1) {
					r.head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	r.head = temp3;
	return move(r);
}

ring::ring(const initializer_list<int> &V) {

	shared_ptr<node> temp;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	auto it = V.begin();
	num_rows = *it;
	it++;
	num_cols = *it;
	it++;
	for (int k = 0; k < num_rows; k++) {

		for (int l = 0; l < num_cols; l++) {
			if (!head) {
				head = make_shared<node>(*it);
				it++;
			}
			if (l == 0 && k == 0) {
				temp1 = head;
				temp3 = head;
			}
			else {
				temp = make_shared<node>(*it);
				it++;

				head->east = temp;
				head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					head->south = temp3;
					head->east = temp3;
				}
				if (k == num_rows - 1) {
					head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	head = temp3;
	temp1.reset();
	temp2.reset();
	temp3.reset();
}
void ring::operator=(const ring &r) {
	shared_ptr<node> temp_head = r.head;
	shared_ptr<node> temp;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	for (int k = 0; k < num_rows; k++) {
		for (int l = 0; l < num_cols; l++) {
			if (!head) {
				head = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;
			}
			if (l == 0 && k == 0) {
				temp1 = head;
				temp3 = head;
			}
			else {
				temp = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;

				head->east = temp;
				head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					head->south = temp3;
					head->east = temp3;
				}
				if (k == num_rows - 1) {
					head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	head = temp3;
	temp1.reset();
	temp2.reset();
	temp3.reset();
}

void ring::operator=(ring &&r) {
	shared_ptr<node> temp_head = r.head;
	shared_ptr<node> temp;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	for (int k = 0; k < num_rows; k++) {
		for (int l = 0; l < num_cols; l++) {
			if (!head) {
				head = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;
			}
			if (l == 0 && k == 0) {
				temp1 = head;
				temp3 = head;
			}
			else {
				temp = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;

				head->east = temp;
				head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					head->south = temp3;
					head->east = temp3;
				}
				if (k == num_rows - 1) {
					head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	head = temp3;
	temp1.reset();
	temp2.reset();
	temp3.reset();
}

ring::ring(const ring &r) {
	shared_ptr<node> temp_head = r.head;
	shared_ptr<node> temp;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	for (int k = 0; k < num_rows; k++) {
		for (int l = 0; l < num_cols; l++) {
			if (!head) {
				head = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;
			}
			if (l == 0 && k == 0) {
				temp1 = head;
				temp3 = head;
			}
			else {
				temp = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;

				head->east = temp;
				head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					head->south = temp3;
					head->east = temp3;
				}
				if (k == num_rows - 1) {
					head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	head = temp3;
	temp1.reset();
	temp2.reset();
	temp3.reset();
}



ring::ring(ring &&r) {
	shared_ptr<node> temp_head = r.head;
	shared_ptr<node> temp;
	shared_ptr<node> head1;
	shared_ptr<node> temp1;
	shared_ptr<node> temp2;
	shared_ptr<node> temp3;
	num_rows = r.num_rows;
	num_cols = r.num_cols;

	for (int k = 0; k < num_rows; k++) {
		for (int l = 0; l < num_cols; l++) {
			if (!head) {
				head = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;
			}
			if (l == 0 && k == 0) {
				temp1 = head;
				temp3 = head;
			}
			else {
				temp = make_shared<node>(temp_head->value);
				temp_head = temp_head->east;

				head->east = temp;
				head = temp;
				if (l == 1 && k == 0) {
					temp2 = temp;
				}
				if (k != 0) {
					temp1->south = head;
					temp1 = temp1->east;
				}
				if ((k == num_rows - 1) && (l == num_cols - 1)) {
					head->south = temp3;
					head->east = temp3;
				}
				if (k == num_rows - 1) {
					head->south = temp2;
					temp2 = temp2->east;
				}
			}
		}
	}
	head = temp3;
	temp1.reset();
	temp2.reset();
	temp3.reset();
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> temp = head;
	int x = 0;
	int z = -1;
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			if ((i == p.first) && (j == p.second)) {
				return temp->value;
			}
			else {
				temp = temp->east;
				x++;
			}
		}
	}
	return z;
}

int & ring::operator[](int a) {
	shared_ptr<node> temp = head;
	int x = 0;
	int z = -1;
	for (int i = 0; i < num_rows; i++) {
		for (int j = 0; j < num_cols; j++) {
			if (x == a) {
				return temp->value;
			}
			else {
				temp = temp->east;
				x++;
			}
		}
	}
	return z;
}

ostream & operator<<(ostream &str, const ring &R) {
	shared_ptr<node> p = R.head;
	if (!R.head) { return str; }
	str << p->value << " ";
	p = p->east;
	int j = 1;
	while (p != R.head) {
		if (j == R.num_cols) {
			j = 0;
			cout << "\n";
		}
		str << p->value << " ";
		p = p->east;
		j++;
	}
	return str;
}


//overload operator<<

int main() {

	ring R1(3, 5);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(5);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}