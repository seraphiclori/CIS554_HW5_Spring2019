//HW5 Due: April 7 (Sunday) at 11:59PM
//HW5
//Name:Shruti Mavani
//Email:smavani@syr.edu
//SUID:277396309
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.


	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes()
	{
		shared_ptr<node> ptr1 = head;
		for (int x = 0; x < num_cols*num_rows; x++)
		{
			ptr1->value = 3 * ptr1->value;
			ptr1 = ptr1->east;
		}
		return *this;

	}
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

	friend ostream & operator<<(ostream & str, const ring &R);

};

//overload operator<<

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}

ring::ring(int i, int j)
{
	if (i == 0 || j == 0)
		return;
	num_rows = i;
	num_cols = j;
	// east connection
	head = make_shared<node>(0);
	shared_ptr<node> ptr1 = head;
	shared_ptr<node> ptr2;
	int x = 1;
	if (num_rows == 1 && num_cols == 1)
	{
		head->east = head;
		head->south = head;
	}
	else 
	{
		while (x < (i*j))
		{
			ptr2 = make_shared<node>(x);
			ptr1->east = ptr2;
			ptr1 = ptr2;
			x++;
		}
		ptr2->east = head;

		// south connection
		ptr1 = head;
		ptr2 = head;
		for (int y = 0; y < j; y++)
		{
			ptr2 = ptr2->east;
		}
		if (ptr2 == head)
		{
			ptr2 = ptr2->east;
		}

		while (ptr1->east != head)
		{
			ptr1->south = ptr2;
			ptr1 = ptr1->east;
			ptr2 = ptr2->east;
			if (ptr2 == head)
			{
				ptr2 = head->east;
			}
		}
		ptr1->south = head;
	}
}

ring::~ring()
{
	if (head != nullptr)
	{
		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2 = head->east;
		while (ptr2 != head)
		{
			ptr1->east.reset();
			ptr1 = ptr2;
			ptr2 = ptr1->east;
		}
		ptr1->east.reset();
		ptr2->south.reset();
		ptr1.reset();
		ptr2.reset();
	}
}

//copy constructor
ring::ring(const ring & r):ring()
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	int x = 1;
	if (num_rows == 1 && num_cols == 1)
	{
		head->east = head;
		head->south = head;
	}
	else
	{
		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2;
		shared_ptr<node> ptr3 = r.head->east;
		while (x < (num_rows*num_cols))
		{
			ptr2 = make_shared<node>(ptr3->value);
			ptr1->east = ptr2;
			ptr1 = ptr2;
			ptr3 = ptr3->east;
			x++;
		}
		ptr2->east = head;

		// south connection
		ptr1 = head;
		ptr2 = head;
		for (int y = 0; y < num_cols; y++)
		{
			ptr2 = ptr2->east;
		}
		if (ptr2 == head)
		{
			ptr2 = ptr2->east;
		}

		while (ptr1->east != head)
		{
			ptr1->south = ptr2;
			ptr1 = ptr1->east;
			ptr2 = ptr2->east;
			if (ptr2 == head)
			{
				ptr2 = head->east;
			}
		}
		ptr1->south = head;
	}
}

//move
ring::ring(ring && r)
{
	if (head != nullptr)
	{
		head = r.head;
		num_rows = 0;
		num_cols = 0;
		r.head.reset();
	}
}

//r value
void ring::operator=(ring && r)
{
	if (head != nullptr)
	{

		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2 = head->east;
		while (ptr2 != head)
		{
			ptr1->east.reset();
			ptr1 = ptr2;
			ptr2 = ptr1->east;
		}
		ptr1->east.reset();
		ptr2->south.reset();
		ptr1.reset();
		ptr2.reset();
	}

	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.head.reset();

}




ostream & operator<<(ostream & str, const ring & R)
{
	// TODO: insert return statement here
	//

	
	shared_ptr<node> ptr1 = R.head;
	shared_ptr<node> ptr2;
	int x = 1;
	str << ptr1->value << "  ";
	ptr1 = ptr1->east;
	while (ptr1 != R.head)
	{
		x++;
		str << ptr1->value << "  ";
		if (x % R.num_cols == 0)
			str << endl;
		ptr1 = ptr1->east;

	}
	str << endl;
	return str;
}

//l-value
void ring::operator=(const ring & r)
{
	if (head != nullptr)
	{
		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2 = head->east;
		while (ptr2 != head)
		{
			ptr1->east.reset();
			ptr1 = ptr2;
			ptr2 = ptr1->east;
		}
		ptr1->east.reset();
		ptr2->south.reset();
		ptr1.reset();
		ptr2.reset();
	}

	if (r.num_rows == 0 || r.num_cols == 0)
		return;

	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = make_shared<node>(r.head->value);
	int x = 1;
	if (num_rows == 1 && num_cols == 1)
	{
		head->east = head;
		head->south = head;
	}
	else
	{
		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2;
		shared_ptr<node> ptr3 = r.head->east;
		while (x < (num_rows*num_cols))
		{
			ptr2 = make_shared<node>(ptr3->value);
			ptr1->east = ptr2;
			ptr1 = ptr2;
			ptr3 = ptr3->east;
			x++;
		}
		ptr2->east = head;

		// south connection
		ptr1 = head;
		ptr2 = head;
		for (int y = 0; y < num_cols; y++)
		{
			ptr2 = ptr2->east;
		}
		if (ptr2 == head)
		{
			ptr2 = ptr2->east;
		}

		while (ptr1->east != head)
		{
			ptr1->south = ptr2;
			ptr1 = ptr1->east;
			ptr2 = ptr2->east;
			if (ptr2 == head)
			{
				ptr2 = head->east;
			}
		}
		ptr1->south = head;
	}
}

ring::ring(const initializer_list<int>& V):ring()
{
	auto it1 = V.begin();

	num_rows = *(it1);
	it1++;
	num_cols = *(it1);
	it1++;
	head = make_shared<node>(*it1);
	it1++;
	while (it1 != V.end())
	{
		shared_ptr<node> ptr1 = head;
		shared_ptr<node> ptr2;
		int x = 1;
		if (num_rows == 1 && num_cols == 1)
		{
			head->east = head;
			head->south = head;
		}
		else
		{
			while (x < (num_rows*num_cols))
			{
				ptr2 = make_shared<node>(*it1);
				ptr1->east = ptr2;
				ptr1 = ptr2;
				x++;
				it1++;
			}
			ptr2->east = head;

			// south connection
			ptr1 = head;
			ptr2 = head;
			for (int y = 0; y < num_cols; y++)
			{
				ptr2 = ptr2->east;
			}
			if (ptr2 == head)
			{
				ptr2 = ptr2->east;
			}

			while (ptr1->east != head)
			{
				ptr1->south = ptr2;
				ptr1 = ptr1->east;
				ptr2 = ptr2->east;
				if (ptr2 == head)
				{
					ptr2 = head->east;
				}
			}
			ptr1->south = head;
		}		
	}
}

int & ring::operator[](int a)
{
	// TODO: insert return statement here
	if (head)
	{
		if (a >= 0 && a <= (num_rows*num_cols))
		{
			shared_ptr<node> ptr1;
			ptr1 = head;
			for (int j = 0; j < a; j++)
			{
				ptr1 = ptr1->east;
			}
			return ptr1->value;
		}
	}

}

int & ring::operator[](pair<int, int> p)
{
	// TODO: insert return statement here
	if (head)
	{
		if (p.first >= 0 && p.second >= 0 && p.first < num_rows && p.second < num_cols)
		{
				shared_ptr<node> ptr1 = head;
				for (int x = 0; x < p.first; x++)
				{
					ptr1 = ptr1->south;
				}
				for (int x = 0; x < p.second; x++)
				{
					ptr1 = ptr1->east;
				}
				return ptr1->value;
		}
	}
}


void ring::DelCol(int i)
{
	shared_ptr<node> ptr1;
	ptr1 = head;
	if (head)
	{
		if (i == 0)
		{
			for (int x = 1; x < num_cols; x++)
			{
				ptr1 = ptr1->east;
			}
		}
		for (int x = 1; x < i; x++)
		{
			ptr1 = ptr1->east;
		}
		for (int x = 1; x < num_rows; x++)
		{
			ptr1->east->south.reset();
			ptr1->east = ptr1->east->east;
			ptr1 = ptr1->south;
		}
		if (i == (num_cols - 1))
		{
			ptr1->south = head;
		}
		else
		{
			ptr1->south = ptr1->south->east;
		}
		ptr1->east = ptr1->east->east;
		num_cols--;
		if (i == 0)
		{
			head = ptr1->east;
		}
	}
}


