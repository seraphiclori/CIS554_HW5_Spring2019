//HW5 Due: April 7 (Sunday) at 11:59PM
//Karthik Sama
//kasama@syr.edu
//463617949

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r); //copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream & operator<<(ostream & str, const ring &R)
{
	if (R.head)
	{
		shared_ptr<node> p1 = R.head;
		int x = 1;
		while (p1->east != R.head)
		{
			str << p1->value << " ";
			if (x % R.num_cols == 0)
				str << endl;
			p1 = p1->east;
			x++;
		}
		str << p1->value << "   " << endl;
	}
	return str;
}

ring::ring(int i, int j)
{
	num_rows = i;
	num_cols = j;
	if (i != 0 && j != 0)
	{
		head = make_shared<node>(0);
		if ((i*j) > 1)
		{
			shared_ptr<node> p1 = head, p2;
			for (int k = 1; k < (i*j); k++)
			{
				p2 = make_shared<node>(k);
				p1->east = p2;
				p1 = p2;
			}
			p2->east = head;
			p1 = head;
			p2 = head;

			for (int k = 0; k < j; k++)
			{
				p2 = p2->east;
			}
			if (p2 == head)p2 = p2->east;

			while (p1->east != head)
			{
				p1->south = p2;
				p1 = p1->east;
				p2 = p2->east;
				if (p2 == head)
					p2 = head->east;
			}
			p1->south = head;
		}
		else
		{
			head->east = head;
			head->south = head;
		}
	}
}

ring::~ring()
{
	if (head)
	{
		shared_ptr<node> p1 = head;
		if (num_rows <= num_cols)
		{
			for (int i = 1; i < num_rows; i++)
			{
				p1->east->south = nullptr;
				p1->east = nullptr;
				p1 = p1->south;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		else
		{
			for (int i = 1; i < num_cols; i++)
			{
				p1->south->east = nullptr;
				p1->south = nullptr;
				p1 = p1->east;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		head = nullptr;
		p1 = nullptr;
	}
}

int & ring::operator[](int a)
{
	if (head && a >= 0 && a < (num_rows*num_cols))
	{
		shared_ptr<node> p1 = head;
		for (int i = 0; i < a; i++)
		{
			p1 = p1->east;
		}
		return p1->value;
	}
}

int & ring::operator[](pair<int, int> p)
{
	if (head && p.first < num_rows && p.first >= 0 && p.second < num_cols && p.second >= 0)
	{
		shared_ptr<node> p1 = head;
		for (int i = 0; i < p.first; i++)
		{
			p1 = p1->south;
		}
		for (int i = 0; i < p.second; i++)
		{
			p1 = p1->east;
		}
		return p1->value;
	}
}
void ring::DelCol(int c)
{
	if (head && c >= 0 && c < num_cols)
	{
		shared_ptr<node> p1 = head;
		if (c == 0)
			c = num_cols;
		for (int i = 1; i < c; i++)
			p1 = p1->east;

		for (int i = 1; i < num_rows; i++)
		{
			p1->east->south = nullptr;
			p1->east = p1->east->east;
			p1 = p1->south;
		}
		if (c == (num_cols - 1))
			p1->south = head;
		else
			p1->south = p1->south->east;

		p1->east = p1->east->east;
		if (c == num_cols)
			head = p1->east;
		num_cols -= 1;
	}
}

ring::ring(const initializer_list<int>& v) :ring()
{
	auto it = v.begin();
	if (it != nullptr)
	{
		num_rows = *(it++);
		num_cols = *(it++);

		head = make_shared<node>(*it);
		it++;
		if ((num_rows*num_cols) > 1)
		{
			shared_ptr<node> p1 = head, p2;
			for (int k = 1; k < (num_rows*num_cols); k++)
			{
				p2 = make_shared<node>(*it);
				it++;
				p1->east = p2;
				p1 = p2;
			}
			p2->east = head;
			p1 = head;
			p2 = head;

			for (int k = 0; k < num_cols; k++)
			{
				p2 = p2->east;
			}
			if (p2 == head)p2 = p2->east;

			while (p1->east != head)
			{
				p1->south = p2;
				p1 = p1->east;
				p2 = p2->east;
				if (p2 == head)
					p2 = head->east;
			}
			p1->south = head;
		}
		else
		{
			head->east = head;
			head->south = head;
		}
	}
}

ring::ring(const ring & R) :ring()
{
	if (R.head)
	{
		num_rows = R.num_rows;
		num_cols = R.num_cols;
		head = make_shared<node>(R.head->value);

		if ((num_rows*num_cols) > 1)
		{
			shared_ptr<node> p1 = head, p2;
			shared_ptr<node> pR = R.head->east;
			for (int k = 1; k < (num_rows*num_cols); k++)
			{
				p2 = make_shared<node>(pR->value);
				pR = pR->east;
				p1->east = p2;
				p1 = p2;
			}
			p2->east = head;
			p1 = head;
			p2 = head;

			for (int k = 0; k < num_cols; k++)
			{
				p2 = p2->east;
			}
			if (p2 == head)p2 = p2->east;

			while (p1->east != head)
			{
				p1->south = p2;
				p1 = p1->east;
				p2 = p2->east;
				if (p2 == head)
					p2 = head->east;
			}
			p1->south = head;
		}
		else
		{
			head->east = head;
			head->south = head;
		}
	}
}

void ring::operator=(const ring & R)
{
	if (head)
	{
		shared_ptr<node> p1 = head;
		if (num_rows <= num_cols)
		{
			for (int i = 1; i < num_rows; i++)
			{
				p1->east->south = nullptr;
				p1->east = nullptr;
				p1 = p1->south;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		else
		{
			for (int i = 1; i < num_cols; i++)
			{
				p1->south->east = nullptr;
				p1->south = nullptr;
				p1 = p1->east;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		head = nullptr;
		p1 = nullptr;
	}

	if (R.head)
	{
		num_rows = R.num_rows;
		num_cols = R.num_cols;
		head = make_shared<node>(R.head->value);

		if ((num_rows*num_cols) > 1)
		{
			shared_ptr<node> p1 = head, p2;
			shared_ptr<node> pR = R.head->east;
			for (int k = 1; k < (num_rows*num_cols); k++)
			{
				p2 = make_shared<node>(pR->value);
				pR = pR->east;
				p1->east = p2;
				p1 = p2;
			}
			p2->east = head;
			p1 = head;
			p2 = head;

			for (int k = 0; k < num_cols; k++)
			{
				p2 = p2->east;
			}
			if (p2 == head)p2 = p2->east;

			while (p1->east != head)
			{
				p1->south = p2;
				p1 = p1->east;
				p2 = p2->east;
				if (p2 == head)
					p2 = head->east;
			}
			p1->south = head;
		}
		else
		{
			head->east = head;
			head->south = head;
		}
	}
}

void ring::operator=(ring &&R)
{
	if (head)
	{
		shared_ptr<node> p1 = head;
		if (num_rows <= num_cols)
		{
			for (int i = 1; i < num_rows; i++)
			{
				p1->east->south = nullptr;
				p1->east = nullptr;
				p1 = p1->south;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		else
		{
			for (int i = 1; i < num_cols; i++)
			{
				p1->south->east = nullptr;
				p1->south = nullptr;
				p1 = p1->east;
			}
			p1->east = nullptr;
			p1->south = nullptr;
		}
		head = nullptr;
		p1 = nullptr;
	}

	num_rows = R.num_rows;
	num_cols = R.num_cols;
	head = R.head;
	R.head = nullptr;
	R.num_rows = 0;
	R.num_cols = 0;
}

ring::ring(ring && R) :ring()
{
	num_rows = R.num_rows;
	num_cols = R.num_cols;
	head = R.head;
	R.head = nullptr;
	R.num_rows = 0;
	R.num_cols = 0;
}

ring ring::Threetimes()
{
	ring Rnew = *this;
	shared_ptr<node> p1 = Rnew.head;
	if (Rnew.head)
	{
		while (p1->east != Rnew.head)
		{
			p1->value = p1->value * 3;
			p1 = p1->east;
		}
		p1->value = 3 * p1->value;
	}
	return Rnew;

}

int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}