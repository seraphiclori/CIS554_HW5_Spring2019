// Nicholas Robson
// nlrobson@syr.edu
// 660936064
//HW5 Due: April 7 (Sunday) at 11:59PM
#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r) { //copy constructor
		*head = *(r.head);
	}
	ring(ring &&r) { //move constructor
		head = r.head;
		r.head = nullptr;
		r.head.reset();
	}
	void operator=(ring &&r) { //R-value operator=
		head = r.head;
		num_cols = r.num_cols;
		num_rows = r.num_rows;
		r.head = nullptr;
		r.head.reset();		
	}

	void operator=(const ring &r) { //L-value operator=
		*head = *(r.head);
	}
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[](int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};
ring::~ring() {
	shared_ptr<node> p = head->south;
	while (p != head->east) {
		p->east.reset();
		p = p->south;
	}
	head->east.reset();
	head->south.reset(); 
}

ring::ring(int i, int j) {
	num_rows = j;
	num_cols = i;
	int num = 0;
	int count = 0;
	shared_ptr<node> startCol, prevCol, prev, tail, south, firstCol, p2, p3, p4;

	// make row
	for (int x = 0; x < i; x++) {
		startCol = make_shared<node>(num);
		
		if (x == 0) {			
			head = startCol;
			startCol->east = head;
			startCol->south = head;
		}
		else {
			prevCol->east = startCol;
			startCol->east = head;
			startCol->south = head;
		}
		
		prev = startCol;

		// make column
		for (int y = 1; y < j; y++) {
			south = make_shared<node>(num + (i * (y+1)) - i);
			south->east = head;
			south->south = head;		
			
			if (prevCol != nullptr) {
				tail->south = south;
				prevCol->east = prev;
				prev->east = firstCol->south;
				prevCol = prevCol->south;
				prevCol->east = south;
				south->east = firstCol->south;
				
				firstCol = firstCol->south;
			}
			else {
				prev->east = south;
			}				
			prev->south = south;
			prev = south;
		}

		if (prevCol != nullptr) {
			prevCol->south = startCol;
			south->south = head;
			south->east = head;
		}
		firstCol = head;
		prevCol = startCol;
		num++;
		tail = prev;
		
	}

}

//void operator=(ring &&r);//R-value operator=
//void operator=(const ring &r); //L-value operator=


std::ostream & operator<<(ostream & str, const ring &t) {
	shared_ptr<node> p = t.head;
	shared_ptr<node> row, col;
	row = col = p;
	//str << p->value;
	//p = p->east;

	for (int i = 0; i < t.num_rows; i++) {
		for (int k = 0; k < t.num_cols; k++) {
			str << col->value << " ";
			col = col->east;
		}
		str << "\n";
		row = row->south;
		col = row;
	}


	//while (p != t.head) {
	//	str << " " << p->value;
	//	p = p->east;
	//}
	return str;
}

int & ring::operator[](int a) {
	shared_ptr<node> p = head;
	int i = 0;
	if (a > num_cols * num_cols) {
//		return 0; // throw error here
	}
	else {
		while (i < a) {
			i++;
			p = p->east;
		}
	}
	return p->value;
}

int & ring::operator[](pair<int, int> p) {
	shared_ptr<node> ptr = head;
	if (p.first > num_rows || p.second > num_cols) {

	}
	else {
		for (int i = 0; i < p.first; i++) {
			ptr = ptr->south;
		}
		for (int i = 0; i < p.second; i++) {
			ptr = ptr->east;
		}
	}
	return ptr->value;
}

void ring::DelCol(int i) {
	shared_ptr<node> p = head;
	shared_ptr<node> prev, next, first;
	if (i == 0) {
		prev = head;
		for (int k = 0; k < num_cols-1; k++) {
			prev = prev->east;
		}
		cout << "prev: " << prev->value << endl;
		p = head;
		next = p->east;
		head = next;
		first = next;

		for (int k = 0; k < num_rows; k++) {
			prev->east = next->south;;
			prev = prev->south;
			next = next->south;
			p->east.reset();
			p = p->south;
		}
		prev->south = first;
		prev->east = first;

		num_cols--;
	}
	else if (i > num_cols) {
		cout << "Not Enough Columns" << endl;

	}
	else {
		for (int k = 0; k < i; k++) {
			prev = p;
			p = p->east;
			next = p->east;
		}
		first = next;
		for (int k = 0; k < num_rows; k++) {
			if (p == head) {
				head = next;
			}
			prev->east = next;
			prev = prev->south;
			next = next->south;
			p->east = nullptr;
			p = p->south;
		}
		//p->south.reset();
		p.reset();
		prev->south = first;

		num_cols--;
	}	
}

ring::ring(const initializer_list<int> &V) {
	auto i = V.begin();
	int row = *i;
	i++;
	int col = *i;
	ring r (row, col);
	head = r.head;
	r.head = nullptr;
	this->num_cols = r.num_cols;
	this->num_rows = r.num_rows;
	shared_ptr<node> p = head;

	while (i != V.end()) {
		p->value = *i;
		p = p->east;
		i++;
	}
}


int main() {

	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	cout << R1 << endl;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	/*cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	/*R5 = R4.Threetimes();
	cout << R5 << endl;
	*/
	getchar();
	getchar();
	return 0;
}