//CIS554 HW5
//NAME Xianghong Liu
//EMAIL xliu167@syr.edu
//SUID 350677510

#include <iostream>
#include <memory>

using namespace std;

class node {
public:
	shared_ptr<node> east;
	shared_ptr<node> south;
	int value;
	node() {}
	node(int i) { value = i; }
};

class ring {
public:
	//Implement all functions described below
	//funciton operator[] can be invoked by other functions


	shared_ptr<node> head;
	int num_rows;
	int num_cols;
	ring() {}
	ring(int i, int j);//constructor
					   //i rows and j cols
					   //values from 0 to i*j-1
					//See the photo for ring structures.

	~ring();//destructor; do as little work as possible
	ring(const ring &r);//copy constructor
	ring(ring &&r); //move constructor
	void operator=(ring &&r);//R-value operator=
	void operator=(const ring &r); //L-value operator=
	ring(const initializer_list<int> &V);//see the explanation in main function
	int & operator[] (int a);
	int & operator[](pair<int, int> p); //first is row number and second is col number

	void DelCol(int i);//delete col i of *this
	ring Threetimes();
	//return a ring with the same dimenstion as *this, and the value of every node is three times of that of *this.

};

//overload operator<<
ostream & operator<<(ostream & str, const ring & r)
{
	if (!r.head)
	{
		str << "the ring is empty";
		return str;
	}
	shared_ptr<node> sp = r.head;
	str << sp->value << "  ";
	if (r.num_cols == 1) str << endl;
	sp = sp->east;
	int count = 1;
	while (sp != r.head)
	{
		count++;
		str << sp->value;
		if (sp->value < 10) str << "  ";
		else str << " ";
		if (count % r.num_cols == 0) str << endl;
		sp = sp->east;
	}
	/*
	sp = r.head;
	for (int x = 0; x < r.num_cols * r.num_rows +1; x++)
	{
		str << sp->value << " ";
		sp = sp->south;
	}
	*/
	return str;
}


int main() {
	
	ring R1(4, 6);//24 numbers from 0 to 23 will be initialized to nodes.
	cout << R1 << endl;
	R1[14] = 1000;
	R1[{2, 4}] = 2000;
	cout << R1[14] << " " << R1[{2, 4}] << endl;
	R1.DelCol(3);
	cout << R1 << endl;
	R1.DelCol(4);
	cout << R1 << endl;
	R1.DelCol(0);
	cout << R1 << endl;
	shared_ptr<ring> p1 = make_shared<ring>(3, 5);
	cout << *p1 << endl;
	p1.reset();
	ring R2 = { 3, 5, 10,20,30,40,50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000 };//
	 //first two numbers are num_rows and num_cols; followed by values of nodes of ring
	cout << R2 << endl;
	ring R3(R2);
	cout << R3 << endl;
	ring R4;
	R4 = R3;
	cout << R4 << endl;
	ring R5;
	R5 = R4.Threetimes();
	cout << R5 << endl;

	getchar();
	getchar();
	return 0;
}

ring::ring(int i, int j)
{
	num_rows = i; num_cols = j;
	shared_ptr<node> tail;
	shared_ptr<node> sp;
	for (int index = i*j-1; index >= 0; index--)
	{
		if (!head)
		{
			head = make_shared<node>(index);
			tail = head;
		}
		else
		{
			sp = make_shared<node>(index);
			sp->east = head;
			head = sp;
		}
	}
	tail->east = head;
	shared_ptr<node> sp2;
	shared_ptr<node> sp3;
	sp = head;
	for (int index = 0; index < num_cols; index++)
	{
		sp2 = sp;
		for (int m = 0; m < num_rows-1; m++)
		{
			sp3 = sp2;
			for (int n = 0; n < num_cols; n++)
			{
				sp3 = sp3->east;
			}
			sp2->south = sp3;
			sp2 = sp2->south;
		}
		if (sp2 != tail)
		{
			sp2->south = sp->east;
			sp = sp->east;
		}
		else
			sp2->south = head;
	}
}

ring::~ring()
{
	if (!head)
		return;
	shared_ptr<node> p1 = head;
	for (int i = 0; i < num_cols*num_rows-1; i++)
	{
		p1->east.reset();
		p1 = p1->south;
	}
	p1->east.reset();
	p1->south.reset();
}

ring::ring(const ring & r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	shared_ptr<node> p_r = r.head;
	for (int i = 0;i< num_rows * num_cols;i++)
	{
		if (!head)
		{
			tail = head = make_shared<node>(p_r->value);
		}
		else
		{
			tail->east = make_shared<node>(p_r->value);
			tail = tail->east;
		}
		if (i == num_rows * num_cols - 1)
			tail->east = head;
		else
			p_r = p_r->east;
	}
	shared_ptr<node> sp = head;
	shared_ptr<node> sp2;
	shared_ptr<node> sp3;
	for (int index = 0; index < num_cols; index++)
	{
		sp2 = sp;
		for (int m = 0; m < num_rows - 1; m++)
		{
			sp3 = sp2;
			for (int n = 0; n < num_cols; n++)
			{
				sp3 = sp3->east;
			}
			sp2->south = sp3;
			sp2 = sp2->south;
		}
		if (sp2 != tail)
		{
			sp2->south = sp->east;
			sp = sp->east;
		}
		else
			sp2->south = head;
	}
}

ring::ring(ring && r)
{
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	head = r.head;
	r.head.reset();
}

void ring::operator=(ring && r)
{
	if (head)
	{
		shared_ptr<node> p1 = head;
		for (int i = 0; i < num_cols*num_rows - 1; i++)
		{
			p1->east.reset();
			p1 = p1->south;
		}
		p1->east.reset();
		p1->south.reset();
	}
	head = r.head;
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	r.head.reset();
}

void ring::operator=(const ring & r)
{
	if (head)
	{
		shared_ptr<node> p1 = head;
		for (int i = 0; i < num_cols*num_rows - 1; i++)
		{
			p1->east.reset();
			p1 = p1->south;
		}
		p1->east.reset();
		p1->south.reset();
	}
	num_rows = r.num_rows;
	num_cols = r.num_cols;
	shared_ptr<node> tail;
	shared_ptr<node> p_r = r.head;
	for (int i = 0; i < num_rows * num_cols; i++)
	{
		if (!head)
		{
			tail = head = make_shared<node>(p_r->value);
		}
		else
		{
			tail->east = make_shared<node>(p_r->value);
			tail = tail->east;
		}
		if (i == num_rows * num_cols - 1)
			tail->east = head;
		else
			p_r = p_r->east;
	}
	shared_ptr<node> sp = head;
	shared_ptr<node> sp2;
	shared_ptr<node> sp3;
	for (int index = 0; index < num_cols; index++)
	{
		sp2 = sp;
		for (int m = 0; m < num_rows - 1; m++)
		{
			sp3 = sp2;
			for (int n = 0; n < num_cols; n++)
			{
				sp3 = sp3->east;
			}
			sp2->south = sp3;
			sp2 = sp2->south;
		}
		if (sp2 != tail)
		{
			sp2->south = sp->east;
			sp = sp->east;
		}
		else
			sp2->south = head;
	}
}

ring::ring(const initializer_list<int>& V)
{
	auto it = V.begin();
	num_rows = *it; it++;
	num_cols = *it;
	shared_ptr<node> tail;
	shared_ptr<node> sp;
	it = V.end() - 1;
	for (int index = num_rows * num_cols - 1; index >= 0; index--)
	{
		if (!head)
		{
			head = make_shared<node>(*it);
			tail = head;
		}
		else
		{
			sp = make_shared<node>(*it);
			sp->east = head;
			head = sp;
		}
		it--;
	}
	tail->east = head;
	shared_ptr<node> sp2;
	shared_ptr<node> sp3;
	sp = head;
	for (int index = 0; index < num_cols; index++)
	{
		sp2 = sp;
		for (int m = 0; m < num_rows - 1; m++)
		{
			sp3 = sp2;
			for (int n = 0; n < num_cols; n++)
			{
				sp3 = sp3->east;
			}
			sp2->south = sp3;
			sp2 = sp2->south;
		}
		if (sp2 != tail)
		{
			sp2->south = sp->east;
			sp = sp->east;
		}
		else
			sp2->south = head;
	}
}

int & ring::operator[](int a)
{
	shared_ptr<node> sp = head;
	while (a--)
	{
		sp = sp->east;
	}
	return sp->value;
}

int & ring::operator[](pair<int, int> p)
{
	shared_ptr<node> sp = head;
	while (p.first--)
	{
		sp = sp->south;
	}
	while (p.second--)
	{
		sp = sp->east;
	}
	return sp->value;
}

void ring::DelCol(int i)
{
	shared_ptr<node> sp = head;
	shared_ptr<node> sp2;
	if (i != 0)
	{
		while (--i)
		{
			sp = sp->east;
		}
		for (int m = 0; m < num_rows; m++)
		{
			sp2 = sp->east;
			sp->east = sp2->east;
			if (m == num_rows - 1)
				sp->south = sp2->south;
			else
				for (int n = 0; n < num_cols - 1; n++)
				{
					sp = sp->east;
				}
		}
	}
	else
	{
		if (num_cols == 1)
		{
			shared_ptr<node> p1 = head;
			for (int i = 0; i < num_cols*num_rows - 1; i++)
			{
				p1->east.reset();
				p1 = p1->south;
			}
			p1->east.reset();
			p1->south.reset();
			head.reset();
		}
		else 
		{
			head = sp->east;
			for (int n = 0; n < num_cols - 1; n++)
			{
				sp = sp->east;
			}
			for (int m = 0; m < num_rows; m++)
			{
				sp2 = sp->east;
				sp->east = sp2->east;
				if (m == num_rows - 1)
					sp->south = head;
				else
					for (int n = 0; n < num_cols - 1; n++)
					{
						sp = sp->east;
					}
			}
		}
	}
	num_cols--;
}

ring ring::Threetimes()
{
	ring temp(*this);
	for (int i = 0; i < num_cols*num_rows; i++)
	{
		temp[i] = temp[i] * 3;
	}
	return move(temp);
}
